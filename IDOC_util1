class ZCL_AMS_I01081_UTILTY definition
  public
  inheriting from ZCL_AR_AMS_AGREEMENT_REQUEST
  final
  create public

  global friends ZCL_AR_AMS_AGREEMENT_REQUEST
                 ZCL_AR_AMS_AGREEMENT_REQ_CN
                 ZCL_AR_AMS_AGREQ_RULES
                 ZCL_AR_AMS_AGR_N_AGR_REQ .

public section.
  class ZCL_AR_AMS_AGREEMENT_REQUEST definition load .

  types:
    BEGIN OF gty_agr,
        key_val         TYPE sysuuid_c32,
        allow_type_code TYPE zallow_typ,
        idoc_num        TYPE edi_docnum,
        contract_id     TYPE zd_mdmcontract_number,
        int_id          TYPE zd_inter_id,
        cntry           TYPE land1,
        knuma_ag        TYPE /irm/ip_knuma_ag,
        created_date    TYPE erdat,
        created_time    TYPE zd_lst_time,
        agr_status      TYPE /irm/ip_ustat,
        vend_number     TYPE LIFNR,
        settl_partn     TYPE ZD_MDM_SETTL_PARTN,
        merch_hier      TYPE ZD_MERCH_HIER,
      END OF gty_agr .
  types:
    BEGIN OF gty_kona,
        knuma_ag TYPE knuma_ag,
        datab    TYPE datab,
        databi   TYPE datbi,
        zlsch    TYPE dzlsch,
      END OF gty_kona .
  types:
    BEGIN OF gty_kona_dup,
        knuma_ag        TYPE knuma_ag,
        datab           TYPE datab,
        databi          TYPE datbi,
        zlsch           TYPE dzlsch,
        contract_id     TYPE zd_mdmcontract_number,
        allow_type_code TYPE zallow_typ,
        ustat           TYPE /irm/ip_ustat,
      END OF gty_kona_dup .
  types:
    BEGIN OF gty_agr_stat,
        knuma_ag TYPE knuma_ag,
        ustat    TYPE /irm/ip_ustat,
        ident    TYPE /irm/ip_setlcal,
      END OF gty_agr_stat .
  types:
    BEGIN OF gty_boart,
        sign(1)   TYPE c,
        option(2) TYPE c,
        low       TYPE boart,
        high      TYPE boart,
      END OF gty_boart .
  types:
    gtt_boart TYPE TABLE OF gty_boart .
  types:
    BEGIN OF gty_knuma_ag,
        sign(1)   TYPE c,
        option(2) TYPE c,
        low       TYPE /irm/ip_knuma_ag,
        high      TYPE /irm/ip_knuma_ag,
      END OF gty_knuma_ag .
  types:
    gtt_knuma_ag TYPE TABLE OF gty_knuma_ag .
  types:
    BEGIN         OF gty_status,
        icon(4)         TYPE c,
        agrno           TYPE knuma_ag,
        agrtyp          TYPE boart,
        allow_type_code TYPE zallow_typ,
        location_type   TYPE zd_loc_type,
        new_agr         TYPE knuma_ag,
        message         TYPE  char100,
      END OF gty_status .
  types:
    gtt_status     TYPE STANDARD TABLE OF gty_status .
  types GTT_KONA type GTY_KONA .

  data GT_IDOC_STATUS type T_IDOC_STATUS .
  data GS_IDOC_CONTROL type EDIDC .
  data GT_IDOC_INPUT_I type ZTT_I01081_IDOC_ITEM .
  data GS_INPUT_DATA_H type ZST_I01081_IDOC_HEAD .
  class-data GV_LAND1 type LAND1 .
  constants GC_ZFAP type MSGID value 'ZFAP' ##NO_TEXT.
  constants GC_ZFAR type MSGID value 'ZFAR' ##NO_TEXT.
  constants GC_68 type EDI_STCTRL value '68' ##NO_TEXT.
  data GS_AGR_HEAD_DATA type ZST_I01081_AGR_HEAD .
  data GT_AGR_ITEM_DATA type ZTT_I01081_AGR_ITEM .
  constants GC_ENGLISH type CHAR1 value 'E' ##NO_TEXT.
  constants GC_CREATE type ZD_AGR_MODE value 'N' ##NO_TEXT.
  constants GC_CHANGE type ZD_AGR_MODE value 'C' ##NO_TEXT.
  constants GC_CANCEL type ZD_AGR_MODE value 'X' ##NO_TEXT.
  constants GC_UPDATE type ZD_AGR_MODE value 'U' ##NO_TEXT.
  data GO_VENDOR type ref to ZIF_AR_AMS_AGR_VENDOR .
  data GO_LOCATION type ref to ZIF_AR_AMS_AGR_LOCATION_TYPE .
  data GT_TIER_DATA type ZTT_I01081_IDOC_ITEM .
  data GT_IDOC_ERROR type ZTT_I01081_IDOC_ERR .
  class-data GV_GUID type SYSUUID_C32 .
  data GV_TIER_CHANGE type FLAG .
  data GO_AGR_REQ type ref to ZCL_AR_AMS_AGR_N_AGR_REQ .
  data GV_USTAT type /IRM/IP_USTAT .
  class-data GV_PREV_AGR type /IRM/IP_KNUMA_AG .
  class-data GV_ERR type CHAR1 .
  data GV_MDM_AGR_DEL type BOOLE_D .
  data GV_STOP type CHAR1 .
  constants GC_BATCH type SY-UNAME value 'WF-BATCH' ##NO_TEXT.
  data GV_REPROCESS_GUID type SYSUUID_C32 .
  data:
    gt_agr_hdr TYPE TABLE OF gty_agr .
  data:
    gt_kona    TYPE TABLE OF gty_kona .
  data:
    gt_kona_dup TYPE TABLE OF gty_kona_dup .
  data:
    gt_agr_stat TYPE TABLE OF gty_agr_stat .
  data:
    GT_AGR_ITM_TMP TYPE TABLE OF zi01081_agr_itm .
  data:
    GT_AGR_HDR_TMP TYPE TABLE OF zi01081_agr_hdr .
  data GV_LIFNR type LIFNR .
  data GC_INITIAL_LOAD type RVARI_VNAM value 'Z_I01081_INIT_LOAD' ##NO_TEXT.
  data GC_SUPPL_STAT_VAL type ZD_MDM_SUPPL_STAT value '1' ##NO_TEXT.
  data GC_CONT_STAT_VAL type ZD_MDM_CONTR_STAT value 'A' ##NO_TEXT.
  data GV_INIT_LOAD_FLAG type RVARI_VAL_255 .
  data GV_SAMS type FLAG .
  data GV_WM type FLAG .
  data GV_NEG_ALLOC type FLAG .
  data GV_IDOC_EFF_DATE type SY-DATUM .
  constants GC_CONT_STAT type RVARI_VNAM value 'ZI01081_CONT_STATUS' ##NO_TEXT.
  constants GC_SUPPL_STAT_CONTRACT type RVARI_VNAM value 'ZI01081_SUPPL_STATUS_CONTRACT' ##NO_TEXT.
  constants GC_CONT_STAT_CONTRACT type RVARI_VNAM value 'ZI01081_CONT_STATUS_CONTRACT' ##NO_TEXT.
  constants GC_SUPPL_STAT type RVARI_VNAM value 'ZI01081_SUPPL_STATUS' ##NO_TEXT.
  data GV_WM_CLEAR type FLAG .
  constants GC_I1081 type ZD_INTER_ID value 'I1081' ##NO_TEXT.
  data GV_GSM_DESIGN type FLAG .
  data GV_YEARLY type FLAG .
  data GV_SAMS_FILTER type FLAG .
  data:
    gt_agr_header TYPE TABLE OF zi01081_agr_hdr .
  data:
    gt_agr_tier TYPE TABLE OF zi01081_agr_itm .
  data GV_SETTL_PARTN type LIFNR .
  data GV_PAY_METH_CH type CHAR1 .
  data GV_HEADER_CH type CHAR1 .
  data GV_CURRENT_MONTH type CHAR1 .
  data GV_MULTI_TIER type CHAR1 .
  data GV_BEGIN_DATE_ER type CHAR1 .
  data GV_LANGUAGE type SPRAS .
  data GV_ALLOW_DESC type ZD_ALLOW_DESC .
  data GV_INIT_LOAD_CHANGE type FLAG .
  data GV_FROM_DATE_NEG type DATAB .
  data GV_TO_DATE_NEG type DATBI .
  data GV_REACTIVATE type CHAR1 .
  data GV_EXTRA_AGR type INT2 .
  data GV_AUTORENEW type FLAG .
  data GT_T053S type ZTT_I01081_T053S .
  data GT_AGR_HEAD_AR type ZTT_I01081_AGR_HEAD .
  data GV_AR_RUNDATE type ZD_MDM_RUNDATE .
  data GV_REG type CHAR1 .
  data GV_ADH type CHAR1 .
  data GV_ALL type CHAR1 .
  data GV_SEL type CHAR1 .
  data GT_AREN_ERR type ZTT_AREN_ERR .

  methods ADD_IDOC_STATUS
    importing
      value(IV_DOCNUM) type EDI_DOCNUM
      value(IV_STATUS) type EDI_STATUS
      value(IV_MSGTY) type SYMSGTY optional
      value(IV_MSGID) type MSGID optional
      value(IV_MSGNO) type MSGNO optional
      !IV_MSGV1 type EDI_STAPA1 optional
      !IV_MSGV2 type EDI_STAPA2 optional
      !IV_MSGV3 type EDI_STAPA3 optional
      !IV_MSGV4 type EDI_STAPA4 optional
    changing
      value(ET_IDOC_STATUS) type T_IDOC_STATUS .
  methods LOAD_IDOC_DATA
    importing
      value(IT_IDOC_DATA) type EDIDD_TT
      value(IS_CONTROL_DATA) type EDIDC
    exporting
      value(ES_IDOC_HEADER) type ZST_I01081_IDOC_HEAD
      value(ET_IDOC_ITEM) type ZTT_I01081_IDOC_ITEM .
  methods LOAD_IDOC_CONTRACT
    importing
      value(IT_IDOC_DATA) type EDIDD_TT
      value(IS_CONTROL_DATA) type EDIDC
    exporting
      !ES_IDOC_HEADER type ZST_I01081_IDOC_HEAD
      !ET_IDOC_DATA type ZTT_I01081_IDOC_CONTRACT .
  methods PREPARE_AGR_DATA
    importing
      value(IS_CONTROL_DATA) type EDIDC
      value(IT_IDOC_ITEM) type ZTT_I01081_IDOC_ITEM
      value(IS_IDOC_HEADER) type ZST_I01081_IDOC_HEAD
    exporting
      value(ES_AGREEMENT_HEADER) type ZST_I01081_AGR_HEAD
      value(ET_AGREEMENT_ITEM) type ZTT_I01081_AGR_ITEM
    changing
      value(ET_IDOC_STATUS) type T_IDOC_STATUS .
  methods VALIDATE_IDOC_DATA_MAND_FIELDS
    importing
      value(IS_IDOC_HEADER) type ZST_I01081_IDOC_HEAD
      value(IT_IDOC_ITEM) type ZTT_I01081_IDOC_ITEM
      value(IS_CONTROL_DATA) type EDIDC
    changing
      value(ET_IDOC_STATUS) type T_IDOC_STATUS .
  methods VALIDATE_LOCATION_TYPE
    importing
      value(IV_LOCATION_TYPE) type ZD_CHLDLOCTYP
    exporting
      value(RV_VALID) type FLAG .
  methods VALIDATE_PAYMENT_METHOD
    importing
      value(IV_PAYMENT_METHOD) type DZLSCH
    exporting
      value(RV_VALID) type FLAG .
  methods VALIDATE_SETTLEMENT_CALENDER
    importing
      value(IV_SETTL_CALENDER) type /IRM/IP_SETLCAL
    exporting
      value(RV_VALID) type FLAG .
  methods VALIDATE_VENDOR
    importing
      value(IV_VENDOR) type LIFNR
    exporting
      value(RV_VALID) type FLAG .
  methods VALIDATE_SETTL_PARTN
    importing
      value(IV_SETTL_PARTN) type LIFNR
      value(IV_LAND1) type LAND1
    exporting
      value(RV_VALID) type CHAR1 .
  methods VALIDATE_ALLOWANCE_TYPE
    importing
      value(IV_AGR_TYPE) type BOART
      value(IV_ALLOW_TYPE) type ZD_ALLOWCD
      value(IV_LOCATION_TYPE) type ZD_LOC_TYPE
      value(IV_LAND1) type LAND1
    exporting
      value(RV_VALID) type CHAR1 .
  methods VALIDATE_HEADER
    importing
      !IS_HEADER type ZST_I01081_IDOC_HEAD
    changing
      !CT_IDOC_STATUS type T_IDOC_STATUS .
  methods SET_AGREEMENT_CONTRACT_MODE
    importing
      value(IT_AGREEMENT_ITEM) type ZTT_I01081_AGR_ITEM optional
    exporting
      value(ET_MODE) type ZTT_MDM_AGR_MODE
    changing
      value(CS_AGREEMENT_HEADER) type ZST_I01081_AGR_HEAD optional
      value(CT_IDOC_STATUS) type T_IDOC_STATUS optional .
  methods SET_AGREEMENT_MODE
    importing
      value(IT_AGREEMENT_ITEM) type ZTT_I01081_AGR_ITEM optional
    exporting
      value(ET_MODE) type ZTT_MDM_AGR_MODE
    changing
      value(CS_AGREEMENT_HEADER) type ZST_I01081_AGR_HEAD optional
      value(CT_IDOC_STATUS) type T_IDOC_STATUS optional .
  methods CONSTRUCTOR
    importing
      !IS_HEADER type /IRM/IPARHDR optional
      !IV_COUNTRY type LAND1 optional .
  methods UPDATE_ERROR_TABLE
    importing
      value(IT_AGR_ITM) type ZTT_I01081_AGR_ITEM
    changing
      value(CS_AGR_HEADER) type ZST_I01081_AGR_HEAD .
  methods VALIDATE_TIER_RATE
    importing
      value(IV_COUNT) type SY-TABIX optional
      value(IS_AGREEMENT_HEADER) type ZST_I01081_AGR_HEAD optional
      value(IS_TIER_DTL) type ZDS_TIER_DTL optional
      value(IS_PREV_TIER) type ZDS_TIER_DTL optional
    exporting
      value(RV_VALID) type FLAG
    changing
      value(CT_IDOC_STATUS) type T_IDOC_STATUS optional .
  methods POPULATE_AGR_HEADER
    importing
      value(IS_AGR_HEADER) type ZST_I01081_AGR_HEAD
    exporting
      value(ES_AGR_HEADER) type ZDS_AGR_GEN_INFO
      value(ET_ALLOWANC_DET) type ZTT_ALLOWANCE_DTL .
  methods GET_BANNER
    importing
      value(IS_AGREEMENT_HEADER) type ZST_I01081_AGR_HEAD
      value(IT_LOC_TYPE) type ZTT_LOC_TYPE
    exporting
      value(ET_BANNER) type ZTT_AGR_BANNER_CODE .
  methods GET_TIER
    importing
      value(IS_AGREEMENT_HEADER) type ZST_I01081_AGR_HEAD optional
      value(IT_AGREEMENT_ITEM) type ZTT_I01081_AGR_ITEM optional
    exporting
      value(ET_TIER) type ZTT_TIER_DTL
    changing
      value(CT_IDOC_STATUS) type T_IDOC_STATUS optional .
  methods ADD_ERR_MESSAGE
    importing
      value(IV_CNTRY) type LAND1 optional
      value(IV_IDOC_NUM) type EDI_DOCNUM optional
      value(IV_MTYPE) type BAPI_MTYPE optional
      value(IV_MSG_CLASS) type SYMSGID optional
      value(IV_MSG_NUM) type MSGNO optional
      value(IV_VARIANT_1) type SYMSGV optional
      value(IV_VARIANT_2) type SYMSGV optional
      value(IV_VARIANT_3) type SYMSGV optional
      value(IV_VARIANT_4) type SYMSGV optional .
  methods CREATE_GUID
    returning
      value(EV_GUID) type SYSUUID_C32 .
  methods GET_AGR_DESC
    importing
      value(IV_AGR_TYPE) type BOART
    returning
      value(EV_AGR_TYPE_DESC) type VTEXT .
  methods UPDATE_SUCCESS_AGR
    importing
      value(IS_AGREEMENT_HEADER) type ZST_I01081_AGR_HEAD .
  methods UPDATE_MDM_TABLE
    importing
      value(IS_AGR_HEADER) type ZST_I01081_AGR_HEAD
      value(IT_AGR_ITEM) type ZTT_I01081_AGR_ITEM .
  methods READ_AGREEMENT
    importing
      value(IV_GUID) type SYSUUID_C32
      value(IV_INT_ID) type ZD_INTER_ID
    exporting
      value(ES_AGREEMENT_HEADER) type ZST_I01081_AGR_HEAD
      value(ET_AGREEMENT_ITEM) type ZTT_I01081_AGR_ITEM .
  methods GET_MERCH_HIER
    importing
      value(IS_AGREEMENT_HEADER) type ZST_I01081_AGR_HEAD
    exporting
      value(ET_MERCH_HIER) type ZTT_MER_HIER .
  methods VALIDATE_LGCY_AGR_DEPT_NUMB
    importing
      value(IV_DEPT_NUMBER) type ZD_MERCH_HIER
    exporting
      value(RV_VALID) type FLAG .
  methods GET_REGION
    importing
      value(IS_AGREEMENT_HEADER) type ZST_I01081_AGR_HEAD
    exporting
      value(ET_REGION) type ZTT_AGR_REGION .
  methods POPULATE_ATTACHMENT_RECORDS
    importing
      value(IV_INTERFACE_ID) type ZD_INTER_ID
      value(IV_COUNTRY) type LAND1
      value(IV_DATE) type RANGE_T_DATS
    changing
      value(EV_ERROR_STRING) type STRING .
  methods SET_EMAIL_DETAILS
    importing
      value(IV_INTERFACE_ID) type ZD_INTER_ID optional
      value(IV_DATE) type RANGE_T_DATS optional
    exporting
      value(EV_SUBJECT) type SO_OBJ_DES
      value(EV_TITLE) type SO_OBJ_DES
      value(ET_BODY) type SOLI_TAB
    changing
      value(EV_ATTACHMENT_HEADER) type STRING .
  methods GET_EMAIL
    importing
      value(IV_OBJ_NAME) type ZD_INTER_ID
      value(IV_FIELDNAME) type NAME_FELD
      value(IV_LAND1) type LAND1
    exporting
      value(ET_MAIL) type ZTT_I01081_IDOC_EMAIL .
  methods SEND_EMAIL
    importing
      value(IV_ATTACHMENT) type STRING
      value(IT_RECIPIENT) type ZTT_I01081_IDOC_EMAIL
      value(IT_BODY) type SOLI_TAB
      value(IV_SUBJECT) type SO_OBJ_DES
      value(IV_TITLE) type SO_OBJ_DES
    exporting
      value(EV_EMAIL_FLAG) type ABAP_BOOL .
  methods SAVE_COMMENTS
    importing
      value(IV_OBJTYP) type OJ_NAME
      value(IV_OBJID) type OBJNUM
      value(IV_COMMENT_TYPE) type /IRM/GNOTYP
      value(IT_COMMENT) type STRING_TABLE .
  methods GET_VENDOR
    importing
      value(IV_MDM_VENDOR) type LIFNR optional
    exporting
      value(EV_SAP_VENDOR) type LIFNR .
  methods GET_SETTLEMENT_PARTNER
    importing
      value(IV_MDM_VENDOR) type ALTKN optional
    exporting
      value(EV_SETTL_PARTN) type LNRZE
      value(EV_VALID) type FLAG .
  methods CALC_END_DATE
    exporting
      value(EV_END_DATE) type SY-DATUM
    changing
      value(IV_MONTH) type CHAR2
      value(IV_DATE) type CHAR2
      value(IV_YEAR) type CHAR4 .
  methods VALIDATE_ALLOWED_DATE
    importing
      value(ES_AGREEMENT_HEADER) type ZST_I01081_AGR_HEAD
    exporting
      value(RV_VALID) type FLAG .
  methods GET_AGREEMENTS_FOR_AUTORENEW
    importing
      value(IV_DAYS) type SY-DATUM optional
      value(IT_BOART) type GTT_BOART optional
      value(IT_KNUMA_AG) type GTT_KNUMA_AG optional
    exporting
      value(ET_AGR_HEAD) type ZTT_I01081_AGR_HEAD
      value(ET_AGR_ITEM) type ZTT_I01081_AGR_ITEM .
  methods DISPLAY_ALV
    importing
      value(IT_STATUS) type GTT_STATUS optional .
  methods CHECK_NEGATIVE_ALLOC
    importing
      value(IS_AGREEMENT_HEADER) type ZST_I01081_AGR_HEAD optional
    exporting
      value(EV_NEG_ALLOC) type FLAG .
  methods VALIDATE_SUPPL_STAT
    importing
      value(IS_AGREEMENT_HEADER) type ZST_I01081_AGR_HEAD optional
    exporting
      value(RV_VALID) type FLAG .
  class-methods CHECK_SAMS_FILTER
    returning
      value(EV_FILTER_SET) type FLAG .
  methods CONVERT_DATA_REPROCESS
    changing
      value(CS_AGREEMENT_HEADER) type ZST_I01081_AGR_HEAD optional
      value(CT_IDOC_STATUS) type T_IDOC_STATUS optional .
  methods CHECK_AGR_CHANGED
    importing
      value(IS_KONA) type GTT_KONA optional
      value(IS_AGREEMENT_HEADER) type ZST_I01081_AGR_HEAD optional
      value(IT_AGREEMENT_ITEM) type ZTT_I01081_AGR_ITEM optional
    exporting
      value(EV_CHANGED) type FLAG .
  methods SET_MODE_PAYMENT_TERM
    importing
      value(IV_TYPE) type CHAR1 optional
      value(IS_KONA) type GTY_KONA optional
    changing
      value(CV_FUTURE_MONTH) type CHAR1 optional
      value(CV_FUTURE_YEAR) type CHAR1 optional
      value(CV_ZLSCH_UPDATE) type CHAR1 optional
      value(CS_MODE) type ZST_MDM_AGR_MODE optional
      value(CS_AGREEMENT_HEADER) type ZST_I01081_AGR_HEAD optional .
  methods GET_LANGUAGE_FROM_COUNTRY
    importing
      value(IV_LAND1) type LAND1 .
  methods SET_START_DATE
    changing
      value(CS_AGREEMENT_HEADER) type ZST_I01081_AGR_HEAD optional .
  methods CHECK_FROM_DATE_YEARLY
    exporting
      value(EV_VALID) type FLAG
    changing
      value(CS_AGREEMENT_HEADER) type ZST_I01081_AGR_HEAD optional
      value(ET_IDOC_STATUS) type T_IDOC_STATUS optional .
  methods CHECK_REACTIVATE_CONTRACT
    importing
      value(IS_AGREEMENT_HEADER) type ZST_I01081_AGR_HEAD optional .
  methods CHECK_REACTIVATE
    importing
      value(IS_AGREEMENT_HEADER) type ZST_I01081_AGR_HEAD optional .
  methods GET_ALLOWANCE_DESCRIPTION
    importing
      value(IT_AGREEMENT_HEADER) type ZTT_I01081_AGR_HEAD .
  methods UPDATE_ERROR_TABLE_AR .
  methods SET_EMAIL_DETAILS_AR
    importing
      value(IV_DATE) type SY-DATUM optional
    exporting
      value(EV_SUBJECT) type SO_OBJ_DES
      value(EV_TITLE) type SO_OBJ_DES
      value(ET_BODY) type SOLI_TAB
    changing
      value(EV_ATTACHMENT_HEADER) type STRING .
  methods POPULATE_ATTACHMENT_RECORDS_AR
    importing
      value(IV_DATE) type SY-DATUM optional
      value(IT_STATUS) type GTT_STATUS optional
    changing
      value(EV_ERROR_STRING) type STRING optional .
  methods FIND_DELETED_MDM_AGR
    importing
      !IS_IDOC_AGR_HEAD type ZST_I01081_AGR_HEAD
    exporting
      !ET_AGREEMENT_ITEM type ZTT_I01081_AGR_ITEM
      !ET_AGREEMENT_HEADER type ZTT_I01081_AGR_HEAD
    changing
      !CT_IDOC_STATUS type T_IDOC_STATUS .
  methods FIND_DELETED_MDM_AGR_CONTRACTS
    importing
      !IS_IDOC_AGR_HEAD type ZST_I01081_AGR_HEAD
      !IT_IDOC_AGR_HEAD type ZTT_I01081_IDOC_CONTRACT
    exporting
      !ET_AGREEMENT_ITEM type ZTT_I01081_AGR_ITEM
      !ET_AGREEMENT_HEADER type ZTT_I01081_AGR_HEAD
    changing
      !CT_IDOC_STATUS type T_IDOC_STATUS .
  methods SET_AGREEMENT_STOP_MODE
    importing
      value(IS_AGREEMENT_HEADER) type ZST_I01081_AGR_HEAD
    exporting
      value(ET_MODE) type ZTT_MDM_AGR_MODE .
  methods SET_GUID
    importing
      !IV_GUID type SYSUUID_C32 .
  methods SET_LAND1
    importing
      !IV_LAND1 type LAND1 .
  class-methods GET_ACTIVE_ALLOW_AGREEMENTS
    exporting
      !ET_AGR_HEAD type ZTT_I01081_AGR_HEAD .
  methods GET_DELETED_AGR_DETAILS
    importing
      !IS_AGR_HEAD type ZST_I01081_AGR_HEAD
    exporting
      !ET_AGREEMENT_ITEM type ZTT_I01081_AGR_ITEM
      !ES_AGREEMENT_HEADER type ZST_I01081_AGR_HEAD
    changing
      !CT_IDOC_STATUS type T_IDOC_STATUS .
protected section.
private section.

  class-data:
    GT_AGR_STAT_DEL TYPE TABLE OF gty_agr_stat .
  class-data:
    GT_KONA_DEL TYPE TABLE OF gty_kona .
ENDCLASS.



CLASS ZCL_AMS_I01081_UTILTY IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->ADD_ERR_MESSAGE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_CNTRY                       TYPE        LAND1(optional)
* | [--->] IV_IDOC_NUM                    TYPE        EDI_DOCNUM(optional)
* | [--->] IV_MTYPE                       TYPE        BAPI_MTYPE(optional)
* | [--->] IV_MSG_CLASS                   TYPE        SYMSGID(optional)
* | [--->] IV_MSG_NUM                     TYPE        MSGNO(optional)
* | [--->] IV_VARIANT_1                   TYPE        SYMSGV(optional)
* | [--->] IV_VARIANT_2                   TYPE        SYMSGV(optional)
* | [--->] IV_VARIANT_3                   TYPE        SYMSGV(optional)
* | [--->] IV_VARIANT_4                   TYPE        SYMSGV(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_err_message.

*Save error records in a global table. Finally save in IDoc error table
    DATA: ls_err_message TYPE zst_i01081_idoc_err.

    ls_err_message-cntry = iv_cntry.
    ls_err_message-key_val = gv_guid.
    ls_err_message-idoc_num = iv_idoc_num.
    ls_err_message-idocdate = sy-datum.
    ls_err_message-msg_class = iv_msg_class.
    ls_err_message-msg_num = iv_msg_num.
    ls_err_message-variant_1 = iv_variant_1.
    ls_err_message-variant_2 = iv_variant_2.
    ls_err_message-variant_3 = iv_variant_3.
    ls_err_message-variant_4 = iv_variant_4.
    APPEND ls_err_message TO gt_idoc_error.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->ADD_IDOC_STATUS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_DOCNUM                      TYPE        EDI_DOCNUM
* | [--->] IV_STATUS                      TYPE        EDI_STATUS
* | [--->] IV_MSGTY                       TYPE        SYMSGTY(optional)
* | [--->] IV_MSGID                       TYPE        MSGID(optional)
* | [--->] IV_MSGNO                       TYPE        MSGNO(optional)
* | [--->] IV_MSGV1                       TYPE        EDI_STAPA1(optional)
* | [--->] IV_MSGV2                       TYPE        EDI_STAPA2(optional)
* | [--->] IV_MSGV3                       TYPE        EDI_STAPA3(optional)
* | [--->] IV_MSGV4                       TYPE        EDI_STAPA4(optional)
* | [<-->] ET_IDOC_STATUS                 TYPE        T_IDOC_STATUS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_idoc_status.
    DATA: ls_idoc_status TYPE bdidocstat.

    ls_idoc_status-docnum = iv_docnum.
    ls_idoc_status-status = iv_status.
    ls_idoc_status-repid = sy-repid.
    ls_idoc_status-msgty = iv_msgty.
    ls_idoc_status-msgid = iv_msgid.
    ls_idoc_status-msgno = iv_msgno.
    ls_idoc_status-msgv1 = iv_msgv1.
    ls_idoc_status-msgv2 = iv_msgv2.
    ls_idoc_status-msgv3 = iv_msgv3.
    ls_idoc_status-msgv4 = iv_msgv4.
    APPEND ls_idoc_status TO et_idoc_status.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->CALC_END_DATE
* +-------------------------------------------------------------------------------------------------+
* | [<---] EV_END_DATE                    TYPE        SY-DATUM
* | [<-->] IV_MONTH                       TYPE        CHAR2
* | [<-->] IV_DATE                        TYPE        CHAR2
* | [<-->] IV_YEAR                        TYPE        CHAR4
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD calc_end_date.

    DATA: lv_leap_date TYPE sy-datum.

    IF  ( iv_month GE 3 ).
*calculate if next year is leap year by checking the last date of the feb.
      iv_year = iv_year + 1.
    ENDIF.

    iv_month = '02'.
    iv_date = '01'.
    CONCATENATE iv_year iv_month iv_date INTO lv_leap_date.

      CALL FUNCTION 'LAST_DAY_OF_MONTHS'
        EXPORTING
          day_in            = lv_leap_date
        IMPORTING
          last_day_of_month = lv_leap_date
        EXCEPTIONS
          day_in_no_date    = 1
          OTHERS            = 2.

      IF sy-subrc <> 0.

      ENDIF.

      IF lv_leap_date+6(2) EQ 28.
        ev_end_date = gs_agr_head_data-agr_frm_date + 364.
      ELSEIF  lv_leap_date+6(2) NE 28.
        ev_end_date = gs_agr_head_data-agr_frm_date + 365.
      ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->CHECK_AGR_CHANGED
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_KONA                        TYPE        GTT_KONA(optional)
* | [--->] IS_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD(optional)
* | [--->] IT_AGREEMENT_ITEM              TYPE        ZTT_I01081_AGR_ITEM(optional)
* | [<---] EV_CHANGED                     TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD check_agr_changed.

    DATA: lt_itm TYPE TABLE OF zi01081_agr_itm.
    DATA: lv_altkn         TYPE altkn,
          lv_altkn_db(6)   TYPE c,
          lv_altkn_idoc(6) TYPE c.

*No matter what the effective date is, if there is no change in the agreement, then the IDoc will not process
*Check if the effective date from current month
*    IF ( is_agreement_header-agr_frm_date+0(4) EQ sy-datum+0(4) AND "Year
*         is_agreement_header-agr_frm_date+4(2) EQ sy-datum+4(2) ).  "Month
*      gv_current_month = abap_true.
*    ELSE.
*      gv_current_month = abap_false.
*    ENDIF.


    lt_itm = gt_agr_tier.
    DATA(lt_agreement_item) = it_agreement_item.
    DELETE lt_agreement_item WHERE min_purch_amt EQ '0.00' AND
                                   max_purch_amt EQ '0.00' AND
                                   rebate_rate   EQ '0.0'.

    READ TABLE gt_agr_header INTO DATA(ls_agr_header)
                        WITH KEY contract_id = is_agreement_header-contract_id
                                 allow_type_code = is_agreement_header-allow_type_code
                                 vend_number = is_agreement_header-vend_number.
    IF sy-subrc IS INITIAL.
      DELETE: lt_itm WHERE key_val NE ls_agr_header-key_val OR
                           ( min_purch_amt EQ '0.00' AND
                             max_purch_amt EQ '0.00' AND
                             rebate_rate   EQ '0.0' ).
      IF lt_itm IS NOT INITIAL.
*Check if there is a change in the how paid indicator. If there is a Update & change scenario,
*then change scenario should be considered.
        IF ls_agr_header-payment_method NE is_agreement_header-payment_method.
          ev_changed = abap_true.
          gv_pay_meth_ch = abap_true.
        ELSE.
          gv_pay_meth_ch = abap_false.
        ENDIF.

*No matter what the effective date is, if there is no change in the agreement, then the IDoc will not process
*        IF ls_agr_header-idoc_eff_date  NE is_agreement_header-idoc_eff_date.
*          DATA(lv_eff_date_ch) = abap_true.
*          ev_changed = abap_true.
*        ENDIF.

        "Start of chnages for 2000045857, AMS China: MDM Error handling
        IF ls_agr_header-settl_partn NE is_agreement_header-settl_partn. "condition added for 2000047787, AMS China: New MDM Error handling
          lv_altkn_db = ls_agr_header-settl_partn.
          SHIFT lv_altkn_db RIGHT DELETING TRAILING space.
          TRANSLATE lv_altkn_db USING ' 00000'.

          lv_altkn_idoc = is_agreement_header-settl_partn.
          SHIFT lv_altkn_idoc RIGHT DELETING TRAILING space.
          TRANSLATE lv_altkn_idoc USING ' 00000'.

          IF lv_altkn_db NE lv_altkn_idoc.
            ev_changed = abap_true.
            gv_header_ch = abap_true.
          ENDIF.
        ENDIF.
        "End of chnages for 2000045857, AMS China: MDM Error handling

*Check all the header fields.
        IF ls_agr_header-suppl_stat NE is_agreement_header-suppl_stat OR
           ls_agr_header-contract_stat NE is_agreement_header-contract_stat OR
           ls_agr_header-allow_type_desc NE is_agreement_header-allow_type_desc OR
           ls_agr_header-vend_number NE is_agreement_header-vend_number OR
*           ls_agr_header-settl_partn NE is_agreement_header-settl_partn OR   "Commented for 2000047787, AMS China: New MDM Error handling
           ls_agr_header-allow_type_code NE is_agreement_header-allow_type_code  OR
           ls_agr_header-merch_hier NE is_agreement_header-merch_hier.
*           ls_agr_header-idoc_eff_date  NE is_agreement_header-idoc_eff_date.
          ev_changed = abap_true.
          gv_header_ch = abap_true.
*          RETURN.
        ELSE.
*Check if there is any tier changed.
          SORT: lt_itm BY item_no,
                lt_agreement_item BY item_no.

          LOOP AT lt_itm INTO DATA(ls_itm).
            READ TABLE lt_agreement_item INTO DATA(ls_agr_itm) WITH KEY item_no = ls_itm-item_no.
            IF ls_itm-min_purch_amt NE ls_agr_itm-min_purch_amt OR
               ls_itm-max_purch_amt NE ls_agr_itm-max_purch_amt OR
               ls_itm-rebate_rate NE ls_agr_itm-rebate_rate.
              ev_changed = abap_true.
              gv_header_ch = abap_true.
*              RETURN.
            ENDIF.
            CLEAR ls_itm.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDIF.

*No matter what the effective date is, if there is no change in the agreement, then the IDoc will not process
*If the effective date is changed and the change is in the month of the original effectiv date, and no changes are made,then do not process
*    IF lv_eff_date_ch IS NOT INITIAL
*       AND is_agreement_header-agr_frm_date+4(2) EQ ls_agr_header-idoc_eff_date+4(2) "Month
*       AND is_agreement_header-agr_frm_date+0(4) EQ ls_agr_header-idoc_eff_date+0(4) "Year
*       AND gv_header_ch IS INITIAL.
*      CLEAR ev_changed.
*    ENDIF.

    CLEAR: lt_itm,lt_agreement_item.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->CHECK_FROM_DATE_YEARLY
* +-------------------------------------------------------------------------------------------------+
* | [<---] EV_VALID                       TYPE        FLAG
* | [<-->] CS_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD(optional)
* | [<-->] ET_IDOC_STATUS                 TYPE        T_IDOC_STATUS(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD check_from_date_yearly.
    DATA: lv_year  TYPE char4,
          lv_month TYPE char2,
          lv_date  TYPE char2.

    IF cs_agreement_header-agr_frm_date+4(2) EQ '01'
      AND cs_agreement_header-agr_frm_date+6(2) EQ '01'
      AND cs_agreement_header-agr_frm_date+0(4) EQ sy-datum+0(4).

      ev_valid = abap_true.
      lv_year = cs_agreement_header-agr_frm_date+0(4).
      lv_month = cs_agreement_header-agr_frm_date+4(2).
      lv_date = cs_agreement_header-agr_frm_date+6(2).

      CALL METHOD me->calc_end_date
        IMPORTING
          ev_end_date = cs_agreement_header-agr_to_date
        CHANGING
          iv_month    = lv_month
          iv_date     = lv_date
          iv_year     = lv_year.
      cs_agreement_header-allow_frm_date = cs_agreement_header-agr_frm_date.
      cs_agreement_header-allow_to_date = cs_agreement_header-agr_to_date.
    ELSE.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = gs_idoc_control-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '480' "Yearly agreement should always start from 01/01/current year
        CHANGING
          et_idoc_status = et_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = cs_agreement_header-cntry
          iv_idoc_num  = gs_idoc_control-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '480'. "Yearly agreement should always start from 01/01/current year
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->CHECK_NEGATIVE_ALLOC
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD(optional)
* | [<---] EV_NEG_ALLOC                   TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD check_negative_alloc.

    DATA: lv_lifnr TYPE lifnr.
    IF is_agreement_header-vend_number IS NOT INITIAL.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = is_agreement_header-vend_number
        IMPORTING
          output = lv_lifnr.

      SELECT lifnr FROM zi01081_neg_allo
        INTO @data(lv_vendor) WHERE int_id = @is_agreement_header-int_id AND
                                    agr_type = @is_agreement_header-agr_type AND
                                    lifnr = @lv_lifnr and
                                    ALLOW_TYPE_CODE = @is_agreement_header-allow_type_code.
      ENDSELECT.

      IF sy-subrc IS INITIAL.
        ev_neg_alloc = abap_true.
      ENDIF.

    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->CHECK_REACTIVATE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD check_reactivate.

    DATA: lv_month(3)    TYPE c.

    SORT gt_agr_header DESCENDING.
    READ TABLE gt_agr_header INTO DATA(ls_agr_header) INDEX 1.

    DATA(lt_kona) = gt_kona.
    SORT lt_kona BY datab DESCENDING.
    READ TABLE lt_kona INTO DATA(ls_kona) INDEX 1.


*If the recent IDoc for the contract is Inactive & the IDOc that comes in is active,
*then it is a reactivate scenario.

*We also need to set the number of extra agreements created.
*EX: If Monthly agreements are created for 04/2018 & 05/2018. The 05/2018 has been made Stopped(Change Approved) previously.
*Now an IDoc comes in month of 08/2018 to reactivate the agreement. In this case. 04/2018 & 05/2018 needs to be cancelled
*and new agreement shoule be created from 04/2018 till 08/2018. Hence we need 3 Extra agreements.

*Since the change loop is designed in such a way that for one cancelled agreement, we create on agreement, we need another Do
*to handle the extra agreement creation.
    IF ls_agr_header-contract_stat NE '1' OR
       ls_agr_header-suppl_stat NE '100001'.
      IF is_agreement_header-contract_stat EQ '1' OR
         is_agreement_header-suppl_stat EQ '100001'.
        gv_reactivate = abap_true.

        CALL FUNCTION 'MONTHS_BETWEEN_TWO_DATES'
          EXPORTING
            i_datum_bis = sy-datum
            i_datum_von = ls_kona-datab
          IMPORTING
            e_monate    = lv_month.
      ENDIF.
    ENDIF.

    CONDENSE lv_month.
    gv_extra_agr = lv_month. "X no of agreements has to be created apart from cancelling & creating the agreements from GT_KONA.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->CHECK_REACTIVATE_CONTRACT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD CHECK_REACTIVATE_CONTRACT.

    DATA: lv_month(3)    TYPE c.

    SORT gt_agr_header DESCENDING.
    READ TABLE gt_agr_header INTO DATA(ls_agr_header) INDEX 1.

    DATA(lt_kona) = gt_kona.
    SORT lt_kona BY datab DESCENDING.
    READ TABLE lt_kona INTO DATA(ls_kona) INDEX 1.


*If the recent IDoc for the contract is Inactive & the IDOc that comes in is active,
*then it is a reactivate scenario.

*We also need to set the number of extra agreements created.
*EX: If Monthly agreements are created for 04/2018 & 05/2018. The 05/2018 has been made Stopped(Change Approved) previously.
*Now an IDoc comes in month of 08/2018 to reactivate the agreement. In this case. 04/2018 & 05/2018 needs to be cancelled
*and new agreement shoule be created from 04/2018 till 08/2018. Hence we need 3 Extra agreements.

*Since the change loop is designed in such a way that for one cancelled agreement, we create on agreement, we need another Do
*to handle the extra agreement creation.
    IF ls_agr_header-contract_stat NE gc_cont_stat_val OR
       ls_agr_header-suppl_stat NE gc_suppl_stat_val.
      IF is_agreement_header-contract_stat EQ gc_cont_stat_val OR
         is_agreement_header-suppl_stat EQ gc_suppl_stat_val.
        gv_reactivate = abap_true.

        CALL FUNCTION 'MONTHS_BETWEEN_TWO_DATES'
          EXPORTING
            i_datum_bis = sy-datum
            i_datum_von = ls_kona-datab
          IMPORTING
            e_monate    = lv_month.
      ENDIF.
    ENDIF.

    CONDENSE lv_month.
    gv_extra_agr = lv_month. "X no of agreements has to be created apart from cancelling & creating the agreements from GT_KONA.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_AMS_I01081_UTILTY=>CHECK_SAMS_FILTER
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EV_FILTER_SET                  TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD check_sams_filter.

    CONSTANTS: lc_sams_filter TYPE rvari_vnam VALUE 'ZI01081_SAMS_FILTER'.


    SELECT SINGLE name, low FROM tvarvc INTO @DATA(ls_tvarvc) WHERE
      name EQ @lc_sams_filter.

    IF sy-subrc IS INITIAL.
      IF ls_tvarvc-low EQ abap_true.
        ev_filter_set = abap_true.       "Skip SAMS defective allownce
      ENDIF.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_HEADER                      TYPE        /IRM/IPARHDR(optional)
* | [--->] IV_COUNTRY                     TYPE        LAND1(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    DATA: ls_regional_group_details TYPE zart_agr_groupid,
          lv_name1                  TYPE /irm/gdescr_40,
          it_agrreq_approvers       TYPE zartt_agreq_aprv.

*Create the super class object
    CALL METHOD super->constructor
      EXPORTING
        iv_country                = iv_country
        is_header                 = is_header
        is_regional_group_details = ls_regional_group_details
        iv_name1                  = lv_name1
        it_agrreq_approvers       = it_agrreq_approvers.

*Create guid
    CALL METHOD me->create_guid
      RECEIVING
        ev_guid = gv_guid.

    CREATE OBJECT go_agr_req.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->CONVERT_DATA_REPROCESS
* +-------------------------------------------------------------------------------------------------+
* | [<-->] CS_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD(optional)
* | [<-->] CT_IDOC_STATUS                 TYPE        T_IDOC_STATUS(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD convert_data_reprocess.
    CONSTANTS:  lc_29(2) TYPE c VALUE '29',
                lc_16(2) TYPE c VALUE '16',
                lc_30(2) TYPE c VALUE '30'.

    DATA:  lv_year  TYPE char4,
           lv_month TYPE char2,
           lv_date  TYPE char2.


*Check if the initial load flag is set.
    SELECT name, low INTO TABLE @DATA(lt_tvarvc_init)
       FROM tvarvc WHERE name EQ @gc_initial_load.


    READ TABLE lt_tvarvc_init INTO DATA(ls_tvarvc_init) WITH KEY  name = gc_initial_load.
*If the Initial Load flag is set
    IF ls_tvarvc_init-low IS NOT INITIAL.
      gv_init_load_flag = abap_true.
*SAMS monthly agreement the effective date is 1-April-2018.
      IF cs_agreement_header-merch_hier BETWEEN 62 AND 64 AND ( cs_agreement_header-allow_type_code EQ lc_29  OR
                                                             cs_agreement_header-allow_type_code EQ lc_16 ).

        IF cs_agreement_header-allow_type_code EQ lc_16.
          cs_agreement_header-agr_frm_date = '20180501'.  "SAMS Defective will begin from May.
        ELSE.
          cs_agreement_header-agr_frm_date = '20180401'.  "SAMS Monthly will have one for April & 1 for May.
        ENDIF.
        gv_sams = abap_true.

*WM Monthy agreement, the effective date is beginning of current month.
      ELSEIF cs_agreement_header-merch_hier NOT BETWEEN 62 AND 64 AND ( cs_agreement_header-allow_type_code EQ lc_29  OR
                                                                     cs_agreement_header-allow_type_code EQ lc_16 ).
        IF cs_agreement_header-allow_type_code EQ lc_16.
          cs_agreement_header-agr_frm_date = '20180501'.  "WM Defective will begin from May.
        ELSE.
          cs_agreement_header-agr_frm_date = sy-datum.
          cs_agreement_header-agr_frm_date+6(2) = '01'.           "date.
        ENDIF.
        gv_wm = abap_true.

*Yearly agreement, the effective date is beginning of current year + 365/366 days
      ELSEIF cs_agreement_header-allow_type_code EQ '30'.
        gv_yearly = abap_true.

        cs_agreement_header-agr_frm_date  = sy-datum.
        cs_agreement_header-agr_frm_date+4(2) = '01'.
        cs_agreement_header-agr_frm_date+6(2) = '01'.
      ENDIF.
      cs_agreement_header-allow_frm_date = cs_agreement_header-agr_frm_date.
    ELSE.
      CLEAR gv_init_load_flag.
    ENDIF.


*Calculate the end date.

    CALL FUNCTION 'DATE_CHECK_PLAUSIBILITY'
      EXPORTING
        date                      = cs_agreement_header-allow_frm_date
      EXCEPTIONS
        plausibility_check_failed = 1
        OTHERS                    = 2.
    IF sy-subrc <> 0.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = cs_agreement_header-idoc_num
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '437' "Agreement valid from date is invalid
        CHANGING
          et_idoc_status = ct_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = space
          iv_idoc_num  = cs_agreement_header-idoc_num
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '437'. "Agreement valid from date is invalid
    ELSE.

*Valid from will always be from beginning of the current month
      gv_idoc_eff_date = cs_agreement_header-agr_frm_date.
*      cs_agr_head_data-agr_frm_date+6(2) = '01'.
*      cs_agr_head_data-allow_frm_date = cs_agreement_header-agr_frm_date.

*Determine Agreement valid to date
      IF cs_agreement_header-allow_type_code EQ lc_29 OR   "Monthly Agreement
         cs_agreement_header-allow_type_code EQ lc_16.     "Monthly Agreement - Defective allowance
        CALL FUNCTION 'LAST_DAY_OF_MONTHS'
          EXPORTING
            day_in            = cs_agreement_header-agr_frm_date
          IMPORTING
            last_day_of_month = cs_agreement_header-agr_to_date
          EXCEPTIONS
            day_in_no_date    = 1
            OTHERS            = 2.

      ELSEIF cs_agreement_header-allow_type_code EQ lc_30. "Yearly agreement

        lv_year = cs_agreement_header-agr_frm_date+0(4).
        lv_month = cs_agreement_header-agr_frm_date+4(2).
        lv_date = cs_agreement_header-agr_frm_date+6(2).
        gs_agr_head_data-agr_frm_date = cs_agreement_header-agr_frm_date.

        CALL METHOD me->calc_end_date
          IMPORTING
            ev_end_date = cs_agreement_header-agr_to_date
          CHANGING
            iv_month    = lv_month
            iv_date     = lv_date
            iv_year     = lv_year.
      ENDIF.

      cs_agreement_header-allow_to_date = cs_agreement_header-agr_to_date.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->CREATE_GUID
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EV_GUID                        TYPE        SYSUUID_C32
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_guid.
    ev_guid = cl_system_uuid=>create_uuid_c32_static( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->DISPLAY_ALV
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_STATUS                      TYPE        GTT_STATUS(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method DISPLAY_ALV.

    DATA: lt_fieldcat  TYPE slis_t_fieldcat_alv,
          ls_fieldcat  TYPE slis_fieldcat_alv.

  ls_fieldcat-fieldname  = 'ICON'.
  ls_fieldcat-seltext_m  = 'Error Type'.
  APPEND ls_fieldcat TO lt_fieldcat.


  ls_fieldcat-fieldname  = 'AGRNO'.    " Fieldname in the data table
  ls_fieldcat-seltext_m  = 'Agreement No.'.   " Column description in the output
  APPEND ls_fieldcat TO lt_fieldcat.

  ls_fieldcat-fieldname  = 'AGRTYP'.
  ls_fieldcat-seltext_m  = 'Agr.Type'.
  APPEND ls_fieldcat TO lt_fieldcat.

  ls_fieldcat-fieldname  = 'ALLOW_TYPE_CODE'.
  ls_fieldcat-seltext_m  = 'Allowance Type'.
  APPEND ls_fieldcat TO lt_fieldcat.

  ls_fieldcat-fieldname  = 'LOCATION_TYPE'.
  ls_fieldcat-seltext_m  = 'Loc. Type'.
  APPEND ls_fieldcat TO lt_fieldcat.

  ls_fieldcat-fieldname  = 'NEW_AGR'.
  ls_fieldcat-seltext_m  = 'New Agreement'.
  APPEND ls_fieldcat TO lt_fieldcat.

    ls_fieldcat-fieldname  = 'MESSAGE'.
  ls_fieldcat-seltext_m  = 'Message'.
  APPEND ls_fieldcat TO lt_fieldcat.




    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      it_fieldcat   = lt_fieldcat
    TABLES
      t_outtab      = it_status
    EXCEPTIONS
      program_error = 1
      OTHERS        = 2.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->FIND_DELETED_MDM_AGR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_IDOC_AGR_HEAD               TYPE        ZST_I01081_AGR_HEAD
* | [<---] ET_AGREEMENT_ITEM              TYPE        ZTT_I01081_AGR_ITEM
* | [<---] ET_AGREEMENT_HEADER            TYPE        ZTT_I01081_AGR_HEAD
* | [<-->] CT_IDOC_STATUS                 TYPE        T_IDOC_STATUS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD find_deleted_mdm_agr.
    DATA : lt_mdm_results      TYPE ztty_mdm_api_result,
           ls_mdm_results      TYPE zstr_mdm_api_result,
           ls_agreement_header TYPE zst_i01081_agr_head,
           "lt_agr_head_tmp   TYPE ztt_i01081_agr_head,
           lt_agr_head_tmp     TYPE TABLE OF gty_agr,
           lt_agr_head         TYPE TABLE OF gty_agr,
           ls_kona_del         TYPE gty_kona,
           ls_agreement_item   TYPE zi01081_idoc_item,
           lt_agr_itm          TYPE STANDARD TABLE OF zi01081_agr_itm,
           lv_msgv1            TYPE edi_stapa1,
           lv_msgv2            TYPE edi_stapa2,
           lv_msgv3            TYPE edi_stapa3.

    CLEAR : et_agreement_header, et_agreement_item.

    lv_msgv1 = is_idoc_agr_head-settl_partn.
    lv_msgv2 = is_idoc_agr_head-merch_hier.
    lv_msgv3 = is_idoc_agr_head-contract_id+8(1).
    CALL METHOD me->add_idoc_status
      EXPORTING
        iv_docnum      = gs_idoc_control-docnum
        iv_status      = gc_68
        iv_msgty       = 'S'
        iv_msgid       = gc_zfar
        iv_msgno       = '403'        "
        iv_msgv1       = lv_msgv1
        iv_msgv2       = lv_msgv2
        iv_msgv3       = lv_msgv3
      CHANGING
        et_idoc_status = ct_idoc_status.


*Create the object for the utility class
    DATA(lo_mdm_serv) = NEW zcl_mdm_contract_api_serv( ).
    TRY .
        CALL METHOD lo_mdm_serv->find_deleted_allowances
          EXPORTING
            is_agr_header  = is_idoc_agr_head
          IMPORTING
            et_mdm_results = lt_mdm_results.
      CATCH cx_no_data_found.

        lv_msgv1 = is_idoc_agr_head-settl_partn.
        lv_msgv2 = is_idoc_agr_head-merch_hier.
        lv_msgv3 = is_idoc_agr_head-contract_id+8(1).
        CALL METHOD me->add_idoc_status
          EXPORTING
            iv_docnum      = gs_idoc_control-docnum
            iv_status      = gc_68
            iv_msgty       = 'E'
            iv_msgid       = gc_zfar
            iv_msgno       = '400'        "
            iv_msgv1       = lv_msgv1
            iv_msgv2       = lv_msgv2
            iv_msgv3       = lv_msgv3
          CHANGING
            et_idoc_status = ct_idoc_status.
        RETURN.
    ENDTRY.


    IF lt_mdm_results IS INITIAL.
      RETURN.
    ENDIF.



*New Change
    DATA(lv_ustat_cr) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                         iv_txt04 = zcl_ar_ams_user_status=>gc_agreq_ar_apr ).

*See if the agreement is avalable for the contract
    SELECT a~key_val,
           a~allow_type_code,
           b~idoc_num,
           b~contract_id,
           b~int_id,
           b~cntry,
           b~knuma_ag,
           b~created_date,
           b~created_time,
           b~agr_status,
           b~vend_number,
           a~settl_partn,
           a~merch_hier
       FROM zi01081_agr_hdr AS a
      INNER JOIN zi01081_mdm_agr AS b
      ON a~int_id EQ b~int_id AND
         a~idoc_num = b~idoc_num  AND
         a~cntry = b~cntry AND
         a~contract_id = b~contract_id AND
         a~allow_type_code = b~allow_type_code AND
         a~vend_number = b~vend_number
      INTO TABLE @lt_agr_head_tmp
      FOR ALL ENTRIES IN @lt_mdm_results
      WHERE a~contract_id = @is_idoc_agr_head-contract_id
        AND a~int_id = @is_idoc_agr_head-int_id
        AND b~allow_type_code = @lt_mdm_results-allow_type_code
        AND b~vend_number = @is_idoc_agr_head-vend_number
        AND b~agr_status = @lv_ustat_cr.

    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    SORT lt_agr_head_tmp BY knuma_ag DESCENDING.
*Get the status of the agreement.
    SELECT knuma_ag ustat ident FROM /irm/ipprasp
      INTO TABLE gt_agr_stat_del FOR ALL ENTRIES IN lt_agr_head_tmp
      WHERE knuma_ag = lt_agr_head_tmp-knuma_ag AND
            deleted = abap_false.
    IF sy-subrc = 0.
      DATA(lv_ustat_cn) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                      iv_txt04 = zcl_ar_ams_user_status=>gc_agreq_cancelled ).

      DATA(lv_ustat_cn_pend) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                        iv_txt04 = 'CANP' ).

      DATA(lv_ustat_par_cn_pend) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                        iv_txt04 = 'PCNP' ).

*remove the cancelled & Partially cancelled agreement
      DELETE gt_agr_stat_del WHERE ustat EQ lv_ustat_cn OR
                               ustat EQ lv_ustat_cn_pend OR
                               ustat EQ lv_ustat_par_cn_pend.
      IF gt_agr_stat_del IS INITIAL.
        RETURN.
      ENDIF.

      SELECT knuma datab datbi zlsch FROM kona INTO TABLE gt_kona_del FOR ALL ENTRIES IN gt_agr_stat_del
        WHERE knuma EQ gt_agr_stat_del-knuma_ag.
      IF sy-subrc = 0.
        LOOP AT gt_agr_stat_del INTO DATA(ls_agr_stat_del).
          READ TABLE lt_agr_head_tmp INTO DATA(ls_agr_head_tmp) WITH KEY knuma_ag = ls_agr_stat_del-knuma_ag.
          IF sy-subrc = 0.
            APPEND ls_agr_head_tmp TO lt_agr_head.
          ENDIF.
        ENDLOOP.

        LOOP AT lt_agr_head INTO DATA(ls_agr_head).
          READ TABLE lt_mdm_results INTO ls_mdm_results WITH KEY contract_id = ls_agr_head-contract_id allow_type_code = ls_agr_head-allow_type_code.
          IF sy-subrc = 0.
            READ TABLE gt_kona_del INTO ls_kona_del WITH KEY knuma_ag = ls_agr_head-knuma_ag.
            IF sy-subrc = 0.
              IF ls_kona_del-datab <= ls_mdm_results-agr_to_date AND ls_kona_del-databi >= ls_mdm_results-agr_to_date.
                CLEAR ls_agreement_header.
                MOVE-CORRESPONDING ls_agr_head TO ls_agreement_header.
                ls_agreement_header-agr_frm_date = ls_kona_del-datab.
                ls_agreement_header-allow_frm_date = ls_kona_del-datab.
                ls_agreement_header-allow_to_date  = ls_mdm_results-agr_to_date.
                ls_agreement_header-agr_to_date = ls_mdm_results-agr_to_date.
                ls_agreement_header-payment_method  = ls_kona_del-zlsch.
                IF ls_agreement_header-allow_type_code = '29' OR
                   ls_agreement_header-allow_type_code = '30'.
                  ls_agreement_header-allow_type = '511'. "Volume fundamental
                ELSEIF ls_agreement_header-allow_type_code = '16'.
                  ls_agreement_header-allow_type = '527'. "Defective Allowance
                ENDIF.
                APPEND ls_agreement_header TO et_agreement_header.
              ENDIF.
            ENDIF.

*            IF ls_agr_head-agr_frm_date <= ls_mdm_results-agr_to_date AND ls_agr_head-agr_to_date > ls_mdm_results-agr_to_date.
*              ls_agr_head-agr_to_date = ls_mdm_results-agr_to_date.
*              ls_agr_head-allow_to_date = ls_mdm_results-agr_to_date.
*              APPEND ls_agr_head TO et_agreement_header.
*            ENDIF.
          ENDIF.
        ENDLOOP.

        IF et_agreement_header IS NOT INITIAL.
          SELECT * FROM zi01081_agr_itm INTO TABLE lt_agr_itm FOR ALL ENTRIES IN et_agreement_header
            WHERE key_val = et_agreement_header-key_val.
          IF sy-subrc = 0.
            LOOP AT lt_agr_itm INTO DATA(ls_agr_itm).
              CLEAR ls_agreement_item.
              MOVE-CORRESPONDING ls_agr_itm TO ls_agreement_item.
              ls_agreement_item-guid = ls_agr_itm-key_val.
              APPEND ls_agreement_item TO et_agreement_item.
            ENDLOOP.
          ENDIF.
        ELSE.
          lv_msgv1 = is_idoc_agr_head-contract_id.

          CALL METHOD me->add_idoc_status
            EXPORTING
              iv_docnum      = gs_idoc_control-docnum
              iv_status      = '53'
              iv_msgty       = 'I'
              iv_msgid       = gc_zfar
              iv_msgno       = '401'        "
              iv_msgv1       = lv_msgv1
            CHANGING
              et_idoc_status = ct_idoc_status.
        ENDIF.
      ENDIF.

    ENDIF.



  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->FIND_DELETED_MDM_AGR_CONTRACTS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_IDOC_AGR_HEAD               TYPE        ZST_I01081_AGR_HEAD
* | [--->] IT_IDOC_AGR_HEAD               TYPE        ZTT_I01081_IDOC_CONTRACT
* | [<---] ET_AGREEMENT_ITEM              TYPE        ZTT_I01081_AGR_ITEM
* | [<---] ET_AGREEMENT_HEADER            TYPE        ZTT_I01081_AGR_HEAD
* | [<-->] CT_IDOC_STATUS                 TYPE        T_IDOC_STATUS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD find_deleted_mdm_agr_contracts.
    DATA : lt_mdm_results      TYPE ztty_mdm_api_result,
           ls_mdm_results      TYPE zstr_mdm_api_result,
           ls_agreement_header TYPE zst_i01081_agr_head,
           "lt_agr_head_tmp   TYPE ztt_i01081_agr_head,
           lt_agr_head_tmp     TYPE TABLE OF gty_agr,
           lt_agr_head         TYPE TABLE OF gty_agr,
           ls_kona_del         TYPE gty_kona,
           ls_agreement_item   TYPE zi01081_idoc_item,
           lt_agr_itm          TYPE STANDARD TABLE OF zi01081_agr_itm,
           lv_msgv1            TYPE edi_stapa1,
           lv_msgv2            TYPE edi_stapa2,
           lr_allow_type       TYPE RANGE OF zallow_typ,
           ls_range_allow      LIKE LINE OF lr_allow_type,
           lv_msgv3            TYPE edi_stapa3.

    TYPES: BEGIN OF ty_s_allow_del,
             contract_id     TYPE zd_mdmcontract_number,
             allow_type_code TYPE zallow_typ,
           END OF ty_s_allow_del.

    DATA: lt_allow_del TYPE STANDARD TABLE OF ty_s_allow_del.

    CLEAR : et_agreement_header, et_agreement_item.

*    lv_msgv1 = is_idoc_agr_head-settl_partn.
*    lv_msgv2 = is_idoc_agr_head-merch_hier.
*    lv_msgv3 = is_idoc_agr_head-contract_id+8(1).
*    CALL METHOD me->add_idoc_status
*      EXPORTING
*        iv_docnum      = gs_idoc_control-docnum
*        iv_status      = gc_68
*        iv_msgty       = 'S'
*        iv_msgid       = gc_zfar
*        iv_msgno       = '403'        "
*        iv_msgv1       = lv_msgv1
*        iv_msgv2       = lv_msgv2
*        iv_msgv3       = lv_msgv3
*      CHANGING
*        et_idoc_status = ct_idoc_status.
**Create the object for the utility class
*    DATA(lo_mdm_serv) = NEW zcl_mdm_contract_api_serv( ).
*    TRY .
*        CALL METHOD lo_mdm_serv->find_deleted_allowances
*          EXPORTING
*            is_agr_header  = is_idoc_agr_head
*          IMPORTING
*            et_mdm_results = lt_mdm_results.
*      CATCH cx_no_data_found.
*
*        lv_msgv1 = is_idoc_agr_head-settl_partn.
*        lv_msgv2 = is_idoc_agr_head-merch_hier.
*        lv_msgv3 = is_idoc_agr_head-contract_id+8(1).
*        CALL METHOD me->add_idoc_status
*          EXPORTING
*            iv_docnum      = gs_idoc_control-docnum
*            iv_status      = gc_68
*            iv_msgty       = 'E'
*            iv_msgid       = gc_zfar
*            iv_msgno       = '400'        "
*            iv_msgv1       = lv_msgv1
*            iv_msgv2       = lv_msgv2
*            iv_msgv3       = lv_msgv3
*          CHANGING
*            et_idoc_status = ct_idoc_status.
*        RETURN.
*    ENDTRY.
    "Build range table for allow type exclusion
    LOOP AT it_idoc_agr_head INTO DATA(ls_idoc_agr_header).
      ls_range_allow-sign = 'E'.
      ls_range_allow-option = 'EQ'.
      ls_range_allow-low = ls_idoc_agr_header-allow_type_code.
      APPEND ls_range_allow TO lr_allow_type.
    ENDLOOP.
    IF lr_allow_type IS NOT INITIAL.
      SELECT contract_id allow_type_code
        INTO TABLE lt_allow_del
        FROM zi01081_mdm_agr
        WHERE contract_id = is_idoc_agr_head-contract_id
          AND int_id = is_idoc_agr_head-int_id
          AND allow_type_code IN lr_allow_type
          AND vend_number = is_idoc_agr_head-vend_number.
    ELSE.
      SELECT contract_id allow_type_code
        INTO TABLE lt_allow_del
        FROM zi01081_mdm_agr
        WHERE contract_id = is_idoc_agr_head-contract_id
        AND int_id = is_idoc_agr_head-int_id
        AND vend_number = is_idoc_agr_head-vend_number.
    ENDIF.
    IF sy-subrc IS INITIAL.
      SORT lt_allow_del.
      DELETE ADJACENT DUPLICATES FROM lt_allow_del COMPARING ALL FIELDS.
      LOOP AT lt_allow_del INTO DATA(ls_allow_del).
        ls_mdm_results-contract_id = ls_allow_del-contract_id.
        ls_mdm_results-allow_type_code = ls_allow_del-allow_type_code.
        ls_mdm_results-agr_to_date = sy-datum.
        APPEND ls_mdm_results TO lt_mdm_results.
        CLEAR ls_mdm_results.
      ENDLOOP.
    ELSE.
      lv_msgv3 = is_idoc_agr_head-contract_id.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = gs_idoc_control-docnum
          iv_status      = '53'
          iv_msgty       = 'I'
          iv_msgid       = gc_zfar
          iv_msgno       = '401'        "
          iv_msgv1       = lv_msgv3
        CHANGING
          et_idoc_status = ct_idoc_status.
      RETURN.
    ENDIF.

    IF lt_mdm_results IS INITIAL.
      RETURN.
    ENDIF.

*New Change
    DATA(lv_ustat_cr) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                         iv_txt04 = zcl_ar_ams_user_status=>gc_agreq_ar_apr ).
*See if the agreement is avalable for the contract
    SELECT a~key_val,
           a~allow_type_code,
           b~idoc_num,
           b~contract_id,
           b~int_id,
           b~cntry,
           b~knuma_ag,
           b~created_date,
           b~created_time,
           b~agr_status,
           b~vend_number,
           a~settl_partn,
           a~merch_hier
       FROM zi01081_agr_hdr AS a
      INNER JOIN zi01081_mdm_agr AS b
      ON a~int_id EQ b~int_id AND
         a~idoc_num = b~idoc_num  AND
         a~cntry = b~cntry AND
         a~contract_id = b~contract_id AND
         a~allow_type_code = b~allow_type_code AND
         a~vend_number = b~vend_number
      INTO TABLE @lt_agr_head_tmp
      FOR ALL ENTRIES IN @lt_mdm_results
      WHERE a~contract_id = @is_idoc_agr_head-contract_id
        AND a~int_id = @is_idoc_agr_head-int_id
        AND b~allow_type_code = @lt_mdm_results-allow_type_code
        AND b~vend_number = @is_idoc_agr_head-vend_number
        AND b~agr_status = @lv_ustat_cr.

    IF sy-subrc <> 0.
      lv_msgv3 = is_idoc_agr_head-contract_id.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = gs_idoc_control-docnum
          iv_status      = '53'
          iv_msgty       = 'I'
          iv_msgid       = gc_zfar
          iv_msgno       = '401'        "
          iv_msgv1       = lv_msgv3
        CHANGING
          et_idoc_status = ct_idoc_status.
      RETURN.
    ENDIF.

    SORT lt_agr_head_tmp BY knuma_ag DESCENDING.
*Get the status of the agreement.
    SELECT knuma_ag ustat ident FROM /irm/ipprasp
      INTO TABLE gt_agr_stat_del FOR ALL ENTRIES IN lt_agr_head_tmp
      WHERE knuma_ag = lt_agr_head_tmp-knuma_ag AND
            deleted = abap_false.
    IF sy-subrc = 0.
      DATA(lv_ustat_cn) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                      iv_txt04 = zcl_ar_ams_user_status=>gc_agreq_cancelled ).

      DATA(lv_ustat_cn_pend) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                        iv_txt04 = 'CANP' ).

      DATA(lv_ustat_par_cn_pend) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                        iv_txt04 = 'PCNP' ).

*remove the cancelled & Partially cancelled agreement
      DELETE gt_agr_stat_del WHERE ustat EQ lv_ustat_cn OR
                               ustat EQ lv_ustat_cn_pend OR
                               ustat EQ lv_ustat_par_cn_pend.
      IF gt_agr_stat_del IS INITIAL.
        RETURN.
      ENDIF.

      SELECT knuma datab datbi zlsch FROM kona INTO TABLE gt_kona_del FOR ALL ENTRIES IN gt_agr_stat_del
        WHERE knuma EQ gt_agr_stat_del-knuma_ag.
      IF sy-subrc = 0.
        LOOP AT gt_agr_stat_del INTO DATA(ls_agr_stat_del).
          READ TABLE lt_agr_head_tmp INTO DATA(ls_agr_head_tmp) WITH KEY knuma_ag = ls_agr_stat_del-knuma_ag.
          IF sy-subrc = 0.
            APPEND ls_agr_head_tmp TO lt_agr_head.
          ENDIF.
        ENDLOOP.

        LOOP AT lt_agr_head INTO DATA(ls_agr_head).
          READ TABLE lt_mdm_results INTO ls_mdm_results WITH KEY contract_id = ls_agr_head-contract_id allow_type_code = ls_agr_head-allow_type_code.
          IF sy-subrc = 0.
            READ TABLE gt_kona_del INTO ls_kona_del WITH KEY knuma_ag = ls_agr_head-knuma_ag.
            IF sy-subrc = 0.
              IF ls_kona_del-datab <= ls_mdm_results-agr_to_date AND ls_kona_del-databi >= ls_mdm_results-agr_to_date.
                CLEAR ls_agreement_header.
                MOVE-CORRESPONDING ls_agr_head TO ls_agreement_header.
                ls_agreement_header-agr_frm_date = ls_kona_del-datab.
                ls_agreement_header-allow_frm_date = ls_kona_del-datab.
                ls_agreement_header-allow_to_date  = ls_mdm_results-agr_to_date.
                ls_agreement_header-agr_to_date = ls_mdm_results-agr_to_date.
                ls_agreement_header-payment_method  = ls_kona_del-zlsch.
                IF ls_agreement_header-allow_type_code = '29' OR
                   ls_agreement_header-allow_type_code = '30'.
                  ls_agreement_header-allow_type = '511'. "Volume fundamental
                ELSEIF ls_agreement_header-allow_type_code = '16'.
                  ls_agreement_header-allow_type = '527'. "Defective Allowance
                ENDIF.
                APPEND ls_agreement_header TO et_agreement_header.
              ENDIF.
            ENDIF.

*            IF ls_agr_head-agr_frm_date <= ls_mdm_results-agr_to_date AND ls_agr_head-agr_to_date > ls_mdm_results-agr_to_date.
*              ls_agr_head-agr_to_date = ls_mdm_results-agr_to_date.
*              ls_agr_head-allow_to_date = ls_mdm_results-agr_to_date.
*              APPEND ls_agr_head TO et_agreement_header.
*            ENDIF.
          ENDIF.
        ENDLOOP.

        IF et_agreement_header IS NOT INITIAL.
          SELECT * FROM zi01081_agr_itm INTO TABLE lt_agr_itm FOR ALL ENTRIES IN et_agreement_header
            WHERE key_val = et_agreement_header-key_val.
          IF sy-subrc = 0.
            LOOP AT lt_agr_itm INTO DATA(ls_agr_itm).
              CLEAR ls_agreement_item.
              MOVE-CORRESPONDING ls_agr_itm TO ls_agreement_item.
              ls_agreement_item-guid = ls_agr_itm-key_val.
              APPEND ls_agreement_item TO et_agreement_item.
            ENDLOOP.
          ENDIF.
        ELSE.
          lv_msgv1 = is_idoc_agr_head-contract_id.
          CALL METHOD me->add_idoc_status
            EXPORTING
              iv_docnum      = gs_idoc_control-docnum
              iv_status      = '53'
              iv_msgty       = 'I'
              iv_msgid       = gc_zfar
              iv_msgno       = '401'        "
              iv_msgv1       = lv_msgv1
            CHANGING
              et_idoc_status = ct_idoc_status.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_AMS_I01081_UTILTY=>GET_ACTIVE_ALLOW_AGREEMENTS
* +-------------------------------------------------------------------------------------------------+
* | [<---] ET_AGR_HEAD                    TYPE        ZTT_I01081_AGR_HEAD
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_active_allow_agreements.
    DATA : lt_agr_head_tmp     TYPE TABLE OF gty_agr,
           lt_agr_header       TYPE ztt_i01081_agr_head,
           lt_agr_stat         TYPE TABLE OF gty_agr_stat,
           ls_kona_del         TYPE gty_kona,
           ls_agreement_header TYPE zst_i01081_agr_head.

* Select the agreements valid for today from KONA
    SELECT knuma datab datbi zlsch FROM kona INTO TABLE
          gt_kona_del WHERE datab <= sy-datum
                AND datbi >= sy-datum.

    IF sy-subrc = 0.
*Get the status of the agreement.
      SELECT knuma_ag ustat ident FROM /irm/ipprasp
        INTO TABLE gt_agr_stat_del FOR ALL ENTRIES IN gt_kona_del
        WHERE knuma_ag = gt_kona_del-knuma_ag AND
              deleted = abap_false.
      IF sy-subrc = 0.
        DATA(lv_ustat_cn) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                        iv_txt04 = zcl_ar_ams_user_status=>gc_agreq_cancelled ).

        DATA(lv_ustat_cn_pend) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                        iv_txt04 = 'CANP' ).

        DATA(lv_ustat_par_cn_pend) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                        iv_txt04 = 'PCNP' ).
        "remove the cancelled & Partially cancelled agreement
        DELETE gt_agr_stat_del WHERE ustat EQ lv_ustat_cn OR
                                     ustat EQ lv_ustat_cn_pend OR
                                     ustat EQ lv_ustat_par_cn_pend.

        IF gt_agr_stat_del IS NOT INITIAL.

          DATA(lv_ustat_cr) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                               iv_txt04 = zcl_ar_ams_user_status=>gc_agreq_ar_apr ).

*See if the MDM Contracts are available for the the remaining agreements
          SELECT a~key_val,
                 a~allow_type_code,
                 b~idoc_num,
                 b~contract_id,
                 b~int_id,
                 b~cntry,
                 b~knuma_ag,
                 b~created_date,
                 b~created_time,
                 b~agr_status,
                 b~vend_number,
                 a~settl_partn,
                 a~merch_hier
             FROM zi01081_agr_hdr AS a
            INNER JOIN zi01081_mdm_agr AS b
            ON a~int_id EQ b~int_id AND
               a~idoc_num = b~idoc_num  AND
               a~cntry = b~cntry AND
               a~contract_id = b~contract_id AND
               a~allow_type_code = b~allow_type_code AND
               a~vend_number = b~vend_number
            INTO TABLE @lt_agr_head_tmp
            FOR ALL ENTRIES IN @gt_agr_stat_del
            WHERE b~knuma_ag = @gt_agr_stat_del-knuma_ag AND
                  b~agr_status = @lv_ustat_cr.

          IF sy-subrc = 0 AND lt_agr_head_tmp IS NOT INITIAL.
            SORT lt_agr_head_tmp BY knuma_ag DESCENDING.
            DELETE ADJACENT DUPLICATES FROM lt_agr_head_tmp COMPARING knuma_ag.
            LOOP AT lt_agr_head_tmp INTO DATA(ls_agr_head).
              CLEAR : ls_agreement_header, ls_kona_del.
              MOVE-CORRESPONDING ls_agr_head TO ls_agreement_header.
              READ TABLE gt_kona_del INTO ls_kona_del WITH KEY knuma_ag = ls_agr_head-knuma_ag.
              IF sy-subrc = 0.
                ls_agreement_header-agr_frm_date = ls_kona_del-datab.
                ls_agreement_header-allow_frm_date = ls_kona_del-datab.
                ls_agreement_header-allow_to_date  = ls_kona_del-databi.
                ls_agreement_header-agr_to_date = ls_kona_del-databi.
                ls_agreement_header-payment_method  = ls_kona_del-zlsch.
                IF ls_agreement_header-allow_type_code = '29' OR
                  ls_agreement_header-allow_type_code = '30'.
                  ls_agreement_header-allow_type = '511'. "Volume fundamental
                ELSEIF ls_agreement_header-allow_type_code = '16'.
                  ls_agreement_header-allow_type = '527'. "Defective Allowance
                ENDIF.
                APPEND ls_agreement_header TO lt_agr_header.
              ENDIF.
            ENDLOOP.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.


    et_agr_head = lt_agr_header.

*New Change

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->GET_AGREEMENTS_FOR_AUTORENEW
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_DAYS                        TYPE        SY-DATUM(optional)
* | [--->] IT_BOART                       TYPE        GTT_BOART(optional)
* | [--->] IT_KNUMA_AG                    TYPE        GTT_KNUMA_AG(optional)
* | [<---] ET_AGR_HEAD                    TYPE        ZTT_I01081_AGR_HEAD
* | [<---] ET_AGR_ITEM                    TYPE        ZTT_I01081_AGR_ITEM
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_agreements_for_autorenew.


    DATA: ls_agr_item_cr TYPE zi01081_idoc_item,
          lv_year        TYPE char4,
          lv_month       TYPE char2,
          lv_date        TYPE char2,
          lv_datab       TYPE sy-datum,
          ls_knuma_ag    TYPE gty_knuma_ag.


*If "All agreements from error table" radio button is on, then get all the agreements
*from the error table and try to auto renew.
    IF gv_all IS NOT INITIAL AND gv_adh IS NOT INITIAL.
      SELECT * FROM zi01081_aren_err INTO
        CORRESPONDING FIELDS OF TABLE gt_aren_err WHERE run_date EQ iv_days.
      IF sy-subrc IS INITIAL.
        CLEAR: it_knuma_ag[],it_knuma_ag.
        LOOP AT gt_aren_err INTO DATA(ls_aren_err).
          ls_knuma_ag-sign = 'I'.
          ls_knuma_ag-option = 'EQ'.
          ls_knuma_ag-low = ls_aren_err-knuma_ag.
          APPEND ls_knuma_ag TO it_knuma_ag[].
          CLEAR ls_knuma_ag.
        ENDLOOP.
      ELSE.
        DATA(lv_err) = abap_true.
      ENDIF.
    ENDIF.

    IF lv_err IS INITIAL.
      SELECT a~knuma,
          a~datab,
          a~datbi,
          b~boart_ag,
          b~ident,
          b~agrwt,
          b~ustat
     INTO TABLE @DATA(lt_knuma)
     FROM kona AS a INNER JOIN /irm/ipprasp AS b
     ON a~knuma EQ b~knuma_ag
     WHERE a~datbi EQ  @iv_days AND
           b~knuma_ag IN @it_knuma_ag AND
           b~boart_ag IN @it_boart[] AND
           b~agrwt EQ '001' AND
         ( b~ustat EQ 'E0004' OR b~ustat EQ 'E0005' ) AND
         ( b~zzoamdm_ind EQ 'Y' OR b~zzoamdm_ind EQ 'M' ).


*Remove the agreements that are cancelled & cancellation pending.
*    DATA(lv_ustat_cn) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
*                                                                         iv_txt04 = zcl_ar_ams_user_status=>gc_agreq_cancelled ).
*
*    DATA(lv_ustat_cn_pend) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
*                                                                      iv_txt04 = 'CANP' ).
*
*    DELETE lt_knuma WHERE ustat EQ lv_ustat_cn AND
*                          ustat EQ lv_ustat_cn_pend.

      IF lt_knuma IS NOT INITIAL.

        SELECT * INTO TABLE @DATA(lt_mdm_agr) FROM
          zi01081_mdm_agr FOR ALL ENTRIES IN @lt_knuma
          WHERE knuma_ag EQ @lt_knuma-knuma.

        IF sy-subrc IS INITIAL.
          SELECT * INTO CORRESPONDING FIELDS OF TABLE et_agr_head FROM
          zi01081_agr_hdr FOR ALL ENTRIES IN lt_mdm_agr
           WHERE idoc_num EQ lt_mdm_agr-idoc_num AND
                 int_id EQ lt_mdm_agr-int_id AND
                 cntry EQ lt_mdm_agr-cntry AND
                 allow_type_code EQ lt_mdm_agr-allow_type_code AND
                 vend_number EQ lt_mdm_agr-vend_number.

          IF sy-subrc IS INITIAL.

*Remove the SAMS defective allowance agreements if the filter is set
            IF zcl_ams_i01081_utilty=>check_sams_filter( ) IS NOT INITIAL.
              DELETE et_agr_head WHERE ( merch_hier BETWEEN 62 AND 64 ) AND
                                        allow_type_code EQ 16.
            ENDIF.

            SELECT * INTO TABLE @DATA(lt_agr_item) FROM zi01081_agr_itm
              FOR ALL ENTRIES IN @et_agr_head WHERE key_val EQ @et_agr_head-key_val AND
                                                   int_id  EQ @et_agr_head-int_id AND
                                                   idoc_num EQ @et_agr_head-idoc_num AND
                                                   cntry EQ @et_agr_head-cntry.
            IF sy-subrc IS INITIAL.
              SORT lt_agr_item BY idoc_num item_no.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.



      LOOP AT lt_agr_item INTO DATA(ls_agr_item).
        MOVE-CORRESPONDING ls_agr_item TO ls_agr_item_cr.
        ls_agr_item_cr-guid = ls_agr_item-key_val.
        ls_agr_item_cr-interface_id = ls_agr_item-int_id.
        APPEND ls_agr_item_cr TO et_agr_item.
        CLEAR ls_agr_item_cr.
      ENDLOOP.

      LOOP AT et_agr_head ASSIGNING FIELD-SYMBOL(<ls_agr_head>).

*Assign the agreement that needs to be auto renewed.
        READ TABLE lt_mdm_agr INTO DATA(ls_mdm_agr)
        WITH KEY idoc_num = <ls_agr_head>-idoc_num
                 contract_id = <ls_agr_head>-contract_id
                 allow_type_code = <ls_agr_head>-allow_type_code
                 vend_number = <ls_agr_head>-vend_number TRANSPORTING knuma_ag.
        IF sy-subrc IS INITIAL.
          <ls_agr_head>-knuma_ag = ls_mdm_agr-knuma_ag.

*The from & to date has to be changed in the agr header table since it will have the from date of the agreement
*that was initially created.
          READ TABLE lt_knuma INTO DATA(ls_knuma) WITH KEY knuma =  ls_mdm_agr-knuma_ag.
          IF sy-subrc IS INITIAL.
            <ls_agr_head>-agr_frm_date =  <ls_agr_head>-allow_frm_date = ls_knuma-datab.
            <ls_agr_head>-agr_to_date =  <ls_agr_head>-allow_to_date = ls_knuma-datbi.
          ENDIF.
        ENDIF.

        <ls_agr_head>-agr_frm_date = <ls_agr_head>-allow_frm_date = <ls_agr_head>-agr_to_date + 1.
        gs_agr_head_data-agr_frm_date = gs_agr_head_data-allow_frm_date = <ls_agr_head>-agr_frm_date.

*Calculate the agreement & allowance to date.
        IF <ls_agr_head>-allow_type_code EQ '30'. "Yearly agreement

          lv_year = <ls_agr_head>-agr_frm_date+0(4).
          lv_month = <ls_agr_head>-agr_frm_date+4(2).
          lv_date = <ls_agr_head>-agr_frm_date+6(2).

          CALL METHOD me->calc_end_date
            IMPORTING
              ev_end_date = <ls_agr_head>-agr_to_date
            CHANGING
              iv_month    = lv_month
              iv_date     = lv_date
              iv_year     = lv_year.

        ELSEIF <ls_agr_head>-allow_type_code EQ '29' OR
               <ls_agr_head>-allow_type_code EQ '16'.    "Defective - Monthly

          CALL FUNCTION 'LAST_DAY_OF_MONTHS'
            EXPORTING
              day_in            = <ls_agr_head>-agr_frm_date
            IMPORTING
              last_day_of_month = <ls_agr_head>-agr_to_date
            EXCEPTIONS
              day_in_no_date    = 1
              OTHERS            = 2.
        ENDIF.

        <ls_agr_head>-allow_to_date = <ls_agr_head>-agr_to_date.
        CLEAR: ls_mdm_agr.
      ENDLOOP.

      SORT et_agr_head BY knuma_ag idoc_num DESCENDING.
      DELETE ADJACENT DUPLICATES FROM et_agr_head COMPARING knuma_ag.

      IF et_agr_head IS NOT INITIAL.
*Check if an agreement has been already created for the next month.
        SELECT idoc_num, contract_id, knuma_ag, allow_type_code
          FROM zi01081_mdm_agr INTO TABLE @DATA(lt_dup_agr)
          FOR ALL ENTRIES IN @et_agr_head
          WHERE contract_id EQ @et_agr_head-contract_id.

        IF sy-subrc IS INITIAL.
*When checking if the agreements are created for future month, we need to see only if the
*agreement exist for that contract. do not need to check the status of that agreement.
          SELECT a~knuma a~datab a~datbi a~zlsch c~contract_id c~allow_type_code b~ustat FROM
            kona AS a INNER JOIN
             /irm/ipprasp AS b ON a~knuma EQ b~knuma_ag INNER JOIN
             zi01081_mdm_agr AS c ON a~knuma EQ c~knuma_ag

             INTO TABLE gt_kona_dup FOR ALL ENTRIES IN
             lt_dup_agr WHERE a~knuma EQ lt_dup_agr-knuma_ag AND
*                   b~agrwt EQ '001' AND
                    ( b~zzoamdm_ind EQ 'Y' OR
                      b~zzoamdm_ind EQ 'M' ).
          lv_datab = iv_days.
          lv_datab = lv_datab + 1.

*Remove all the agreements that  begins before the date that is given in selection
          DELETE gt_kona_dup WHERE datab NE lv_datab.
*
*            DELETE gt_kona_dup WHERE ustat EQ lv_ustat_cn AND
*                                     ustat EQ lv_ustat_cn_pend.
        ENDIF.
      ENDIF.
      gt_agr_head_ar = et_agr_head. "Used when populating the Auto renew error table
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->GET_AGR_DESC
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_AGR_TYPE                    TYPE        BOART
* | [<-()] EV_AGR_TYPE_DESC               TYPE        VTEXT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_agr_desc.

    SELECT SINGLE vtext FROM t6b1t
      INTO ev_agr_type_desc
      WHERE spras EQ gv_language AND
            boart EQ iv_agr_type.

    IF sy-subrc IS NOT INITIAL.
      SELECT SINGLE vtext FROM t6b1t
      INTO ev_agr_type_desc
      WHERE spras EQ 'E' AND
            boart EQ iv_agr_type.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->GET_ALLOWANCE_DESCRIPTION
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_AGREEMENT_HEADER            TYPE        ZTT_I01081_AGR_HEAD
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_allowance_description.

    TYPES: BEGIN OF lty_cpec,
             allow_type TYPE rstgr,
           END OF lty_cpec.

    DATA: lt_agr TYPE TABLE OF lty_cpec,
          ls_agr TYPE lty_cpec.

    READ TABLE it_agreement_header INTO DATA(ls_agr_header) INDEX 1.

    DATA(lt_agreement_header) = it_agreement_header.

    SORT lt_agreement_header BY allow_type.
    DELETE ADJACENT DUPLICATES FROM lt_agreement_header COMPARING allow_type.

    LOOP AT lt_agreement_header INTO DATA(ls_agreement_header).
      ls_agr-allow_type = ls_agreement_header-allow_type.
      APPEND ls_agr TO lt_agr.
      CLEAR: ls_agreement_header, ls_agr.
    ENDLOOP.
*
*Get the default company code for China.
    DATA(lo_gce_config) = NEW zcl_ar_ams_read_gce( ).
    TRY.
        DATA(lv_company_code) = lo_gce_config->zif_ar_ams_read_gce~get_default_company_code( iv_country = ls_agr_header-cntry ).
      CATCH cx_static_check.
    ENDTRY.

    SELECT *
      FROM t053s
      INTO TABLE @gt_t053s
   FOR ALL ENTRIES IN @lt_agr
   WHERE bukrs = @lv_company_code
     AND rstgr = @lt_agr-allow_type
     AND ( spras = @sy-langu OR
           spras = @gv_language ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->GET_BANNER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD
* | [--->] IT_LOC_TYPE                    TYPE        ZTT_LOC_TYPE
* | [<---] ET_BANNER                      TYPE        ZTT_AGR_BANNER_CODE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_banner.


    TYPES : BEGIN OF lty_s_location,
              loc TYPE abtei,
            END OF lty_s_location.

    TYPES: BEGIN OF ty_s_loc_banner,
             loc_type    TYPE zbetrpmdm,
             banner_code TYPE zd_banner_code,
             banner_desc TYPE zd_banner_dsc,
           END OF ty_s_loc_banner .


    DATA: lt_location   TYPE STANDARD TABLE OF lty_s_location,
          ls_location   TYPE lty_s_location,
          lt_loc_banner TYPE TABLE OF ty_s_loc_banner,
          ls_loc_banner TYPE ty_s_loc_banner,
          ls_banner     TYPE zds_agr_banner_code,
          lt_banner     TYPE ztt_agr_banner_code.



    LOOP AT it_loc_type INTO DATA(ls_child).
      ls_location-loc = ls_child-ctx_va_location.
      APPEND ls_location TO lt_location.
    ENDLOOP.


    SELECT   a~prctr,
             b~ktext,
             a~abtei,
             a~regio,
             b~spras
             FROM cepc AS a LEFT OUTER JOIN cepct AS b
                ON a~prctr = b~prctr
                  INTO TABLE @DATA(lt_cepc)
                   FOR ALL ENTRIES IN @lt_location
                  WHERE a~abtei =  @lt_location-loc
                  AND a~land1 = @is_agreement_header-cntry.
    IF lt_cepc[] IS NOT INITIAL.
      DELETE lt_cepc WHERE spras <> 'E'.
      DELETE lt_cepc WHERE spras <> sy-langu.
      SORT lt_cepc BY prctr.
      SELECT a~prctr,
             a~banner_id,
             b~banner_desc
        FROM zglt_strbnrrel AS a
        INNER JOIN zimt_banner_desc AS b
        ON a~banner_id = b~banner_code
        INTO TABLE @DATA(lt_banner_all)
        FOR ALL ENTRIES IN @lt_cepc
        WHERE a~prctr = @lt_cepc-prctr
        AND a~validf LE @is_agreement_header-allow_to_date
        AND a~validt GE @is_agreement_header-allow_frm_date
        AND a~land1  EQ @is_agreement_header-cntry.
      IF sy-subrc IS INITIAL.

        LOOP AT lt_banner_all INTO DATA(ls_banner_all).
          READ TABLE lt_cepc INTO DATA(ls_cepc) WITH KEY prctr = ls_banner_all-prctr BINARY SEARCH.
          IF sy-subrc = 0.
            ls_banner-ctx_va_allw_type = gs_agr_head_data-allow_type.
            ls_banner-ctx_va_allw_seq = '01'.
            ls_banner-ctx_va_banner = ls_banner_all-banner_id.
            ls_banner-ctx_va_desc = ls_banner_all-banner_desc.
            ls_banner-ctx_va_loc_type = ls_cepc-abtei.
            APPEND ls_banner TO lt_banner.
          ENDIF.
        ENDLOOP.
        SORT lt_banner BY ctx_va_loc_type ctx_va_banner.
        DELETE ADJACENT DUPLICATES FROM lt_banner COMPARING ctx_va_loc_type ctx_va_banner.
        et_banner = lt_banner.
      ENDIF.
    ENDIF.




  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->GET_DELETED_AGR_DETAILS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_AGR_HEAD                    TYPE        ZST_I01081_AGR_HEAD
* | [<---] ET_AGREEMENT_ITEM              TYPE        ZTT_I01081_AGR_ITEM
* | [<---] ES_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD
* | [<-->] CT_IDOC_STATUS                 TYPE        T_IDOC_STATUS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_deleted_agr_details.
    DATA : lt_mdm_results    TYPE ztty_mdm_api_result,
           ls_agr_head_del   TYPE zst_i01081_agr_head,
           ls_agreement_item TYPE zi01081_idoc_item,
           lt_agr_itm        TYPE STANDARD TABLE OF zi01081_agr_itm,
           lv_msgv1          TYPE edi_stapa1,
           lv_msgv2          TYPE edi_stapa2,
           lv_msgv3          TYPE edi_stapa3.
*Create the object for the utility class
    DATA(lo_mdm_serv) = NEW zcl_mdm_contract_api_serv( ).

    lv_msgv1 = is_agr_head-settl_partn.
    lv_msgv2 = is_agr_head-merch_hier.
    lv_msgv3 = is_agr_head-contract_id+8(1).
    CALL METHOD me->add_idoc_status
      EXPORTING
        iv_docnum      = gs_idoc_control-docnum
        iv_status      = gc_68
        iv_msgty       = 'S'
        iv_msgid       = gc_zfar
        iv_msgno       = '403'        "
        iv_msgv1       = lv_msgv1
        iv_msgv2       = lv_msgv2
        iv_msgv3       = lv_msgv3
      CHANGING
        et_idoc_status = ct_idoc_status.

    TRY .
      CALL METHOD lo_mdm_serv->find_deleted_allowances
      EXPORTING
        is_agr_header  = is_agr_head
      IMPORTING
        et_mdm_results = lt_mdm_results.
    CATCH cx_no_data_found.
        lv_msgv1 = is_agr_head-settl_partn.
        lv_msgv2 = is_agr_head-merch_hier.
        lv_msgv3 = is_agr_head-contract_id+8(1).
        CALL METHOD me->add_idoc_status
          EXPORTING
            iv_docnum      = gs_idoc_control-docnum
            iv_status      = gc_68
            iv_msgty       = 'E'
            iv_msgid       = gc_zfar
            iv_msgno       = '400'        "
            iv_msgv1       = lv_msgv1
            iv_msgv2       = lv_msgv2
            iv_msgv3       = lv_msgv3
          CHANGING
            et_idoc_status = ct_idoc_status.
        RETURN.
    ENDTRY.


    LOOP AT lt_mdm_results INTO DATA(ls_mdm_results).
      IF is_agr_head-allow_type_code = ls_mdm_results-allow_type_code AND is_agr_head-agr_frm_date <= ls_mdm_results-agr_to_date
         AND is_agr_head-agr_to_date >= ls_mdm_results-agr_to_date.
        ls_agr_head_del = is_agr_head.
        ls_agr_head_del-agr_to_date = ls_mdm_results-agr_to_date.
        ls_agr_head_del-allow_to_date = ls_mdm_results-agr_to_date.
        es_agreement_header = ls_agr_head_del.
        EXIT.
      ENDIF.
    ENDLOOP.
    IF es_agreement_header is INITIAL.
      lv_msgv1 = is_agr_head-contract_id.
      CALL METHOD me->add_idoc_status
          EXPORTING
            iv_docnum      = gs_idoc_control-docnum
            iv_status      = gc_68
            iv_msgty       = 'I'
            iv_msgid       = gc_zfar
            iv_msgno       = '401'        "
            iv_msgv1       = lv_msgv1
          CHANGING
            et_idoc_status = ct_idoc_status.
    ENDIF.
    IF ls_agr_head_del IS NOT INITIAL.

      SELECT * FROM zi01081_agr_itm INTO TABLE lt_agr_itm WHERE key_val = ls_agr_head_del-key_val.
      IF sy-subrc = 0.
        LOOP AT lt_agr_itm INTO DATA(ls_agr_itm).
          CLEAR ls_agreement_item.
          MOVE-CORRESPONDING ls_agr_itm TO ls_agreement_item.
          ls_agreement_item-guid = ls_agr_itm-key_val.
          APPEND ls_agreement_item TO et_agreement_item.
        ENDLOOP.
      ENDIF.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->GET_EMAIL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_OBJ_NAME                    TYPE        ZD_INTER_ID
* | [--->] IV_FIELDNAME                   TYPE        NAME_FELD
* | [--->] IV_LAND1                       TYPE        LAND1
* | [<---] ET_MAIL                        TYPE        ZTT_I01081_IDOC_EMAIL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_email.
    DATA: lv_dist     TYPE soobjinfi1-obj_name,
          ls_dli_data TYPE sodlidati1,
          lt_entries  TYPE STANDARD TABLE OF sodlienti1,
          ls_email    TYPE zst_i01081_idoc_email,
          lv_obj_name TYPE zd_obj_name.


*Get distribution List.
    lv_obj_name = iv_obj_name.

    SELECT zobj_name,
           flow
      FROM zapt_param_table
      INTO TABLE @DATA(lt_dist)
     WHERE land1 = @iv_land1
       AND zobj_name = @lv_obj_name
       AND zsel_name = @iv_fieldname.
    IF sy-subrc <> 0.
      MESSAGE i278(zfap).  "Distribution Lists Not maintained
      LEAVE LIST-PROCESSING.
    ENDIF.

    READ TABLE lt_dist INTO DATA(ls_list) WITH KEY zobj_name = lv_obj_name.
    IF sy-subrc IS INITIAL.
      lv_dist = ls_list-flow.
      CALL FUNCTION 'SO_DLI_READ_API1'
        EXPORTING
          dli_name                   = lv_dist
          shared_dli                 = 'X'
        IMPORTING
          dli_data                   = ls_dli_data
        TABLES
          dli_entries                = lt_entries
        EXCEPTIONS
          dli_not_exist              = 1
          operation_no_authorization = 2
          parameter_error            = 3
          x_error                    = 4
          OTHERS                     = 5.
      IF sy-subrc <> 0.
        MESSAGE i279(zfap). "Distribution List does not exist
        LEAVE LIST-PROCESSING.
      ENDIF.

      LOOP AT lt_entries INTO DATA(ls_entries).
        ls_email-email = ls_entries-member_adr.
        CONDENSE ls_email.
        APPEND ls_email TO et_mail.
        CLEAR :ls_email,ls_entries.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->GET_LANGUAGE_FROM_COUNTRY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_LAND1                       TYPE        LAND1
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_language_from_country.
*Get the language from the country.
    CLEAR gv_language.
    IF iv_land1 IS NOT INITIAL.
      SELECT spras,
             land1
        FROM t005t
        INTO TABLE @DATA(lt_t005t)
        WHERE land1 EQ @iv_land1.
      IF sy-subrc IS INITIAL.
        READ TABLE lt_t005t WITH KEY spras = '1'
                                     land1 = iv_land1 TRANSPORTING NO FIELDS.
        IF sy-subrc IS INITIAL.
          gv_language = '1'.
        ELSE.
          gv_language = 'E'.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->GET_MERCH_HIER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD
* | [<---] ET_MERCH_HIER                  TYPE        ZTT_MER_HIER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_merch_hier.

    DATA: lv_dep        TYPE zd_dep,
          ls_merch_hier TYPE zds_mer_hier,
          lv_subcat(10) TYPE c.

    lv_dep = is_agreement_header-merch_hier.

    IF lv_dep BETWEEN 62 AND 64.
      SELECT * INTO TABLE @DATA(lt_mmt_items)
        FROM zmmt_items WHERE
        srcsys EQ 'SAMS' AND
        land EQ @gv_land1 AND
        lifnr EQ @gv_lifnr
        ORDER BY PRIMARY KEY.
      IF sy-subrc IS INITIAL.
        LOOP AT lt_mmt_items INTO DATA(ls_mmt_items).
          ls_merch_hier-ctx_va_allw_type = is_agreement_header-allow_type.
          ls_merch_hier-ctx_va_allw_seq = '01'.
          ls_merch_hier-ctx_va_sams_cat = ls_mmt_items-department.
          ls_merch_hier-ctx_va_sams_sub_cat = space.
          ls_merch_hier-ctx_va_zfine_line = space.
          APPEND ls_merch_hier TO et_merch_hier.
          CLEAR: ls_merch_hier.
        ENDLOOP.
      ELSE.
        "Added for 2000044293: AMS China: MDM SAMS Item Validation Fix Change
        ls_merch_hier-ctx_va_allw_type = is_agreement_header-allow_type.
        ls_merch_hier-ctx_va_allw_seq = '01'.
        ls_merch_hier-ctx_va_sams_cat = lv_dep.
        ls_merch_hier-ctx_va_sams_sub_cat = space.
        ls_merch_hier-ctx_va_zfine_line = space.
        APPEND ls_merch_hier TO et_merch_hier.
        "End of Changes for 2000044293: AMS China: MDM SAMS Item Validation Fix Change
      ENDIF.
    ELSE.
      ls_merch_hier-ctx_va_allw_type = is_agreement_header-allow_type.
      ls_merch_hier-ctx_va_allw_seq = '01'.
      ls_merch_hier-ctx_va_department = lv_dep.
      APPEND ls_merch_hier TO et_merch_hier.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->GET_REGION
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD
* | [<---] ET_REGION                      TYPE        ZTT_AGR_REGION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_region.

*    DATA: ls_region_ag TYPE zds_agr_region.
*
*    IF is_agreement_header-cntry IS NOT INITIAL.
*
*      SELECT * INTO TABLE @DATA(lt_region)
*        FROM t005u WHERE spras EQ 'E' AND
*                         land1 EQ @is_agreement_header-cntry.
*      IF sy-subrc IS NOT INITIAL.
*        SELECT * INTO TABLE lt_region
*      FROM t005u WHERE land1 EQ is_agreement_header-cntry.
*      ENDIF.
*
*
*      LOOP AT lt_region INTO DATA(ls_region).
*        ls_region_ag-ctx_va_allw_type  = is_agreement_header-allow_type.
*        ls_region_ag-ctx_va_allw_seq  = '01'.
*        ls_region_ag-ctx_va_region = ls_region-bland.
*        ls_region_ag-ctx_va_reg_desc = ls_region-bezei.
*        ls_region_ag-ctx_va_land1 = is_agreement_header-cntry.
*        APPEND ls_region_ag TO et_region.
*        CLEAR ls_region_ag.
*      ENDLOOP.
*    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->GET_SETTLEMENT_PARTNER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_MDM_VENDOR                  TYPE        ALTKN(optional)
* | [<---] EV_SETTL_PARTN                 TYPE        LNRZE
* | [<---] EV_VALID                       TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_settlement_partner.


    DATA: lv_altkn         TYPE altkn,
          lv_altkn_temp(6) TYPE c.
    "Begin of changes-SKONATH-INC11396209-DR3K920874-8/28/2019
    DATA ls_head_offi TYPE lfb1.
    "End of changes-SKONATH-INC11396209-DR3K920874-8/28/2019
    lv_altkn_temp = iv_mdm_vendor.
    SHIFT lv_altkn_temp RIGHT DELETING TRAILING space.

    TRANSLATE lv_altkn_temp USING ' 00000'.

    lv_altkn = lv_altkn_temp.
    "Begin of changes-SKONATH-INC11396209-DR3K920874-8/28/2019
    CLEAR ls_head_offi.

    IF gv_land1 IS NOT INITIAL.
      DATA: lo_read_gce     TYPE REF TO zif_ar_ams_read_gce,
            lv_company_code TYPE bukrs.
      CREATE OBJECT lo_read_gce TYPE zcl_ar_ams_read_gce.
      CLEAR lv_company_code.
      TRY.
          lv_company_code = lo_read_gce->get_default_company_code( iv_country = gv_land1 ).
        CATCH cx_static_check.
      ENDTRY.

      SELECT * UP TO 1 ROWS INTO @ls_head_offi
         FROM lfb1
         WHERE bukrs EQ @lv_company_code AND
               altkn EQ @lv_altkn AND
               loevm EQ @abap_false.
      ENDSELECT.
    ELSE.
      SELECT * UP TO 1 ROWS INTO @ls_head_offi
           FROM lfb1
           WHERE altkn EQ @lv_altkn AND
           loevm EQ @abap_false.
      ENDSELECT.

    ENDIF.
*        SELECT * UP TO 1 ROWS INTO @DATA(ls_head_offi)
*       FROM lfb1
*       WHERE altkn EQ @lv_altkn AND
*             loevm EQ @abap_false.
*    ENDSELECT.
    "End of changes-SKONATH-INC11396209-DR3K920874-8/28/2019.
    IF sy-subrc IS INITIAL.
      ev_settl_partn = ls_head_offi-lnrze.
      ev_valid = abap_true.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->GET_TIER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD(optional)
* | [--->] IT_AGREEMENT_ITEM              TYPE        ZTT_I01081_AGR_ITEM(optional)
* | [<---] ET_TIER                        TYPE        ZTT_TIER_DTL
* | [<-->] CT_IDOC_STATUS                 TYPE        T_IDOC_STATUS(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_tier.

    DATA: ls_tier      TYPE zds_tier_dtl,
          lt_tier      TYPE ztt_tier_dtl,
          lv_purch_amt TYPE kstbw.


    CONSTANTS: lc_0 TYPE kstbw VALUE '0.00',
               lc_0_rebate TYPE kstbw VALUE '0.0'.


    DATA(lt_agreement_item) = it_agreement_item.
    DELETE lt_agreement_item WHERE min_purch_amt EQ lc_0 AND
                                  max_purch_amt EQ lc_0 AND
                                  rebate_rate eq lc_0_rebate.

    IF lt_agreement_item IS NOT INITIAL.
      IF is_agreement_header-allow_type_code EQ '16'. "Defective allowance
        DESCRIBE TABLE lt_agreement_item LINES DATA(lv_item_line).
        IF lv_item_line GT 1.
          CALL METHOD me->add_idoc_status
            EXPORTING
              iv_docnum      = gs_idoc_control-docnum
              iv_status      = gc_68
              iv_msgty       = 'E'
              iv_msgid       = gc_zfap
              iv_msgno       = '459' "Defective allowance should have only 1 tier
            CHANGING
              et_idoc_status = ct_idoc_status.

          CALL METHOD me->add_err_message
            EXPORTING
              iv_cntry     = is_agreement_header-cntry
              iv_idoc_num  = gs_idoc_control-docnum
              iv_mtype     = 'E'
              iv_msg_class = gc_zfap
              iv_msg_num   = '459'. "Defective allowance should have only 1 tier

        ELSE.
          READ TABLE lt_agreement_item INTO DATA(ls_agreement_item) INDEX 1.
          IF sy-subrc IS INITIAL.
            ls_tier-ctx_va_allw_type = is_agreement_header-allow_type.
            ls_tier-ctx_va_allw_seq = '01'.
            ls_tier-ctx_va_currency = '3'.
            ls_tier-ctx_va_cur_uom = is_agreement_header-currency.
            ls_tier-ctx_va_from_value_amnt = lc_0.
            ls_tier-ctx_va_tovalue_amnt = '99999999999.00'.
            ls_tier-ctx_va_rate = ls_agreement_item-rebate_rate * 10.
            APPEND ls_tier TO et_tier.
          ENDIF.
        ENDIF.
      ELSE.
        LOOP AT lt_agreement_item INTO ls_agreement_item.
          ls_tier-ctx_va_allw_type = is_agreement_header-allow_type.
          ls_tier-ctx_va_allw_seq = '01'.
          ls_tier-ctx_va_currency = '3'.
          ls_tier-ctx_va_cur_uom = is_agreement_header-currency.

*If min Purchase amount is 0, then, then add this as first tier.
          IF ls_agreement_item-min_purch_amt EQ 0.
            ls_tier-ctx_va_from_value_amnt = lc_0.
            CLEAR lv_purch_amt.
            lv_purch_amt = ls_agreement_item-max_purch_amt.
            ls_tier-ctx_va_tovalue_amnt = lv_purch_amt.
            ls_tier-ctx_va_rate = ls_agreement_item-rebate_rate * 10.

          ELSEIF ls_agreement_item-min_purch_amt <> 0.
            IF et_tier IS INITIAL.
*If the min purchase amount starts from Non zero( Ex: 10 - 100), we set the first tier
*as 0 - 9 rebate rate 0 and 10  -  100 rebate rate 1.
              ls_tier-ctx_va_from_value_amnt = '0.00'.
              lv_purch_amt = ls_agreement_item-min_purch_amt - 1.
              ls_tier-ctx_va_tovalue_amnt = lv_purch_amt.
              ls_tier-ctx_va_rate = '0'.
              APPEND ls_tier TO et_tier.

              CLEAR lv_purch_amt.
              lv_purch_amt = ls_agreement_item-min_purch_amt.
              ls_tier-ctx_va_from_value_amnt = lv_purch_amt.
              CLEAR lv_purch_amt.
              lv_purch_amt = ls_agreement_item-max_purch_amt.
              ls_tier-ctx_va_tovalue_amnt = lv_purch_amt.
              ls_tier-ctx_va_rate = ls_agreement_item-rebate_rate * 10.
              CONDENSE: ls_tier-ctx_va_from_value_amnt,
                      ls_tier-ctx_va_tovalue_amnt.
            ELSE.
*For non first and non first tiers, then add to the tier table.
              CLEAR lv_purch_amt.
              lv_purch_amt = ls_agreement_item-min_purch_amt.
              ls_tier-ctx_va_from_value_amnt = lv_purch_amt.
              CLEAR lv_purch_amt.
              lv_purch_amt = ls_agreement_item-max_purch_amt.
              ls_tier-ctx_va_tovalue_amnt = lv_purch_amt.
              ls_tier-ctx_va_rate = ls_agreement_item-rebate_rate * 10.
            ENDIF.
          ENDIF.

          AT LAST.
            CONDENSE ls_tier-ctx_va_tovalue_amnt.
            IF ls_tier-ctx_va_tovalue_amnt EQ lc_0.
              ls_tier-ctx_va_tovalue_amnt = '99999999999.00'.
            ENDIF.
          ENDAT.
          APPEND ls_tier TO et_tier.
        ENDLOOP.

*Validation of tier data is only for non defective allowances.
        DATA : ls_prev_tier TYPE zds_tier_dtl.
        LOOP AT et_tier ASSIGNING FIELD-SYMBOL(<ls_tier_dtl>).
          CALL METHOD me->validate_tier_rate
            EXPORTING
              iv_count            = sy-tabix
              is_agreement_header = is_agreement_header
              is_tier_dtl         = <ls_tier_dtl>
              is_prev_tier        = ls_prev_tier
            IMPORTING
              rv_valid            = DATA(lv_valid)
            CHANGING
              ct_idoc_status      = ct_idoc_status.

          ls_prev_tier = <ls_tier_dtl>.
          CONDENSE <ls_tier_dtl>-ctx_va_from_value NO-GAPS.
          CONDENSE <ls_tier_dtl>-ctx_va_from_value_amnt NO-GAPS.
          CONDENSE <ls_tier_dtl>-ctx_va_tovalue NO-GAPS.
          CONDENSE <ls_tier_dtl>-ctx_va_tovalue_amnt NO-GAPS.
        ENDLOOP.
      ENDIF.
    ELSE.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = gs_idoc_control-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '436' "Tiers are empty
        CHANGING
          et_idoc_status = ct_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = is_agreement_header-cntry
          iv_idoc_num  = gs_idoc_control-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '436'. "Tiers are empty
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->GET_VENDOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_MDM_VENDOR                  TYPE        LIFNR(optional)
* | [<---] EV_SAP_VENDOR                  TYPE        LIFNR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_vendor.
   "Begin of changes-SKONATH-INC11396209-DR3K920874-8/28/2019
    TYPES: BEGIN OF ty_lfb1,
          lifnr TYPE LIFNR,
          lnrze TYPE LNRZE,
          END OF ty_lfb1.
 DATA ls_lfb1 TYPE ty_lfb1.
       "end of changes-SKONATH-INC11396209-DR3K920874-8/28/2019
    DATA: lv_altkn TYPE altkn.
    lv_altkn = iv_mdm_vendor.

    CLEAR gv_settl_partn.
    "Begin of changes-SKONATH-INC11396209-DR3K920874-8/28/2019
    CLEAR ls_lfb1.
 IF gv_land1 IS NOT INITIAL.
    DATA: lo_read_gce     TYPE REF TO zif_ar_ams_read_gce,
          lv_company_code TYPE bukrs.
    CREATE OBJECT lo_read_gce TYPE zcl_ar_ams_read_gce.

    CLEAR lv_company_code.
    TRY.
        lv_company_code = lo_read_gce->get_default_company_code( iv_country = gv_land1 ).
      CATCH cx_static_check.
    ENDTRY.

    SELECT lifnr, lnrze UP TO 1 ROWS INTO @ls_lfb1
     FROM lfb1
     WHERE bukrs EQ @lv_company_code AND
           altkn EQ @lv_altkn.
    ENDSELECT.

ELSE.

   SELECT lifnr, lnrze UP TO 1 ROWS INTO @ls_lfb1
      FROM lfb1
      WHERE altkn EQ @lv_altkn.
    ENDSELECT.
  ENDIF.
*    SELECT lifnr, lnrze UP TO 1 ROWS INTO @data(ls_lfb1)
*      FROM lfb1
*      WHERE altkn EQ @lv_altkn.
*    ENDSELECT.
    "End of changes-SKONATH-INC11396209-DR3K920874-8/28/2019.
    IF sy-subrc IS INITIAL.
      ev_sap_vendor = gv_lifnr = ls_lfb1-lifnr.
      gv_settl_partn = ls_lfb1-lnrze.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->LOAD_IDOC_CONTRACT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_IDOC_DATA                   TYPE        EDIDD_TT
* | [--->] IS_CONTROL_DATA                TYPE        EDIDC
* | [<---] ES_IDOC_HEADER                 TYPE        ZST_I01081_IDOC_HEAD
* | [<---] ET_IDOC_DATA                   TYPE        ZTT_I01081_IDOC_CONTRACT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_idoc_contract.
    DATA:      ls_agr_hdr       TYPE z1ams_contract_hdr,
               ls_agr_hdr1      TYPE z1ams_contract_allow,
               ls_agr_itm       TYPE z1ams_contract_itm,
               ls_idoc_contract TYPE zst_i01081_idoc_contract,
               lt_idoc_contract TYPE ztt_i01081_idoc_contract.

    CONSTANTS: lc_agr_hdr  TYPE edilsegtyp VALUE 'Z1AMS_CONTRACT_HDR',
               lc_agr_hdr1 TYPE edilsegtyp VALUE 'Z1AMS_CONTRACT_ALLOW',
               lc_agr_itm  TYPE edilsegtyp VALUE 'Z1AMS_CONTRACT_ITM'.

    gs_idoc_control = is_control_data.
    DESCRIBE TABLE it_idoc_data LINES DATA(lv_lines).
    LOOP AT it_idoc_data ASSIGNING FIELD-SYMBOL(<ls_idoc_data>).
      DATA(lv_tabix) = sy-tabix.
      CASE <ls_idoc_data>-segnam.

        WHEN lc_agr_hdr.
          ls_agr_hdr = <ls_idoc_data>-sdata.
          gv_land1 = 'CN'.
          ls_idoc_contract-supplier_country_code = gv_land1.
          ls_idoc_contract-non_retail_link = 'X'.
          MOVE-CORRESPONDING ls_agr_hdr TO ls_idoc_contract.
          MOVE-CORRESPONDING ls_agr_hdr TO gs_input_data_h.
          IF gs_input_data_h-settlement_parnter IS INITIAL.
            IF gs_input_data_h-contract_id IS NOT INITIAL.
              gs_input_data_h-settlement_parnter = gs_input_data_h-contract_id(6).
            ENDIF.
          ENDIF.
        WHEN lc_agr_hdr1.
          IF ls_idoc_contract-items IS NOT INITIAL.
            APPEND ls_idoc_contract TO lt_idoc_contract.
            CLEAR ls_idoc_contract-items.
          ENDIF.
          ls_agr_hdr1 = <ls_idoc_data>-sdata.
          MOVE-CORRESPONDING ls_agr_hdr1 TO ls_idoc_contract.
          IF lv_tabix EQ lv_lines.
            APPEND ls_idoc_contract TO lt_idoc_contract.
          ELSE.
            lv_tabix = lv_tabix + 1.
            READ TABLE it_idoc_data INTO DATA(ls_idoc_data) INDEX lv_tabix.
            IF sy-subrc IS INITIAL AND ls_idoc_data-segnam EQ lc_agr_hdr1.
              APPEND ls_idoc_contract TO lt_idoc_contract.
            ENDIF.
          ENDIF.
        WHEN lc_agr_itm.
          ls_agr_itm = ls_agr_hdr1 = <ls_idoc_data>-sdata.
          APPEND ls_agr_itm TO ls_idoc_contract-items.
        WHEN OTHERS.
      ENDCASE.
      CLEAR: ls_agr_hdr, ls_agr_hdr1, ls_agr_itm.
    ENDLOOP.
    IF ls_idoc_contract-items IS NOT INITIAL.
      APPEND ls_idoc_contract TO lt_idoc_contract.
      CLEAR ls_idoc_contract.
    ENDIF.
    et_idoc_data = lt_idoc_contract.
    es_idoc_header = gs_input_data_h.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->LOAD_IDOC_DATA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_IDOC_DATA                   TYPE        EDIDD_TT
* | [--->] IS_CONTROL_DATA                TYPE        EDIDC
* | [<---] ES_IDOC_HEADER                 TYPE        ZST_I01081_IDOC_HEAD
* | [<---] ET_IDOC_ITEM                   TYPE        ZTT_I01081_IDOC_ITEM
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_idoc_data.

    DATA:      ls_agr_hdr      TYPE z1ams_agre_hdr,
               ls_agr_hdr1     TYPE z1ams_agre_hdr1,
               ls_agr_itm      TYPE z1ams_agre_itm,
               ls_input_data_i TYPE zst_i01081_idoc_item.

    CONSTANTS: lc_agr_hdr  TYPE edilsegtyp VALUE 'Z1AMS_AGRE_HDR',
               lc_agr_hdr1 TYPE edilsegtyp VALUE 'Z1AMS_AGRE_HDR1',
               lc_agr_itm  TYPE edilsegtyp VALUE 'Z1AMS_AGRE_ITM'.

    gs_idoc_control = is_control_data.

    LOOP AT it_idoc_data ASSIGNING FIELD-SYMBOL(<ls_idoc_data>).
      CASE <ls_idoc_data>-segnam.

        WHEN lc_agr_hdr.
          ls_agr_hdr = <ls_idoc_data>-sdata.
          gv_land1 = ls_agr_hdr-supplier_country_code.
          MOVE-CORRESPONDING ls_agr_hdr TO gs_input_data_h.
**Begin of code changes INC15773715 by VN50G00
**If settlement partner is blank in the IDOC, then the below logic will run
          IF gs_input_data_h-settlement_parnter IS INITIAL.
            IF gs_input_data_h-contract_id IS NOT INITIAL.
              gs_input_data_h-settlement_parnter = gs_input_data_h-contract_id(6).
            ENDIF.
          ENDIF.
**End of code changes INC15773715 by VN50G00
        WHEN lc_agr_hdr1.
          ls_agr_hdr1 = <ls_idoc_data>-sdata.
          MOVE-CORRESPONDING ls_agr_hdr1 TO gs_input_data_h.
        WHEN lc_agr_itm.
          ls_agr_itm = ls_agr_hdr1 = <ls_idoc_data>-sdata.
          MOVE-CORRESPONDING ls_agr_itm TO ls_input_data_i.
          APPEND ls_input_data_i TO gt_idoc_input_i.
        WHEN OTHERS.
      ENDCASE.
      CLEAR: ls_agr_hdr, ls_agr_hdr1, ls_agr_itm.
    ENDLOOP.

    es_idoc_header = gs_input_data_h.
    et_idoc_item = gt_idoc_input_i.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->POPULATE_AGR_HEADER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_AGR_HEADER                  TYPE        ZST_I01081_AGR_HEAD
* | [<---] ES_AGR_HEADER                  TYPE        ZDS_AGR_GEN_INFO
* | [<---] ET_ALLOWANC_DET                TYPE        ZTT_ALLOWANCE_DTL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD populate_agr_header.


    DATA: ls_allowance_details TYPE zds_allowance_dtl.

*Agreement header
    es_agr_header-ctx_va_land1 = is_agr_header-cntry.
    es_agr_header-ctx_va_vendor = is_agr_header-vend_number.
    es_agr_header-ctx_va_location_inp = is_agr_header-location_type.
    es_agr_header-ctx_va_datab = is_agr_header-agr_frm_date.
    es_agr_header-ctx_va_datbi = is_agr_header-agr_to_date.
    es_agr_header-ctx_va_payment_method = is_agr_header-payment_method.
    es_agr_header-ctx_va_pay_term = is_agr_header-payment_term.
    es_agr_header-ctx_va_currency = is_agr_header-currency.
    es_agr_header-ctx_va_cal_id = is_agr_header-settl_calender.
    es_agr_header-ctx_va_sap_set_partnr = is_agr_header-settl_partn.
    es_agr_header-ctx_va_agr_type = is_agr_header-agr_type.

*Allowance data.
    ls_allowance_details-ctx_va_allw_seq = '01'.
    ls_allowance_details-ctx_va_allw_type = is_agr_header-allow_type.
    ls_allowance_details-ctx_va_allw_desc = gv_allow_desc.
    ls_allowance_details-ctx_va_banner_code = 'Multip'.
    ls_allowance_details-ctx_va_valid_from = is_agr_header-allow_frm_date.
    ls_allowance_details-ctx_va_valid_to = is_agr_header-allow_to_date.
    ls_allowance_details-ctx_va_cal_basis = is_agr_header-calc_basis.
    ls_allowance_details-ctx_va_alloc_type = is_agr_header-alloc_type.
    ls_allowance_details-ctx_va_item_basis = is_agr_header-item_basis.
    ls_allowance_details-ctx_va_tiers = is_agr_header-tiers.
    ls_allowance_details-ctx_va_tier_rate_typ = is_agr_header-tier_rate_type.
    ls_allowance_details-ctx_va_scale_typ = is_agr_header-scale_type.
    ls_allowance_details-ctx_va_cur_uom = is_agr_header-currency.
    ls_allowance_details-ctx_va_ret_type = abap_true.
    APPEND ls_allowance_details TO et_allowanc_det.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->POPULATE_ATTACHMENT_RECORDS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_INTERFACE_ID                TYPE        ZD_INTER_ID
* | [--->] IV_COUNTRY                     TYPE        LAND1
* | [--->] IV_DATE                        TYPE        RANGE_T_DATS
* | [<-->] EV_ERROR_STRING                TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD populate_attachment_records.

    DATA: lv_error_temp TYPE string,
          lv_contr_stat TYPE string,
          lv_suppl_stat TYPE string,
          lv_date       TYPE string,
          lv_date_final TYPE string.


    SELECT int_id,
           cntry,
           key_val,
           idoc_num,
           contract_id,
           idocdate
      INTO TABLE @DATA(lt_idoc_err)
      FROM zi01081_agr_err
      WHERE int_id EQ @iv_interface_id AND
            cntry EQ @iv_country AND
            idocdate IN @iv_date.

    IF lt_idoc_err IS NOT INITIAL.
      SORT lt_idoc_err by key_val.
      DELETE ADJACENT DUPLICATES FROM lt_idoc_err COMPARING key_val.
      SELECT idoc_num,
             contract_id,
             contract_stat,
             suppl_stat,
             cntry,
             allow_type_desc,
             allow_frm_date,
             payment_method,
             vend_number,
             settl_partn,
             allow_type_code
        FROM zi01081_agr_hdr
        INTO TABLE @DATA(lt_error)
        FOR ALL ENTRIES IN @lt_idoc_err
        WHERE key_val = @lt_idoc_err-key_val AND
              int_id  = @lt_idoc_err-int_id AND
              idoc_num  = @lt_idoc_err-idoc_num AND
              cntry  = @lt_idoc_err-cntry.

      IF sy-subrc IS INITIAL.
        SORT lt_error by idoc_num.
        LOOP AT lt_error INTO DATA(ls_error).
          lv_contr_stat = ls_error-contract_stat.
          lv_suppl_stat = ls_error-suppl_stat.
          lv_date = ls_error-allow_frm_date.

          IF lv_date IS NOT INITIAL.
            CONCATENATE lv_date+0(4) '-' lv_date+4(2) '-' lv_date+6(2) INTO lv_date_final.
          ENDIF.

          CONCATENATE ls_error-contract_id
                      ls_error-allow_type_code
                      ls_error-vend_number
                      ls_error-idoc_num
                      lv_suppl_stat
                      lv_contr_stat
                      ls_error-cntry
                      ls_error-allow_type_desc
                      lv_date_final
                      ls_error-payment_method
                      ls_error-settl_partn
                      INTO lv_error_temp
                      SEPARATED BY cl_abap_char_utilities=>horizontal_tab.

          CONCATENATE ev_error_string
              lv_error_temp
              cl_abap_char_utilities=>cr_lf
         INTO ev_error_string.

          CLEAR: ls_error,lv_error_temp,lv_contr_stat,lv_suppl_stat,lv_date,lv_date_final.
        ENDLOOP.
      ENDIF.

    ELSE.
      MESSAGE s999(zfap) DISPLAY LIKE 'E'.
      LEAVE LIST-PROCESSING.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->POPULATE_ATTACHMENT_RECORDS_AR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_DATE                        TYPE        SY-DATUM(optional)
* | [--->] IT_STATUS                      TYPE        GTT_STATUS(optional)
* | [<-->] EV_ERROR_STRING                TYPE        STRING(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD populate_attachment_records_ar.
    DATA: lv_error_temp TYPE string,
          lv_date_final TYPE string,
          lv_today_date type string.

    IF iv_date IS NOT INITIAL.
      CONCATENATE iv_date+0(4) '-' iv_date+4(2) '-' iv_date+6(2) INTO lv_date_final.
    ENDIF.

    CONCATENATE sy-datum+0(4) '-' sy-datum+4(2) '-' sy-datum+6(2) INTO lv_today_date.

    LOOP AT it_status INTO DATA(ls_status).

      READ TABLE gt_agr_head_ar INTO DATA(ls_agr_head_ar) WITH KEY knuma_ag = ls_status-agrno.
      IF sy-subrc IS INITIAL.

        CONCATENATE ls_status-agrno
                    ls_agr_head_ar-contract_id
                    ls_agr_head_ar-idoc_num
                    ls_agr_head_ar-cntry
                    ls_agr_head_ar-allow_type_code
                    lv_date_final "Agreement End date
                    lv_today_date "Report run date
                    INTO lv_error_temp SEPARATED BY cl_abap_char_utilities=>horizontal_tab.

        CONCATENATE ev_error_string
              lv_error_temp
              cl_abap_char_utilities=>cr_lf
         INTO ev_error_string.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->PREPARE_AGR_DATA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_CONTROL_DATA                TYPE        EDIDC
* | [--->] IT_IDOC_ITEM                   TYPE        ZTT_I01081_IDOC_ITEM
* | [--->] IS_IDOC_HEADER                 TYPE        ZST_I01081_IDOC_HEAD
* | [<---] ES_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD
* | [<---] ET_AGREEMENT_ITEM              TYPE        ZTT_I01081_AGR_ITEM
* | [<-->] ET_IDOC_STATUS                 TYPE        T_IDOC_STATUS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD prepare_agr_data.

    DATA: lv_leap_date      TYPE sy-datum,
          ls_agr_item       TYPE zi01081_idoc_item,
          lv_suppl_stat(10) TYPE c,
          lv_country        TYPE land1,
          lv_counter_s(2)   TYPE c,
          lo_gce            TYPE REF TO zif_ar_ams_read_gce,
          lv_year           TYPE char4,
          lv_month          TYPE char2,
          lv_date           TYPE char2,
          lv_date_filled    TYPE flag.

    CONSTANTS: lc_zamv           TYPE boart VALUE 'ZAMV',
               lc_sams_loc       TYPE rvari_vnam VALUE 'ZI01081_SAMS_LOC',
               lc_wm_loc         TYPE rvari_vnam VALUE 'ZI01081_WM_LOC',
               lc_cm             TYPE /irm/ip_setlcal VALUE 'CM',
               lc_cy             TYPE /irm/ip_setlcal VALUE 'CY',
               lc_29(2)          TYPE c VALUE '29',
               lc_16(2)          TYPE c VALUE '16',
               lc_30(2)          TYPE c VALUE '30',
               lc_511            TYPE zd_allowcd VALUE '511',
               lc_527            TYPE zd_allowcd VALUE '527',
               lc_vend_name      TYPE ad_namtext VALUE 'MDM Vendor',
               lc_max_purch_amt  TYPE kstbw VALUE '99999999999.00',
               lc_effective_date TYPE rvari_vnam VALUE 'ZI01081_527_EFFEC_DATE'.

    CREATE OBJECT lo_gce TYPE zcl_ar_ams_read_gce.

*Convert the header data
    gs_agr_head_data-contract_id = is_idoc_header-contract_id.
    gs_agr_head_data-contract_stat = is_idoc_header-contract_status+0(1).

    lv_country = gv_land1.
*The Supplier status will be in a combination of number followed by a text.
*Hence extracting the number here
    DATA(lv_len) = strlen( is_idoc_header-supplier_status ).
    DO lv_len TIMES.
      IF is_idoc_header-supplier_status(sy-index) CO '0123456789'.
        CONCATENATE  space is_idoc_header-supplier_status(sy-index) INTO lv_suppl_stat.
        CONDENSE lv_suppl_stat NO-GAPS.
      ENDIF.
    ENDDO.

    gs_agr_head_data-suppl_stat = lv_suppl_stat.
    gs_agr_head_data-auto_renew_ind = abap_true.
    gs_agr_head_data-cntry = is_idoc_header-supplier_country_code.
    gs_agr_head_data-idoc_num = is_control_data-docnum.
    gs_agr_head_data-int_id = gc_i1081.

    IF gs_agr_head_data-cntry IS INITIAL.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = is_control_data-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '449' "Purchasing Org & Purchasing group cant be determined
        CHANGING
          et_idoc_status = et_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = gv_land1
          iv_idoc_num  = is_control_data-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '449'. "Purchasing Org & Purchasing group cant be determined
    ELSE.
      CALL METHOD lo_gce->get_gce_pur_org
        EXPORTING
          iv_land1     = gs_agr_head_data-cntry
        IMPORTING
          ev_purch_grp = DATA(lv_ekgrp)
          ev_purch_org = gs_agr_head_data-purch_org.
      gs_agr_head_data-purch_grp = lv_ekgrp.
*Set language code.
      get_language_from_country( EXPORTING iv_land1 = gs_agr_head_data-cntry ).
    ENDIF.

*Agreement Type
    IF is_idoc_header-agr_type IS INITIAL.
      gs_agr_head_data-agr_type = lc_zamv.
    ELSE.
      gs_agr_head_data-agr_type = is_idoc_header-agr_type.
    ENDIF.


*Agreement description
    gs_agr_head_data-agr_desc = me->get_agr_desc( EXPORTING iv_agr_type = gs_agr_head_data-agr_type ).

*Allowance type code
    gs_agr_head_data-allow_type_code = is_idoc_header-allow_type_code+0(2).


    SELECT name, low INTO TABLE @DATA(lt_tvarvc) FROM tvarvc
      WHERE name EQ @lc_sams_loc OR
            name EQ @lc_wm_loc.

*Settlement calender
    IF is_idoc_header-lgcy_agmt_dept_nbr BETWEEN 00 AND 99.
      IF is_idoc_header-lgcy_agmt_dept_nbr BETWEEN 62 AND 64.

*If the filter is set for SAMS defective allowance, then stop the process.
        IF gs_agr_head_data-allow_type_code EQ lc_16.
          IF zcl_ams_i01081_utilty=>check_sams_filter( ) IS NOT INITIAL.
            gv_sams_filter = abap_true.
          ELSE.
            CLEAR gv_sams_filter.
          ENDIF.
        ENDIF.

        READ TABLE lt_tvarvc INTO DATA(ls_tvarvc) WITH KEY name = lc_sams_loc.
        IF sy-subrc IS INITIAL.
          gs_agr_head_data-location_type = ls_tvarvc-low.
        ELSE.
          gs_agr_head_data-location_type = '100017'. "SAMS Location type
        ENDIF.

        IF is_idoc_header-allow_type_code+0(2) = lc_30.
          gs_agr_head_data-settl_calender = lc_cy.
        ELSEIF is_idoc_header-allow_type_code+0(2) = lc_29 OR
               is_idoc_header-allow_type_code+0(2) = lc_16.
          gs_agr_head_data-settl_calender = lc_cm.
        ELSE.
          DATA(lv_allowance_err) = abap_true.
        ENDIF.
      ELSE.
        READ TABLE lt_tvarvc INTO ls_tvarvc WITH KEY name = lc_wm_loc.
        IF sy-subrc IS INITIAL.
          gs_agr_head_data-location_type = ls_tvarvc-low. "WM Location type
        ELSE.
          gs_agr_head_data-location_type = '100001'. "WM Location type
        ENDIF.

        IF is_idoc_header-allow_type_code+0(2) = lc_30.
          gs_agr_head_data-settl_calender = lc_cy.
        ELSEIF is_idoc_header-allow_type_code+0(2) = lc_29 OR
               is_idoc_header-allow_type_code+0(2) = lc_16.
          gs_agr_head_data-settl_calender = lc_cm.
        ELSE.
          lv_allowance_err = abap_true.
        ENDIF.
      ENDIF.
    ELSE.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = is_control_data-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '451' "Invalid legacy agreement department number
        CHANGING
          et_idoc_status = et_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = lv_country
          iv_idoc_num  = is_control_data-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '451'. "Invalid legacy agreement department number
    ENDIF.


    IF lv_allowance_err IS NOT INITIAL.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = is_control_data-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '462' "Invalid allowance type
        CHANGING
          et_idoc_status = et_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = lv_country
          iv_idoc_num  = is_control_data-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '462'. "Invalid allowance type
    ENDIF.


    IF gv_sams_filter IS NOT INITIAL.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = is_control_data-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '479' "AMS will not consider Sam's Defective allowance agreements
        CHANGING
          et_idoc_status = et_idoc_status.
* Begin of cange KCHAND7 | DR7K915565 | 06-Aug-2018
* Idoc will be ignored and the error table will not be updated
*      CALL METHOD me->add_err_message
*        EXPORTING
*          iv_cntry     = lv_country
*          iv_idoc_num  = is_control_data-docnum
*          iv_mtype     = 'E'
*          iv_msg_class = gc_zfap
*          iv_msg_num   = '479'. "AMS will not consider Sam's Defective allowance agreements
    ENDIF.
*End   of cange KCHAND7 | DR7K915565 | 06-Aug-2018

    gs_agr_head_data-merch_hier = is_idoc_header-lgcy_agmt_dept_nbr.

*Check if the initial load flag is set.
    SELECT name, low INTO TABLE @DATA(lt_tvarvc_init)
       FROM tvarvc WHERE name EQ @gc_initial_load.


    READ TABLE lt_tvarvc_init INTO DATA(ls_tvarvc_init) WITH KEY  name = gc_initial_load.
*If the Initial Load flag is set
    IF ls_tvarvc_init-low IS NOT INITIAL.
      gv_init_load_flag = abap_true.
*SAMS monthly agreement the effective date is 1-April-2018.
      IF gs_agr_head_data-merch_hier BETWEEN 62 AND 64 AND ( gs_agr_head_data-allow_type_code EQ lc_29  OR
                                                             gs_agr_head_data-allow_type_code EQ lc_16 ).

        IF gs_agr_head_data-allow_type_code EQ lc_16.
          is_idoc_header-allowance_effective_date+0(10) = '2018-05-01'.  "SAMS Defective will begin from May.
        ELSE.
          is_idoc_header-allowance_effective_date+0(10) = '2018-04-01'.
        ENDIF.
        gv_sams = abap_true.

*WM Monthy agreement, the effective date is beginning of current month.
      ELSEIF gs_agr_head_data-merch_hier NOT BETWEEN 62 AND 64 AND ( gs_agr_head_data-allow_type_code EQ lc_29  OR
                                                                     gs_agr_head_data-allow_type_code EQ lc_16 ).
        IF gs_agr_head_data-allow_type_code EQ lc_16.
          is_idoc_header-allowance_effective_date+0(10) = '2018-05-01'.  "WM Defective will begin from May.
        ELSE.
          is_idoc_header-allowance_effective_date+8(2) = '01'.          "Date
          is_idoc_header-allowance_effective_date+5(2) = sy-datum+4(2). "Current month
          is_idoc_header-allowance_effective_date+0(4) = sy-datum+0(4). "year
        ENDIF.
        gv_wm = abap_true.

*Yearly agreement, the effective date is beginning of current year + 365/366 days
      ELSEIF gs_agr_head_data-allow_type_code EQ '30'.
        gv_yearly = abap_true.
        is_idoc_header-allowance_effective_date+8(2) = '01'. "Date
        is_idoc_header-allowance_effective_date+5(2) = '01'. "Month
        is_idoc_header-allowance_effective_date+0(4) = sy-datum+0(4). "year
      ENDIF.

    ELSE.
      CLEAR gv_init_load_flag.
    ENDIF.

*Agreement valid from date
    DATA(lv_valid_frm_raw) = is_idoc_header-allowance_effective_date+0(10).
    REPLACE ALL OCCURRENCES OF '-' IN lv_valid_frm_raw WITH space.
    CONDENSE lv_valid_frm_raw.
*Begin of changes INC12831256
** For defective allowance type 527 the agreements needs to created from July 1,2020 and not from the past**
    SELECT SINGLE name, low INTO @DATA(ls_tvarvc_effec) FROM tvarvc
    WHERE name EQ @lc_effective_date.
    IF gs_agr_head_data-allow_type_code = '16'
  AND gs_agr_head_data-location_type = '100017'
  AND lv_valid_frm_raw < ls_tvarvc_effec-low.
      is_idoc_header-allowance_effective_date = ls_tvarvc_effec-low.
      gs_agr_head_data-agr_frm_date = is_idoc_header-allowance_effective_date.
    ELSE .
      gs_agr_head_data-agr_frm_date = lv_valid_frm_raw.
    ENDIF.
*End of changes INC12831256

    CALL FUNCTION 'DATE_CHECK_PLAUSIBILITY'
      EXPORTING
        date                      = gs_agr_head_data-agr_frm_date
      EXCEPTIONS
        plausibility_check_failed = 1
        OTHERS                    = 2.

    IF sy-subrc <> 0.
*      DATA(lv_date_error) = abap_true.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = is_control_data-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '437' "Agreement valid from date is invalid
        CHANGING
          et_idoc_status = et_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = lv_country
          iv_idoc_num  = is_control_data-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '437'. "Agreement valid from date is invalid

    ELSE.
*Valid from will always be from beginning of the current month
      gv_idoc_eff_date = gs_agr_head_data-agr_frm_date.
      gs_agr_head_data-idoc_eff_date = gv_idoc_eff_date.
*      gs_agr_head_data-agr_frm_date+6(2) = '01'.
*      gs_agr_head_data-allow_frm_date = gs_agr_head_data-agr_frm_date.

*Determine Agreement valid to date
      IF is_idoc_header-allow_type_code+0(2) EQ lc_29 OR   "Monthly Agreement
         is_idoc_header-allow_type_code+0(2) EQ lc_16.     "Monthly Agreement - Defective allowance

        gs_agr_head_data-agr_frm_date+6(2) = '01'.
        gs_agr_head_data-allow_frm_date = gs_agr_head_data-agr_frm_date.

        CALL FUNCTION 'LAST_DAY_OF_MONTHS'
          EXPORTING
            day_in            = gs_agr_head_data-agr_frm_date
          IMPORTING
            last_day_of_month = gs_agr_head_data-agr_to_date
          EXCEPTIONS
            day_in_no_date    = 1
            OTHERS            = 2.

      ELSEIF is_idoc_header-allow_type_code+0(2) EQ lc_30. "Yearly agreement

        gs_agr_head_data-allow_frm_date = gs_agr_head_data-agr_frm_date.

        lv_year = gs_agr_head_data-agr_frm_date+0(4).
        lv_month = gs_agr_head_data-agr_frm_date+4(2).
        lv_date = gs_agr_head_data-agr_frm_date+6(2).

        CALL METHOD me->calc_end_date
          IMPORTING
            ev_end_date = gs_agr_head_data-agr_to_date
          CHANGING
            iv_month    = lv_month
            iv_date     = lv_date
            iv_year     = lv_year.
      ENDIF.

*Agreement to date & allowance to date is same.
      gs_agr_head_data-allow_to_date = gs_agr_head_data-agr_to_date.
    ENDIF.

*payment method
"Begin of change for MDM enhancement - ALLOW-2603
  DATA(lv_payment_method) = is_idoc_header-allow_pymt_mthd_cd.
  SHIFT lv_payment_method LEFT DELETING LEADING '0'.
"End of change for MDM enhancement - ALLOW-2603
    IF lv_payment_method EQ '1'."IF is_idoc_header-allow_pymt_mthd_cd+0(1) EQ '1'. Commented for GSM enhancement - ALLOW-2603
      gs_agr_head_data-payment_method  = space.
    ELSEIF lv_payment_method EQ '3'. "ELSEIF is_idoc_header-allow_pymt_mthd_cd+0(1) EQ '3'. Commented for GSM enhancement - ALLOW-2603
      gs_agr_head_data-payment_method  = 'U'.
    ELSE.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = is_control_data-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '464' "Invalid Payment Method
        CHANGING
          et_idoc_status = et_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = lv_country
          iv_idoc_num  = is_control_data-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '464'. "Invalid Payment Method
    ENDIF.

*Payment terms
    IF is_idoc_header-payment_term IS INITIAL.
      gs_agr_head_data-payment_term = 'Z000'.
    ELSE.
      gs_agr_head_data-payment_term = is_idoc_header-payment_term.
    ENDIF.

*Get Vendor Number
    gs_agr_head_data-vend_number = is_idoc_header-vendor_number.

*Get settlement Partner
    gs_agr_head_data-settl_partn = is_idoc_header-settlement_parnter.

*Allowance type
    IF is_idoc_header-allow_type_code+0(2) = lc_29 OR
       is_idoc_header-allow_type_code+0(2) = lc_30.
      gs_agr_head_data-allow_type = lc_511.   "Volume fundamental
    ELSEIF is_idoc_header-allow_type_code+0(2) = lc_16.
      gs_agr_head_data-allow_type = lc_527.   "Defective Allowance
    ELSE.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = is_control_data-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '465' "Invalid Allowance Type
        CHANGING
          et_idoc_status = et_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = lv_country
          iv_idoc_num  = is_control_data-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '465'. "Invalid Allowance Type
    ENDIF.

**Allowance description
    gs_agr_head_data-allow_type_desc = is_idoc_header-allow_type_desc.
    SHIFT gs_agr_head_data-allow_type_desc BY 4 PLACES.

*Updated Date
    DATA(lv_upddt) = is_idoc_header-upddt.
    REPLACE ALL OCCURRENCES OF '-' IN lv_upddt WITH space.
    CONDENSE lv_upddt.
    gs_agr_head_data-upddt = lv_upddt.

*Updated time
    DATA(lv_updtm) = is_idoc_header-updtm.
    REPLACE: ALL OCCURRENCES OF ':' IN lv_updtm WITH space,
             ALL OCCURRENCES OF '.' IN lv_updtm WITH space.
    CONDENSE lv_updtm.
    gs_agr_head_data-updtm = lv_updtm.

    IF is_idoc_header-calc_basis IS INITIAL.
      gs_agr_head_data-calc_basis = 'R'.     "Receiving
    ELSE.
      gs_agr_head_data-calc_basis =  is_idoc_header-calc_basis.
    ENDIF.


    IF is_idoc_header-item_basis IS INITIAL.
      gs_agr_head_data-item_basis = 'G'.     "Group of items
    ELSE.
      gs_agr_head_data-item_basis = is_idoc_header-item_basis.
    ENDIF.

    IF is_idoc_header-tiers IS INITIAL.
      gs_agr_head_data-tiers = 'B'.          "Amount
    ELSE.
      gs_agr_head_data-tiers = is_idoc_header-tiers.
    ENDIF.
    IF is_idoc_header-tier_rate_type IS INITIAL.
      gs_agr_head_data-tier_rate_type = 'A'. "Percentage
    ELSE.
      gs_agr_head_data-tier_rate_type = is_idoc_header-tier_rate_type.
    ENDIF.

    IF is_idoc_header-scale_type IS INITIAL.
      gs_agr_head_data-scale_type = 'B'.     "Retro to Nil
    ELSE.
      gs_agr_head_data-scale_type = is_idoc_header-scale_type.
    ENDIF.

    gs_agr_head_data-currency = is_idoc_header-currency.


    IF is_idoc_header-allocation_type IS INITIAL.
      gs_agr_head_data-alloc_type = '1'.     "All Stores
    ELSE.
      gs_agr_head_data-alloc_type =  is_idoc_header-allocation_type.
    ENDIF.

*For Banner & region we are defaulting to all if the idoc does not have
*any values. Also they are determined when the condition records are formed
*Hence adding 'ALL' to to HDR table.
    IF is_idoc_header-banner IS INITIAL.
      gs_agr_head_data-banner = 'ALL'.
    ELSE.
      gs_agr_head_data-banner = is_idoc_header-banner.
    ENDIF.


    IF is_idoc_header-region IS INITIAL.
      gs_agr_head_data-region = 'ALL'.
    ELSE.
      gs_agr_head_data-region = is_idoc_header-region.
    ENDIF.

*Buyer
    gs_agr_head_data-buyer = is_idoc_header-buyer.
    gs_agr_head_data-rl_vendor = is_idoc_header-retail_link_vendor.
    gs_agr_head_data-nrl_vendor = is_idoc_header-non_retail_link.

    IF is_idoc_header-vend_name IS NOT INITIAL.
      gs_agr_head_data-vend_name = is_idoc_header-vend_name.
    ELSE.
      gs_agr_head_data-vend_name = lc_vend_name.
    ENDIF.

    gs_agr_head_data-vend_email = is_idoc_header-vend_email.
    gs_agr_head_data-vend_phone = is_idoc_header-vend_phone.
    gs_agr_head_data-vend_fax  = is_idoc_header-vend_fax.
    gs_agr_head_data-vend_contact = is_idoc_header-vend_contact.
    gs_agr_head_data-created_date = sy-datum.
    gs_agr_head_data-created_time = sy-uzeit.


    es_agreement_header = gs_agr_head_data.

*Tiers
    IF it_idoc_item IS INITIAL.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = is_control_data-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '436' "Tiers are empty
        CHANGING
          et_idoc_status = et_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = lv_country
          iv_idoc_num  = is_control_data-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '436'. "Tiers are empty
    ELSE.
      LOOP AT it_idoc_item ASSIGNING FIELD-SYMBOL(<ls_idoc_item>).
        ls_agr_item-interface_id = gc_i1081.
        ls_agr_item-item_no = ls_agr_item-item_no + 1.
        ls_agr_item-idoc_num = is_control_data-docnum.
        ls_agr_item-cntry = is_idoc_header-supplier_country_code.


        ASSIGN COMPONENT 'MIN_PURCHASE_AMOUNT' OF STRUCTURE <ls_idoc_item> TO FIELD-SYMBOL(<lv_purch_amt>).
        IF <lv_purch_amt> IS ASSIGNED.
          ls_agr_item-min_purch_amt = <lv_purch_amt>.
        ENDIF.

        UNASSIGN <lv_purch_amt>.
        ASSIGN COMPONENT 'MAX_PURCHASE_AMOUNT' OF STRUCTURE <ls_idoc_item> TO <lv_purch_amt>.
        IF <lv_purch_amt> IS ASSIGNED.
          ls_agr_item-max_purch_amt = <lv_purch_amt>.
          IF ls_agr_item-max_purch_amt GT lc_max_purch_amt.
            ls_agr_item-max_purch_amt = lc_max_purch_amt.
          ENDIF.
        ENDIF.

        UNASSIGN <lv_purch_amt>.
        ASSIGN COMPONENT 'REBATE_RATE' OF STRUCTURE <ls_idoc_item> TO <lv_purch_amt>.
        IF <lv_purch_amt> IS ASSIGNED.
          ls_agr_item-rebate_rate = <lv_purch_amt>.
        ENDIF.

        APPEND ls_agr_item TO et_agreement_item.
      ENDLOOP.


      IF et_idoc_status IS NOT INITIAL.
        LOOP AT et_idoc_status INTO DATA(ls_idoc_status).
          CALL METHOD me->add_err_message
            EXPORTING
              iv_cntry     = lv_country
              iv_idoc_num  = is_control_data-docnum
              iv_mtype     = ls_idoc_status-msgty
              iv_msg_class = gc_zfap
              iv_msg_num   = ls_idoc_status-msgno
              iv_variant_1 = ls_idoc_status-msgv1
              iv_variant_2 = ls_idoc_status-msgv2
              iv_variant_3 = ls_idoc_status-msgv3
              iv_variant_4 = ls_idoc_status-msgv4.
        ENDLOOP.
      ENDIF.

      gt_tier_data = et_agreement_item.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->READ_AGREEMENT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_GUID                        TYPE        SYSUUID_C32
* | [--->] IV_INT_ID                      TYPE        ZD_INTER_ID
* | [<---] ES_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD
* | [<---] ET_AGREEMENT_ITEM              TYPE        ZTT_I01081_AGR_ITEM
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD read_agreement.



*Check if the intital load flag is set or not.
    SELECT SINGLE name, low FROM tvarvc  INTO @DATA(ls_tvarvc)
      WHERE name EQ @gc_initial_load.

    IF sy-subrc IS INITIAL.
      IF ls_tvarvc-low IS NOT INITIAL.
        gv_init_load_flag = abap_true.
      ELSE.
        CLEAR gv_init_load_flag.
      ENDIF.
    ENDIF.

*Fetch the agreement
    SELECT key_val UP TO 1 ROWS
      INTO @DATA(lv_guid) FROM zi01081_agr_err
      WHERE key_val EQ @iv_guid.
    ENDSELECT.

    IF sy-subrc IS INITIAL.
      SELECT SINGLE * INTO @DATA(ls_agr_head)
        FROM zi01081_agr_hdr WHERE
        key_val EQ @lv_guid AND
        int_id EQ @iv_int_id.
      IF sy-subrc IS INITIAL.

        SELECT * INTO TABLE @DATA(lt_agr_item)
          FROM zi01081_agr_itm
          WHERE key_val EQ @iv_guid AND
          int_id EQ @iv_int_id.
        IF sy-subrc IS INITIAL.
          MOVE-CORRESPONDING ls_agr_head TO es_agreement_header.
          SORT lt_agr_item BY key_val item_no.
          MOVE-CORRESPONDING lt_agr_item TO et_agreement_item.
          gv_guid = iv_guid. "The GUID will not be regenerated in case of reprocess
          gv_land1 = es_agreement_header-cntry.
        ENDIF.
      ENDIF.
    ELSE.
      RETURN.
    ENDIF.





  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->SAVE_COMMENTS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_OBJTYP                      TYPE        OJ_NAME
* | [--->] IV_OBJID                       TYPE        OBJNUM
* | [--->] IV_COMMENT_TYPE                TYPE        /IRM/GNOTYP
* | [--->] IT_COMMENT                     TYPE        STRING_TABLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD save_comments.


    DATA: ls_comments TYPE /irm/s_gnote,
          lt_comments TYPE /irm/t_gnote,
          lt_notes    TYPE /irm/t_gnote.

*Get the Comment text.
    ls_comments-notyp = iv_comment_type.

    SELECT SINGLE descr
         FROM /irm/tgntdt
         INTO ls_comments-descr
         WHERE spras EQ sy-langu
           AND notyp = ls_comments-notyp.

    IF sy-subrc <> 0.
      CLEAR ls_comments-descr.
    ENDIF.

    IF it_comment IS NOT INITIAL.
      ls_comments-aenam  = gc_batch.
      ls_comments-aedat  = sy-datum.
      ls_comments-aezet  = sy-uzeit.
      ls_comments-line[] = it_comment[].
      ls_comments-notyp = iv_comment_type.
      ls_comments-updkz = 'I'.

      APPEND ls_comments TO lt_comments[].
    ENDIF.

    CALL FUNCTION '/IRM/G_NOTES_REFRESH'
      EXPORTING
        i_objtyp = iv_objtyp
        i_objkey = iv_objid.

*--Call the Read notes FM, This populates the buffer table with agreement request number
    CALL FUNCTION '/IRM/G_NOTES_READ'
      EXPORTING
        i_objtyp = iv_objtyp
        i_objkey = iv_objid
        i_subobj = ' '
      TABLES
        t_notes  = lt_notes.
    IF lt_notes IS NOT INITIAL.
      APPEND LINES OF lt_notes TO lt_comments.
    ENDIF.

    CALL FUNCTION '/IRM/G_NOTES_BUFFER_ADD'
      EXPORTING
        i_objtyp         = iv_objtyp
        i_objkey         = iv_objid
        i_subobj         = ' '
        it_notes         = lt_comments
      EXCEPTIONS
        object_not_found = 1
        OTHERS           = 2.
    IF sy-subrc EQ 0.
*--Save the notes to the data base
      CALL FUNCTION '/IRM/G_NOTES_SAVE'
        EXPORTING
          i_objtyp      = iv_objtyp
          i_objkey      = iv_objid
          i_subobj      = ' '
          i_commit      = 'X'
          i_update_task = ' '.

    ELSE.
*--Raise Exception
      RAISE EXCEPTION TYPE zcx_ar_ams_agr_exceptions
        EXPORTING
          textid = zcx_ar_ams_agr_exceptions=>notes_not_saved.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->SEND_EMAIL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ATTACHMENT                  TYPE        STRING
* | [--->] IT_RECIPIENT                   TYPE        ZTT_I01081_IDOC_EMAIL
* | [--->] IT_BODY                        TYPE        SOLI_TAB
* | [--->] IV_SUBJECT                     TYPE        SO_OBJ_DES
* | [--->] IV_TITLE                       TYPE        SO_OBJ_DES
* | [<---] EV_EMAIL_FLAG                  TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD send_email.



    TRY.

        cl_bcs_convert=>string_to_solix(
                       EXPORTING
                         iv_string   = iv_attachment
                         iv_codepage = '4103'
                         iv_add_bom  = abap_true
                       IMPORTING
                         et_solix    = DATA(lt_contents_hex)
                         ev_size     = DATA(lv_size) ).
*     Create request.
        DATA(lo_send_request) = cl_bcs=>create_persistent( ).

*     Create the body of the e-mail.
        DATA(lo_document) = cl_document_bcs=>create_document(
                        i_type    = 'RAW'
                        i_text    = it_body
                        i_subject = iv_subject ).

*     Create e-mail attachment.
        lo_document->add_attachment(
                      EXPORTING
                        i_attachment_type     = 'XLS'
                        i_attachment_subject  = iv_title
                        i_attachment_size     = lv_size
                        i_att_content_hex     = lt_contents_hex ).

        lo_send_request->set_document( i_document = lo_document ).

        LOOP AT it_recipient INTO DATA(ls_recipient).

          DATA(lo_recepient) = cl_cam_address_bcs=>create_internet_address( i_address_string = ls_recipient-email ).
          lo_send_request->add_recipient( lo_recepient ).
          CLEAR: lo_recepient.
        ENDLOOP.

        ev_email_flag = lo_send_request->send( i_with_error_screen = 'X' ).

        COMMIT WORK.

      CATCH cx_send_req_bcs
            cx_address_bcs
            cx_document_bcs
            cx_bcs.
        ev_email_flag = abap_false.

    ENDTRY.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->SET_AGREEMENT_CONTRACT_MODE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_AGREEMENT_ITEM              TYPE        ZTT_I01081_AGR_ITEM(optional)
* | [<---] ET_MODE                        TYPE        ZTT_MDM_AGR_MODE
* | [<-->] CS_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD(optional)
* | [<-->] CT_IDOC_STATUS                 TYPE        T_IDOC_STATUS(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_agreement_contract_mode.


    DATA: lt_konw     TYPE /irm/t_gkonw,
          lt_agr_hdr  TYPE TABLE OF gty_agr,
          ls_mode     TYPE zst_mdm_agr_mode,
          ld_e_monate TYPE string,
          lv_agr_ok   TYPE flag,
          lt_mode     TYPE ztt_mdm_agr_mode,
          lv_variant  TYPE symsgv,
          lv_msg      TYPE edi_stapa1,
          lv_ustat    TYPE j_estat.



    DATA(lv_ustat_cr) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                         iv_txt04 = zcl_ar_ams_user_status=>gc_agreq_ar_apr ).

    DATA(lv_ustat_ch) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                       iv_txt04 = 'CAAP' ).

    DATA(lv_ustat_cn) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                      iv_txt04 = zcl_ar_ams_user_status=>gc_agreq_cancelled ).

    DATA(lv_ustat_cn_pend) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                      iv_txt04 = 'CANP' ).

    DATA(lv_ustat_par_cn_pend) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                      iv_txt04 = 'PCNP' ).


*See if the agreement is avalable for the contract
    SELECT a~key_val,
           a~allow_type_code,
           b~idoc_num,
           b~contract_id,
           b~int_id,
           b~cntry,
           b~knuma_ag,
           b~created_date,
           b~created_time,
           b~agr_status
       FROM zi01081_agr_hdr AS a
      INNER JOIN zi01081_mdm_agr AS b
      ON a~int_id EQ b~int_id AND
         a~idoc_num = b~idoc_num  AND
         a~cntry = b~cntry AND
         a~contract_id = b~contract_id AND
         a~allow_type_code = b~allow_type_code AND
         a~vend_number = b~vend_number
      INTO TABLE @gt_agr_hdr
      WHERE a~contract_id = @cs_agreement_header-contract_id
        AND a~int_id = @cs_agreement_header-int_id
        AND b~allow_type_code = @cs_agreement_header-allow_type_code
        AND b~vend_number = @cs_agreement_header-vend_number
        AND b~agr_status = @lv_ustat_cr.


    IF sy-subrc IS INITIAL AND gv_init_load_flag IS INITIAL.
      SORT gt_agr_hdr BY knuma_ag DESCENDING.

*Get the status of the agreement.
      SELECT knuma_ag ustat ident FROM /irm/ipprasp
        INTO TABLE gt_agr_stat FOR ALL ENTRIES IN gt_agr_hdr
        WHERE knuma_ag = gt_agr_hdr-knuma_ag AND
              deleted = abap_false.

*remove the cancelled & Partially cancelled agreement
      DELETE gt_agr_stat WHERE ustat EQ lv_ustat_cn OR
                               ustat EQ lv_ustat_cn_pend OR
                               ustat EQ lv_ustat_par_cn_pend.

      IF gt_agr_stat IS NOT INITIAL.
*Get the agreements that have the end date greater than the effective date.
*We need to change that aggreements only.
        SELECT knuma datab datbi zlsch FROM kona INTO TABLE
        gt_kona FOR ALL ENTRIES IN gt_agr_stat
        WHERE knuma EQ gt_agr_stat-knuma_ag AND
              datbi GE cs_agreement_header-agr_frm_date.
        IF sy-subrc IS NOT INITIAL.
*For changes effective from future month, the query has to be done with endate GT todays date
          SELECT knuma datab datbi zlsch FROM kona INTO TABLE
            gt_kona FOR ALL ENTRIES IN gt_agr_stat
            WHERE knuma EQ gt_agr_stat-knuma_ag AND
                  datbi GT sy-datum.
          DATA(lv_future_month) = abap_true.
        ENDIF.

        IF gt_kona[] IS INITIAL.
          IF ( cs_agreement_header-contract_stat EQ gc_cont_stat_val OR
               cs_agreement_header-suppl_stat EQ gc_suppl_stat_val ).
            ls_mode-agr_mode = gc_create.
            APPEND ls_mode TO et_mode.
          ELSE.
            CALL METHOD me->add_idoc_status
              EXPORTING
                iv_docnum      = gs_idoc_control-docnum
                iv_status      = gc_68
                iv_msgty       = 'E'
                iv_msgid       = gc_zfap
                iv_msgno       = '461' "Invalid Supplier / Contractor status
              CHANGING
                et_idoc_status = ct_idoc_status.

            CALL METHOD me->add_err_message
              EXPORTING
                iv_cntry     = cs_agreement_header-cntry
                iv_idoc_num  = gs_idoc_control-docnum
                iv_mtype     = 'E'
                iv_msg_class = gc_zfap
                iv_msg_num   = '461'. "Invalid Supplier / Contractor status
          ENDIF.
        ELSE.

          SELECT idoc_num, contract_id
            FROM zi01081_mdm_agr
              INTO TABLE @DATA(lt_agr_change)
            FOR ALL ENTRIES IN @gt_kona
             WHERE knuma_ag = @gt_kona-knuma_ag.
          IF sy-subrc IS INITIAL.
*Get the agreement from the header & item table to compare (Change Scenario).
            SELECT * INTO TABLE gt_agr_header FROM zi01081_agr_hdr
             FOR ALL ENTRIES IN lt_agr_change WHERE idoc_num EQ lt_agr_change-idoc_num AND
                                                    contract_id EQ  lt_agr_change-contract_id AND
                                                    is_error EQ abap_false.
            IF sy-subrc IS INITIAL.
              SELECT * INTO TABLE gt_agr_tier FROM zi01081_agr_itm
              FOR ALL ENTRIES IN gt_agr_header WHERE key_val EQ gt_agr_header-key_val AND
                                                     int_id EQ gt_agr_header-int_id AND
                                                     idoc_num EQ gt_agr_header-idoc_num.
            ENDIF.
          ENDIF.

          SORT gt_agr_header DESCENDING.

          IF cs_agreement_header-allow_type_code EQ '30'.
            CALL METHOD me->check_from_date_yearly
              IMPORTING
                ev_valid            = DATA(lv_valid_yr)
              CHANGING
                cs_agreement_header = cs_agreement_header
                et_idoc_status      = ct_idoc_status.
          ENDIF.



*IF the IDoc effective date is in the future, then make sure to change the latest month agreement.
*Because the auto renew program ran and would have created multiple agreements and all those will
*be picked up.
          IF lv_future_month EQ abap_true.
            SORT gt_kona BY databi DESCENDING.
            READ TABLE gt_kona INTO DATA(ls_kona) INDEX 1.
            DELETE gt_kona WHERE knuma_ag NE ls_kona-knuma_ag.
            CLEAR ls_kona.
          ENDIF.

          LOOP AT gt_kona INTO ls_kona.
**During the change mode, if the effective date is before 12 months then error out.
*
*            IF cs_agreement_header-allow_type_code EQ '29' OR cs_agreement_header-allow_type_code EQ '16'.
*              DATA(ld_i_datum_bis) = sy-datum.
*              DATA(ld_i_datum_von) = gv_idoc_eff_date.
*
*              CALL FUNCTION 'MONTHS_BETWEEN_TWO_DATES'
*                EXPORTING
*                  i_datum_bis = ld_i_datum_bis
*                  i_datum_von = ld_i_datum_von
*                IMPORTING
*                  e_monate    = ld_e_monate.
*              IF ld_e_monate GT 11.
*                CALL METHOD me->add_idoc_status
*                  EXPORTING
*                    iv_docnum      = gs_idoc_control-docnum
*                    iv_status      = gc_68
*                    iv_msgty       = 'E'
*                    iv_msgid       = gc_zfap
*                    iv_msgno       = '471' "Effective date should be with in 12 months
*                  CHANGING
*                    et_idoc_status = ct_idoc_status.
*
*                CALL METHOD me->add_err_message
*                  EXPORTING
*                    iv_cntry     = cs_agreement_header-cntry
*                    iv_idoc_num  = gs_idoc_control-docnum
*                    iv_mtype     = 'E'
*                    iv_msg_class = gc_zfap
*                    iv_msg_num   = '471'. "Effective date should be with in 12 months
*                RETURN.
*              ENDIF.
*            ENDIF.

            READ TABLE gt_agr_stat INTO DATA(ls_agr_stat) WITH KEY
                                      knuma_ag = ls_kona-knuma_ag.
            READ TABLE gt_agr_hdr INTO DATA(ls_agr_head) WITH KEY knuma_ag = ls_kona-knuma_ag.
            IF sy-subrc IS INITIAL.
              ls_mode-knuma_ag = ls_kona-knuma_ag.
              ls_mode-key_val = ls_agr_head-key_val.

*check the actual status of the agreement. If its in other than approved & change approved then
*its a create state
              IF ls_agr_stat-ustat EQ lv_ustat_cr OR
                 ls_agr_stat-ustat EQ lv_ustat_ch.

*Check the status of the contractor & supplier.
                IF cs_agreement_header-contract_stat NE gc_cont_stat_val OR
                   cs_agreement_header-suppl_stat NE gc_suppl_stat_val.
                  gv_stop = abap_true.
                ENDIF.

                ls_mode-agr_mode = gc_cancel.
*If its a calender change then, its a change
                IF ls_agr_stat-ident NE cs_agreement_header-settl_calender.
                  ls_mode-agr_mode = gc_change.
                ENDIF.
              ELSE.
*If the current state of the agreement is cancel, then a new agreement has to be created.
                ls_mode-agr_mode = gc_create.
              ENDIF.
            ENDIF.

*check if the Agreement that is going to be changed is the latest one.
            READ TABLE gt_agr_hdr INTO DATA(ls_agr_hdr) WITH KEY knuma_ag = ls_kona-knuma_ag
                                    TRANSPORTING idoc_num.
            IF sy-subrc IS INITIAL.
              READ TABLE gt_agr_header INTO DATA(ls_agr_header) WITH KEY idoc_num = ls_agr_hdr-idoc_num
                                    TRANSPORTING upddt updtm.
              IF sy-subrc IS INITIAL.
*If the updated date of the agreement is greater than the updated date of the IDoc, then ignore
                IF ls_agr_header-upddt GT cs_agreement_header-upddt.
                  CONTINUE.
                ELSEIF ls_agr_header-upddt EQ cs_agreement_header-upddt.
                  IF ls_agr_header-updtm GT cs_agreement_header-updtm.
                    CONTINUE.
                  ENDIF.
                ENDIF.

              ENDIF.
            ENDIF.

*Check if the IDoc & the agreement has the same fields. If so ignore the IDoc.
            IF    ( ls_mode-agr_mode = gc_change OR
                   ls_mode-agr_mode = gc_cancel ).

              CALL METHOD me->check_agr_changed
                EXPORTING
                  is_kona             = ls_kona
                  is_agreement_header = cs_agreement_header
                  it_agreement_item   = it_agreement_item
                IMPORTING
                  ev_changed          = DATA(lv_changed).

*If its a current month and if there is any change made to the agreement, then proceed with change
              IF lv_changed IS NOT INITIAL.
                APPEND ls_mode TO et_mode.
              ENDIF.
            ELSE.
              APPEND ls_mode TO et_mode.
            ENDIF.
*For stop agreement, set the end date as sy-datum. For that we need to get the agreement
*that is valid for this month.
            IF gv_stop IS NOT INITIAL OR gv_pay_meth_ch IS NOT INITIAL.
              IF sy-datum BETWEEN ls_kona-datab AND ls_kona-databi.
              "Start of changes for 2000045857: AMS China: MDM Error handling
                SELECT ustat FROM /irm/ipprasp INTO lv_ustat
                            WHERE knuma_ag = ls_kona-knuma_ag AND
                                  deleted = abap_false.
                ENDSELECT.
                 IF lv_ustat EQ lv_ustat_cr.
              "End of changes for 2000045857: AMS China: MDM Error handling
                   APPEND ls_mode TO lt_mode.
                 ENDIF.
              ENDIF.
            ENDIF.

            CLEAR: ls_kona,ls_mode.

          ENDLOOP.
        ENDIF.
      ELSE.
        IF ( cs_agreement_header-contract_stat EQ gc_cont_stat_val OR
         cs_agreement_header-suppl_stat EQ gc_suppl_stat_val ).
          ls_mode-agr_mode = gc_create.
          APPEND ls_mode TO et_mode.
        ELSE.
*All the agreements are in the cancelled status. Hence throw the error.
          CALL METHOD me->add_idoc_status
            EXPORTING
              iv_docnum      = gs_idoc_control-docnum
              iv_status      = gc_68
              iv_msgty       = 'E'
              iv_msgid       = gc_zfap
              iv_msgno       = '473' "All the agreeents are in cancelled status
            CHANGING
              et_idoc_status = ct_idoc_status.

          CALL METHOD me->add_err_message
            EXPORTING
              iv_cntry     = cs_agreement_header-cntry
              iv_idoc_num  = gs_idoc_control-docnum
              iv_mtype     = 'E'
              iv_msg_class = gc_zfap
              iv_msg_num   = '473'. "All the agreeents are in cancelled status.
        ENDIF.
      ENDIF.
    ELSE.
*if the agreement is not available in the MDM Error table, then
*is create scenario.
      IF cs_agreement_header-contract_stat NE gc_cont_stat_val OR
         cs_agreement_header-suppl_stat NE gc_suppl_stat_val.
* Begin of cange KCHAND7 | DR7K915565 | 06-Aug-2018
*When a contract comes with the status inactive /  delete, we are skipping
*that IDoc
        CLEAR et_mode[].
        CALL METHOD me->add_idoc_status
          EXPORTING
            iv_docnum      = gs_idoc_control-docnum
            iv_status      = gc_68
            iv_msgty       = 'E'
            iv_msgid       = gc_zfap
            iv_msgno       = '511' "Agreement cannot be created due to Contract/Supplier status
          CHANGING
            et_idoc_status = ct_idoc_status.
*
*        CALL METHOD me->add_err_message
*          EXPORTING
*            iv_cntry     = cs_agreement_header-cntry
*            iv_idoc_num  = gs_idoc_control-docnum
*            iv_mtype     = 'E'
*            iv_msg_class = gc_zfap
*            iv_msg_num   = '461'. "Invalid Supplier / Contractor status
*End   of cange KCHAND7 | DR7K915565 | 06-Aug-2018
      ELSE.
*During Create yearly agreement, the effective date should be 01/01/current year.
        IF cs_agreement_header-allow_type_code EQ '30'.
          CALL METHOD me->check_from_date_yearly
            IMPORTING
              ev_valid            = lv_valid_yr
            CHANGING
              cs_agreement_header = cs_agreement_header
              et_idoc_status      = ct_idoc_status.
        ENDIF.

        ls_mode-agr_mode = gc_create.
        APPEND ls_mode TO et_mode.
      ENDIF.
    ENDIF.

*For stop scenario, no matter what the effective date is, the agreement for the
*current month has to be stopped.(Change-Approved)
    IF gv_stop IS NOT INITIAL OR gv_pay_meth_ch IS NOT INITIAL.
      DELETE ct_idoc_status WHERE msgno = '480'.

      IF lt_mode IS NOT INITIAL.
        CLEAR: et_mode,ls_mode.
        APPEND LINES OF lt_mode TO et_mode.
        READ TABLE lt_mode INTO ls_mode INDEX 1.
        DELETE gt_kona WHERE knuma_ag NE ls_mode-knuma_ag. "Removing the agreements from KONA, so that will not cause trouble when looping

      ELSE.
       "Commented for 2000047787, AMS China: New MDM Error handling to skip this message
*        CALL METHOD me->add_idoc_status
*          EXPORTING
*            iv_docnum      = gs_idoc_control-docnum
*            iv_status      = gc_68
*            iv_msgty       = 'E'
*            iv_msgid       = gc_zfap
*            iv_msgno       = '477' "No agreement found to stop / Update
*          CHANGING
*            et_idoc_status = ct_idoc_status.

*        CALL METHOD me->add_err_message
*          EXPORTING
*            iv_cntry     = cs_agreement_header-cntry
*            iv_idoc_num  = gs_idoc_control-docnum
*            iv_mtype     = 'E'
*            iv_msg_class = gc_zfap
*            iv_msg_num   = '477'. "No agreement found to stop / Update
        "End of Comments for 2000047787, AMS China: New MDM Error handling to skip this message

        CLEAR et_mode. "Added for 2000047787, AMS China: New MDM Error handling to skip this message
      ENDIF.
    ELSE.
*For change scenario, If the effective date is before the actual agreement start date, then error it
*      SORT gt_kona[] BY datab.
*      CLEAR ls_kona.
*      READ TABLE gt_kona INTO ls_kona INDEX 1.

*      IF cs_agreement_header-idoc_eff_date LT ls_kona-datab.
*        lv_variant = ls_kona-knuma_ag.
*        lv_msg = ls_kona-knuma_ag.
*
*        CALL METHOD me->add_idoc_status
*          EXPORTING
*            iv_docnum      = gs_idoc_control-docnum
*            iv_status      = gc_68
*            iv_msgty       = 'E'
*            iv_msgid       = gc_zfap
*            iv_msgno       = '476' "Effective date must be greater than start date of agreement &
*            iv_msgv1       = lv_msg
*          CHANGING
*            et_idoc_status = ct_idoc_status.
*
*        CALL METHOD me->add_err_message
*          EXPORTING
*            iv_cntry     = cs_agreement_header-cntry
*            iv_idoc_num  = gs_idoc_control-docnum
*            iv_mtype     = 'E'
*            iv_msg_class = gc_zfap
*            iv_msg_num   = '476' "Effective date must be greater than start date of agreement &
*            iv_variant_1 = lv_variant.
*      ENDIF.
    ENDIF.
    SORT gt_kona[] BY knuma_ag.

*Agreement reactivate - Monthly
    IF cs_agreement_header-allow_type_code = '16' OR
      cs_agreement_header-allow_type_code = '29'.
      READ TABLE et_mode WITH KEY agr_mode = 'N' TRANSPORTING NO FIELDS.
      IF sy-subrc IS NOT INITIAL.
        CALL METHOD me->check_reactivate_contract
          EXPORTING
            is_agreement_header = cs_agreement_header.
      ENDIF.
    ENDIF.

"Start of chnages for 2000045857, AMS China: MDM Error handling
"To remove error during no change scenario for yearly agreement validation
    IF et_mode[] IS INITIAL.
      DELETE ct_idoc_status WHERE msgno = '480'.
    ENDIF.
"End of chnages for 2000045857, AMS China: MDM Error handling


*During the change mode, if the effective date is before 12 months then error out.
*For Deletion scenario as only change and New agreements are considered previously
    IF et_mode[] IS NOT INITIAL
      AND gv_stop IS INITIAL."Changes done by VN50G00 for charm #2000037914

      READ TABLE et_mode WITH KEY agr_mode = 'N' TRANSPORTING NO FIELDS.

      IF sy-subrc IS NOT INITIAL AND
        ( cs_agreement_header-allow_type_code EQ '29' OR cs_agreement_header-allow_type_code EQ '16' ).
        DATA(ld_i_datum_bis) = sy-datum.
        DATA(ld_i_datum_von) = gv_idoc_eff_date.

        CALL FUNCTION 'MONTHS_BETWEEN_TWO_DATES'
          EXPORTING
            i_datum_bis = ld_i_datum_bis
            i_datum_von = ld_i_datum_von
          IMPORTING
            e_monate    = ld_e_monate.
        IF ld_e_monate GT 11.
          CALL METHOD me->add_idoc_status
            EXPORTING
              iv_docnum      = gs_idoc_control-docnum
              iv_status      = gc_68
              iv_msgty       = 'E'
              iv_msgid       = gc_zfap
              iv_msgno       = '471' "Effective date should be with in 12 months
            CHANGING
              et_idoc_status = ct_idoc_status.

          CALL METHOD me->add_err_message
            EXPORTING
              iv_cntry     = cs_agreement_header-cntry
              iv_idoc_num  = gs_idoc_control-docnum
              iv_mtype     = 'E'
              iv_msg_class = gc_zfap
              iv_msg_num   = '471'. "Effective date should be with in 12 months
        ENDIF.

*For change scenario, If the effective date is before the actual agreement start date, then error it
        SORT gt_kona[] BY datab.
        CLEAR ls_kona.
        READ TABLE gt_kona INTO ls_kona INDEX 1.

        IF cs_agreement_header-idoc_eff_date LT ls_kona-datab.
          lv_variant = ls_kona-knuma_ag.
          lv_msg = ls_kona-knuma_ag.

          CALL METHOD me->add_idoc_status
            EXPORTING
              iv_docnum      = gs_idoc_control-docnum
              iv_status      = gc_68
              iv_msgty       = 'E'
              iv_msgid       = gc_zfap
              iv_msgno       = '476' "Effective date must be greater than start date of agreement &
              iv_msgv1       = lv_msg
            CHANGING
              et_idoc_status = ct_idoc_status.

          CALL METHOD me->add_err_message
            EXPORTING
              iv_cntry     = cs_agreement_header-cntry
              iv_idoc_num  = gs_idoc_control-docnum
              iv_mtype     = 'E'
              iv_msg_class = gc_zfap
              iv_msg_num   = '476' "Effective date must be greater than start date of agreement &
              iv_variant_1 = lv_variant.
        ENDIF.
        SORT gt_kona[] BY knuma_ag.
      ENDIF.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->SET_AGREEMENT_MODE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_AGREEMENT_ITEM              TYPE        ZTT_I01081_AGR_ITEM(optional)
* | [<---] ET_MODE                        TYPE        ZTT_MDM_AGR_MODE
* | [<-->] CS_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD(optional)
* | [<-->] CT_IDOC_STATUS                 TYPE        T_IDOC_STATUS(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_agreement_mode.


    DATA: lt_konw     TYPE /irm/t_gkonw,
          lt_agr_hdr  TYPE TABLE OF gty_agr,
          ls_mode     TYPE zst_mdm_agr_mode,
          ld_e_monate TYPE string,
          lv_agr_ok   TYPE flag,
          lt_mode     TYPE ztt_mdm_agr_mode,
          lv_variant  TYPE symsgv,
          lv_msg      TYPE edi_stapa1,
          lv_ustat    TYPE j_estat.



    DATA(lv_ustat_cr) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                         iv_txt04 = zcl_ar_ams_user_status=>gc_agreq_ar_apr ).

    DATA(lv_ustat_ch) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                       iv_txt04 = 'CAAP' ).

    DATA(lv_ustat_cn) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                      iv_txt04 = zcl_ar_ams_user_status=>gc_agreq_cancelled ).

    DATA(lv_ustat_cn_pend) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                      iv_txt04 = 'CANP' ).

    DATA(lv_ustat_par_cn_pend) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                      iv_txt04 = 'PCNP' ).


*See if the agreement is avalable for the contract
    SELECT a~key_val,
           a~allow_type_code,
           b~idoc_num,
           b~contract_id,
           b~int_id,
           b~cntry,
           b~knuma_ag,
           b~created_date,
           b~created_time,
           b~agr_status
       FROM zi01081_agr_hdr AS a
      INNER JOIN zi01081_mdm_agr AS b
      ON a~int_id EQ b~int_id AND
         a~idoc_num = b~idoc_num  AND
         a~cntry = b~cntry AND
         a~contract_id = b~contract_id AND
         a~allow_type_code = b~allow_type_code AND
         a~vend_number = b~vend_number
      INTO TABLE @gt_agr_hdr
      WHERE a~contract_id = @cs_agreement_header-contract_id
        AND a~int_id = @cs_agreement_header-int_id
        AND b~allow_type_code = @cs_agreement_header-allow_type_code
        AND b~vend_number = @cs_agreement_header-vend_number
        AND b~agr_status = @lv_ustat_cr.


    IF sy-subrc IS INITIAL AND gv_init_load_flag IS INITIAL.
      SORT gt_agr_hdr BY knuma_ag DESCENDING.

*Get the status of the agreement.
      SELECT knuma_ag ustat ident FROM /irm/ipprasp
        INTO TABLE gt_agr_stat FOR ALL ENTRIES IN gt_agr_hdr
        WHERE knuma_ag = gt_agr_hdr-knuma_ag AND
              deleted = abap_false.

*remove the cancelled & Partially cancelled agreement
      DELETE gt_agr_stat WHERE ustat EQ lv_ustat_cn OR
                               ustat EQ lv_ustat_cn_pend OR
                               ustat EQ lv_ustat_par_cn_pend.

      IF gt_agr_stat IS NOT INITIAL.
*Get the agreements that have the end date greater than the effective date.
*We need to change that aggreements only.
        SELECT knuma datab datbi zlsch FROM kona INTO TABLE
        gt_kona FOR ALL ENTRIES IN gt_agr_stat
        WHERE knuma EQ gt_agr_stat-knuma_ag AND
              datbi GE cs_agreement_header-agr_frm_date.
        IF sy-subrc IS NOT INITIAL.
*For changes effective from future month, the query has to be done with endate GT todays date
          SELECT knuma datab datbi zlsch FROM kona INTO TABLE
            gt_kona FOR ALL ENTRIES IN gt_agr_stat
            WHERE knuma EQ gt_agr_stat-knuma_ag AND
                  datbi GT sy-datum.
          DATA(lv_future_month) = abap_true.
        ENDIF.

        IF gt_kona[] IS INITIAL.
          IF ( cs_agreement_header-contract_stat EQ '1' OR
               cs_agreement_header-suppl_stat EQ '100001' ).
            ls_mode-agr_mode = gc_create.
            APPEND ls_mode TO et_mode.
          ELSE.
            CALL METHOD me->add_idoc_status
              EXPORTING
                iv_docnum      = gs_idoc_control-docnum
                iv_status      = gc_68
                iv_msgty       = 'E'
                iv_msgid       = gc_zfap
                iv_msgno       = '461' "Invalid Supplier / Contractor status
              CHANGING
                et_idoc_status = ct_idoc_status.

            CALL METHOD me->add_err_message
              EXPORTING
                iv_cntry     = cs_agreement_header-cntry
                iv_idoc_num  = gs_idoc_control-docnum
                iv_mtype     = 'E'
                iv_msg_class = gc_zfap
                iv_msg_num   = '461'. "Invalid Supplier / Contractor status
          ENDIF.
        ELSE.

          SELECT idoc_num, contract_id
            FROM zi01081_mdm_agr
              INTO TABLE @DATA(lt_agr_change)
            FOR ALL ENTRIES IN @gt_kona
             WHERE knuma_ag = @gt_kona-knuma_ag.
          IF sy-subrc IS INITIAL.
*Get the agreement from the header & item table to compare (Change Scenario).
            SELECT * INTO TABLE gt_agr_header FROM zi01081_agr_hdr
             FOR ALL ENTRIES IN lt_agr_change WHERE idoc_num EQ lt_agr_change-idoc_num AND
                                                    contract_id EQ  lt_agr_change-contract_id AND
                                                    is_error EQ abap_false.
            IF sy-subrc IS INITIAL.
              SELECT * INTO TABLE gt_agr_tier FROM zi01081_agr_itm
              FOR ALL ENTRIES IN gt_agr_header WHERE key_val EQ gt_agr_header-key_val AND
                                                     int_id EQ gt_agr_header-int_id AND
                                                     idoc_num EQ gt_agr_header-idoc_num.
            ENDIF.
          ENDIF.

          SORT gt_agr_header DESCENDING.

          IF cs_agreement_header-allow_type_code EQ '30'.
            CALL METHOD me->check_from_date_yearly
              IMPORTING
                ev_valid            = DATA(lv_valid_yr)
              CHANGING
                cs_agreement_header = cs_agreement_header
                et_idoc_status      = ct_idoc_status.
          ENDIF.



*IF the IDoc effective date is in the future, then make sure to change the latest month agreement.
*Because the auto renew program ran and would have created multiple agreements and all those will
*be picked up.
          IF lv_future_month EQ abap_true.
            SORT gt_kona BY databi DESCENDING.
            READ TABLE gt_kona INTO DATA(ls_kona) INDEX 1.
            DELETE gt_kona WHERE knuma_ag NE ls_kona-knuma_ag.
            CLEAR ls_kona.
          ENDIF.

          LOOP AT gt_kona INTO ls_kona.
**During the change mode, if the effective date is before 12 months then error out.
*
*            IF cs_agreement_header-allow_type_code EQ '29' OR cs_agreement_header-allow_type_code EQ '16'.
*              DATA(ld_i_datum_bis) = sy-datum.
*              DATA(ld_i_datum_von) = gv_idoc_eff_date.
*
*              CALL FUNCTION 'MONTHS_BETWEEN_TWO_DATES'
*                EXPORTING
*                  i_datum_bis = ld_i_datum_bis
*                  i_datum_von = ld_i_datum_von
*                IMPORTING
*                  e_monate    = ld_e_monate.
*              IF ld_e_monate GT 11.
*                CALL METHOD me->add_idoc_status
*                  EXPORTING
*                    iv_docnum      = gs_idoc_control-docnum
*                    iv_status      = gc_68
*                    iv_msgty       = 'E'
*                    iv_msgid       = gc_zfap
*                    iv_msgno       = '471' "Effective date should be with in 12 months
*                  CHANGING
*                    et_idoc_status = ct_idoc_status.
*
*                CALL METHOD me->add_err_message
*                  EXPORTING
*                    iv_cntry     = cs_agreement_header-cntry
*                    iv_idoc_num  = gs_idoc_control-docnum
*                    iv_mtype     = 'E'
*                    iv_msg_class = gc_zfap
*                    iv_msg_num   = '471'. "Effective date should be with in 12 months
*                RETURN.
*              ENDIF.
*            ENDIF.

            READ TABLE gt_agr_stat INTO DATA(ls_agr_stat) WITH KEY
                                      knuma_ag = ls_kona-knuma_ag.
            READ TABLE gt_agr_hdr INTO DATA(ls_agr_head) WITH KEY knuma_ag = ls_kona-knuma_ag.
            IF sy-subrc IS INITIAL.
              ls_mode-knuma_ag = ls_kona-knuma_ag.
              ls_mode-key_val = ls_agr_head-key_val.

*check the actual status of the agreement. If its in other than approved & change approved then
*its a create state
              IF ls_agr_stat-ustat EQ lv_ustat_cr OR
                 ls_agr_stat-ustat EQ lv_ustat_ch.

*Check the status of the contractor & supplier.
                IF cs_agreement_header-contract_stat NE '1' OR
                   cs_agreement_header-suppl_stat NE '100001'.
                  gv_stop = abap_true.
                ENDIF.

                ls_mode-agr_mode = gc_cancel.
*If its a calender change then, its a change
                IF ls_agr_stat-ident NE cs_agreement_header-settl_calender.
                  ls_mode-agr_mode = gc_change.
                ENDIF.
              ELSE.
*If the current state of the agreement is cancel, then a new agreement has to be created.
                ls_mode-agr_mode = gc_create.
              ENDIF.
            ENDIF.

*check if the Agreement that is going to be changed is the latest one.
            READ TABLE gt_agr_hdr INTO DATA(ls_agr_hdr) WITH KEY knuma_ag = ls_kona-knuma_ag
                                    TRANSPORTING idoc_num.
            IF sy-subrc IS INITIAL.
              READ TABLE gt_agr_header INTO DATA(ls_agr_header) WITH KEY idoc_num = ls_agr_hdr-idoc_num
                                    TRANSPORTING upddt updtm.
              IF sy-subrc IS INITIAL.
*If the updated date of the agreement is greater than the updated date of the IDoc, then ignore
                IF ls_agr_header-upddt GT cs_agreement_header-upddt.
                  CONTINUE.
                ELSEIF ls_agr_header-upddt EQ cs_agreement_header-upddt.
                  IF ls_agr_header-updtm GT cs_agreement_header-updtm.
                    CONTINUE.
                  ENDIF.
                ENDIF.

              ENDIF.
            ENDIF.

*Check if the IDoc & the agreement has the same fields. If so ignore the IDoc.
            IF    ( ls_mode-agr_mode = gc_change OR
                   ls_mode-agr_mode = gc_cancel ).

              CALL METHOD me->check_agr_changed
                EXPORTING
                  is_kona             = ls_kona
                  is_agreement_header = cs_agreement_header
                  it_agreement_item   = it_agreement_item
                IMPORTING
                  ev_changed          = DATA(lv_changed).

*If its a current month and if there is any change made to the agreement, then proceed with change
              IF lv_changed IS NOT INITIAL.
                APPEND ls_mode TO et_mode.
              ENDIF.
            ELSE.
              APPEND ls_mode TO et_mode.
            ENDIF.
*For stop agreement, set the end date as sy-datum. For that we need to get the agreement
*that is valid for this month.
            IF gv_stop IS NOT INITIAL OR gv_pay_meth_ch IS NOT INITIAL.
              IF sy-datum BETWEEN ls_kona-datab AND ls_kona-databi.
              "Start of changes for 2000045857: AMS China: MDM Error handling
                SELECT ustat FROM /irm/ipprasp INTO lv_ustat
                            WHERE knuma_ag = ls_kona-knuma_ag AND
                                  deleted = abap_false.
                ENDSELECT.
                 IF lv_ustat EQ lv_ustat_cr.
              "End of changes for 2000045857: AMS China: MDM Error handling
                   APPEND ls_mode TO lt_mode.
                 ENDIF.
              ENDIF.
            ENDIF.

            CLEAR: ls_kona,ls_mode.

          ENDLOOP.
        ENDIF.
      ELSE.
        IF ( cs_agreement_header-contract_stat EQ '1' OR
         cs_agreement_header-suppl_stat EQ '100001' ).
          ls_mode-agr_mode = gc_create.
          APPEND ls_mode TO et_mode.
        ELSE.
*All the agreements are in the cancelled status. Hence throw the error.
          CALL METHOD me->add_idoc_status
            EXPORTING
              iv_docnum      = gs_idoc_control-docnum
              iv_status      = gc_68
              iv_msgty       = 'E'
              iv_msgid       = gc_zfap
              iv_msgno       = '473' "All the agreeents are in cancelled status
            CHANGING
              et_idoc_status = ct_idoc_status.

          CALL METHOD me->add_err_message
            EXPORTING
              iv_cntry     = cs_agreement_header-cntry
              iv_idoc_num  = gs_idoc_control-docnum
              iv_mtype     = 'E'
              iv_msg_class = gc_zfap
              iv_msg_num   = '473'. "All the agreeents are in cancelled status.
        ENDIF.
      ENDIF.
    ELSE.
*if the agreement is not available in the MDM Error table, then
*is create scenario.
      IF cs_agreement_header-contract_stat NE '1' OR
         cs_agreement_header-suppl_stat NE '100001'.
* Begin of cange KCHAND7 | DR7K915565 | 06-Aug-2018
*When a contract comes with the status inactive /  delete, we are skipping
*that IDoc
        CLEAR et_mode[].
        CALL METHOD me->add_idoc_status
          EXPORTING
            iv_docnum      = gs_idoc_control-docnum
            iv_status      = gc_68
            iv_msgty       = 'E'
            iv_msgid       = gc_zfap
            iv_msgno       = '511' "Agreement cannot be created due to Contract/Supplier status
          CHANGING
            et_idoc_status = ct_idoc_status.
*
*        CALL METHOD me->add_err_message
*          EXPORTING
*            iv_cntry     = cs_agreement_header-cntry
*            iv_idoc_num  = gs_idoc_control-docnum
*            iv_mtype     = 'E'
*            iv_msg_class = gc_zfap
*            iv_msg_num   = '461'. "Invalid Supplier / Contractor status
*End   of cange KCHAND7 | DR7K915565 | 06-Aug-2018
      ELSE.
*During Create yearly agreement, the effective date should be 01/01/current year.
        IF cs_agreement_header-allow_type_code EQ '30'.
          CALL METHOD me->check_from_date_yearly
            IMPORTING
              ev_valid            = lv_valid_yr
            CHANGING
              cs_agreement_header = cs_agreement_header
              et_idoc_status      = ct_idoc_status.
        ENDIF.

        ls_mode-agr_mode = gc_create.
        APPEND ls_mode TO et_mode.
      ENDIF.
    ENDIF.

*For stop scenario, no matter what the effective date is, the agreement for the
*current month has to be stopped.(Change-Approved)
    IF gv_stop IS NOT INITIAL OR gv_pay_meth_ch IS NOT INITIAL.
      DELETE ct_idoc_status WHERE msgno = '480'.

      IF lt_mode IS NOT INITIAL.
        CLEAR: et_mode,ls_mode.
        APPEND LINES OF lt_mode TO et_mode.
        READ TABLE lt_mode INTO ls_mode INDEX 1.
        DELETE gt_kona WHERE knuma_ag NE ls_mode-knuma_ag. "Removing the agreements from KONA, so that will not cause trouble when looping

      ELSE.
       "Commented for 2000047787, AMS China: New MDM Error handling to skip this message
*        CALL METHOD me->add_idoc_status
*          EXPORTING
*            iv_docnum      = gs_idoc_control-docnum
*            iv_status      = gc_68
*            iv_msgty       = 'E'
*            iv_msgid       = gc_zfap
*            iv_msgno       = '477' "No agreement found to stop / Update
*          CHANGING
*            et_idoc_status = ct_idoc_status.

*        CALL METHOD me->add_err_message
*          EXPORTING
*            iv_cntry     = cs_agreement_header-cntry
*            iv_idoc_num  = gs_idoc_control-docnum
*            iv_mtype     = 'E'
*            iv_msg_class = gc_zfap
*            iv_msg_num   = '477'. "No agreement found to stop / Update
        "End of Comments for 2000047787, AMS China: New MDM Error handling to skip this message

        CLEAR et_mode. "Added for 2000047787, AMS China: New MDM Error handling to skip this message
      ENDIF.
    ELSE.
*For change scenario, If the effective date is before the actual agreement start date, then error it
*      SORT gt_kona[] BY datab.
*      CLEAR ls_kona.
*      READ TABLE gt_kona INTO ls_kona INDEX 1.

*      IF cs_agreement_header-idoc_eff_date LT ls_kona-datab.
*        lv_variant = ls_kona-knuma_ag.
*        lv_msg = ls_kona-knuma_ag.
*
*        CALL METHOD me->add_idoc_status
*          EXPORTING
*            iv_docnum      = gs_idoc_control-docnum
*            iv_status      = gc_68
*            iv_msgty       = 'E'
*            iv_msgid       = gc_zfap
*            iv_msgno       = '476' "Effective date must be greater than start date of agreement &
*            iv_msgv1       = lv_msg
*          CHANGING
*            et_idoc_status = ct_idoc_status.
*
*        CALL METHOD me->add_err_message
*          EXPORTING
*            iv_cntry     = cs_agreement_header-cntry
*            iv_idoc_num  = gs_idoc_control-docnum
*            iv_mtype     = 'E'
*            iv_msg_class = gc_zfap
*            iv_msg_num   = '476' "Effective date must be greater than start date of agreement &
*            iv_variant_1 = lv_variant.
*      ENDIF.
    ENDIF.
    SORT gt_kona[] BY knuma_ag.

*Agreement reactivate - Monthly
    IF cs_agreement_header-allow_type_code = '16' OR
      cs_agreement_header-allow_type_code = '29'.
      READ TABLE et_mode WITH KEY agr_mode = 'N' TRANSPORTING NO FIELDS.
      IF sy-subrc IS NOT INITIAL.
        CALL METHOD me->check_reactivate
          EXPORTING
            is_agreement_header = cs_agreement_header.
      ENDIF.
    ENDIF.

"Start of chnages for 2000045857, AMS China: MDM Error handling
"To remove error during no change scenario for yearly agreement validation
    IF et_mode[] IS INITIAL.
      DELETE ct_idoc_status WHERE msgno = '480'.
    ENDIF.
"End of chnages for 2000045857, AMS China: MDM Error handling


*During the change mode, if the effective date is before 12 months then error out.
*For Deletion scenario as only change and New agreements are considered previously
    IF et_mode[] IS NOT INITIAL
      AND gv_stop IS INITIAL."Changes done by VN50G00 for charm #2000037914

      READ TABLE et_mode WITH KEY agr_mode = 'N' TRANSPORTING NO FIELDS.

      IF sy-subrc IS NOT INITIAL AND
        ( cs_agreement_header-allow_type_code EQ '29' OR cs_agreement_header-allow_type_code EQ '16' ).
        DATA(ld_i_datum_bis) = sy-datum.
        DATA(ld_i_datum_von) = gv_idoc_eff_date.

        CALL FUNCTION 'MONTHS_BETWEEN_TWO_DATES'
          EXPORTING
            i_datum_bis = ld_i_datum_bis
            i_datum_von = ld_i_datum_von
          IMPORTING
            e_monate    = ld_e_monate.
        IF ld_e_monate GT 11.
          CALL METHOD me->add_idoc_status
            EXPORTING
              iv_docnum      = gs_idoc_control-docnum
              iv_status      = gc_68
              iv_msgty       = 'E'
              iv_msgid       = gc_zfap
              iv_msgno       = '471' "Effective date should be with in 12 months
            CHANGING
              et_idoc_status = ct_idoc_status.

          CALL METHOD me->add_err_message
            EXPORTING
              iv_cntry     = cs_agreement_header-cntry
              iv_idoc_num  = gs_idoc_control-docnum
              iv_mtype     = 'E'
              iv_msg_class = gc_zfap
              iv_msg_num   = '471'. "Effective date should be with in 12 months
        ENDIF.

*For change scenario, If the effective date is before the actual agreement start date, then error it
        SORT gt_kona[] BY datab.
        CLEAR ls_kona.
        READ TABLE gt_kona INTO ls_kona INDEX 1.

        IF cs_agreement_header-idoc_eff_date LT ls_kona-datab.
          lv_variant = ls_kona-knuma_ag.
          lv_msg = ls_kona-knuma_ag.

          CALL METHOD me->add_idoc_status
            EXPORTING
              iv_docnum      = gs_idoc_control-docnum
              iv_status      = gc_68
              iv_msgty       = 'E'
              iv_msgid       = gc_zfap
              iv_msgno       = '476' "Effective date must be greater than start date of agreement &
              iv_msgv1       = lv_msg
            CHANGING
              et_idoc_status = ct_idoc_status.

          CALL METHOD me->add_err_message
            EXPORTING
              iv_cntry     = cs_agreement_header-cntry
              iv_idoc_num  = gs_idoc_control-docnum
              iv_mtype     = 'E'
              iv_msg_class = gc_zfap
              iv_msg_num   = '476' "Effective date must be greater than start date of agreement &
              iv_variant_1 = lv_variant.
        ENDIF.
        SORT gt_kona[] BY knuma_ag.
      ENDIF.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->SET_AGREEMENT_STOP_MODE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD
* | [<---] ET_MODE                        TYPE        ZTT_MDM_AGR_MODE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_agreement_stop_mode.
    DATA: ls_mode     TYPE zst_mdm_agr_mode.


    DATA(lv_ustat_cr) = zcl_ar_ams_user_status=>get_internal_user_status( iv_stsma = zcl_ar_ams_user_status=>gc_ag_stsma
                                                                         iv_txt04 = zcl_ar_ams_user_status=>gc_agreq_ar_apr ).


*See if the agreement is avalable for the contract
    SELECT a~key_val,
           a~allow_type_code,
           b~idoc_num,
           b~contract_id,
           b~int_id,
           b~cntry,
           b~knuma_ag,
           b~created_date,
           b~created_time,
           b~agr_status
       FROM zi01081_agr_hdr AS a
      INNER JOIN zi01081_mdm_agr AS b
      ON a~int_id EQ b~int_id AND
         a~idoc_num = b~idoc_num  AND
         a~cntry = b~cntry AND
         a~contract_id = b~contract_id AND
         a~allow_type_code = b~allow_type_code AND
         a~vend_number = b~vend_number
      INTO TABLE @gt_agr_hdr
      WHERE a~contract_id = @is_agreement_header-contract_id
        AND a~int_id = @is_agreement_header-int_id
        AND b~allow_type_code = @is_agreement_header-allow_type_code
        AND b~vend_number = @is_agreement_header-vend_number
        AND b~agr_status = @lv_ustat_cr.


    IF sy-subrc IS INITIAL AND gv_init_load_flag IS INITIAL.
      READ TABLE gt_agr_stat_del INTO DATA(ls_agr_stat_del) WITH KEY knuma_ag = is_agreement_header-knuma_ag.
      IF sy-subrc = 0.
        APPEND ls_agr_stat_del TO gt_agr_stat.
        READ TABLE gt_kona_del INTO DATA(ls_kona_del) WITH KEY knuma_ag = ls_agr_stat_del-knuma_ag.
        IF sy-subrc = 0 AND ls_kona_del-datab LE is_agreement_header-agr_to_date AND ls_kona_del-databi GT is_agreement_header-agr_to_date.
          APPEND ls_kona_del TO gt_kona.
          CLEAR : gv_mdm_agr_del.
          ls_mode-knuma_ag = is_agreement_header-knuma_ag.
          ls_mode-key_val = is_agreement_header-key_val.
          ls_mode-agr_mode = gc_cancel.
          gv_stop = abap_true.
          gv_mdm_agr_del = abap_true.
          gv_land1 = 'CN'.
          gv_guid = is_agreement_header-key_val.
          APPEND ls_mode TO et_mode.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->SET_EMAIL_DETAILS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_INTERFACE_ID                TYPE        ZD_INTER_ID(optional)
* | [--->] IV_DATE                        TYPE        RANGE_T_DATS(optional)
* | [<---] EV_SUBJECT                     TYPE        SO_OBJ_DES
* | [<---] EV_TITLE                       TYPE        SO_OBJ_DES
* | [<---] ET_BODY                        TYPE        SOLI_TAB
* | [<-->] EV_ATTACHMENT_HEADER           TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_email_details.

    DATA: lv_title      TYPE so_obj_des,
          ls_body_line  TYPE LINE OF soli_tab,
          lv_date       TYPE string,
          lv_date_final TYPE string,
          lt_lines      TYPE TABLE OF tline.

    CONSTANTS: lc_body   TYPE tdobname VALUE 'ZFAP_I01081_MDM_ERR_MAIL',
               lc_subj   TYPE tdobname VALUE 'ZFAP_I01081_MDM_MAIL_SUB',
               lc_fname  TYPE tdobname VALUE 'ZFAP_I01081_MDM_FILE_NAME',
               lc_object TYPE tdobject VALUE 'TEXT'.

*Get the email subject.
    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        client                  = sy-mandt
        id                      = 'ST'
        language                = sy-langu
        name                    = lc_subj
        object                  = lc_object
      TABLES
        lines                   = lt_lines
      EXCEPTIONS
        id                      = 1
        language                = 2
        name                    = 3
        not_found               = 4
        object                  = 5
        reference_check         = 6
        wrong_access_to_archive = 7
        OTHERS                  = 8.
    IF sy-subrc <> 0.
      ev_subject = ev_title = lv_title = 'Allowance error report for I01081'.
    ENDIF.

    LOOP AT lt_lines INTO DATA(ls_lines).
      CONCATENATE ls_lines-tdline lv_title INTO lv_title SEPARATED BY space.
      CONDENSE lv_title.
      ev_subject = lv_title.
    ENDLOOP.


    CLEAR lt_lines.
*Get the File Name
    CLEAR lt_lines.
    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        client                  = sy-mandt
        id                      = 'ST'
        language                = sy-langu
        name                    = lc_fname
        object                  = lc_object
      TABLES
        lines                   = lt_lines
      EXCEPTIONS
        id                      = 1
        language                = 2
        name                    = 3
        not_found               = 4
        object                  = 5
        reference_check         = 6
        wrong_access_to_archive = 7
        OTHERS                  = 8.
    IF sy-subrc <> 0.
      ev_subject = ev_title = lv_title = 'I01081 – Agreement error report.xls'.
    ENDIF.

    CLEAR lv_title.
    LOOP AT lt_lines INTO ls_lines.
      CONCATENATE ls_lines-tdline '.xls' INTO lv_title.
      CONDENSE lv_title.
      ev_title = lv_title.
    ENDLOOP.


    READ TABLE iv_date INTO DATA(ls_date) INDEX 1.
    lv_date = ls_date-low.
    CONCATENATE lv_date+0(4) '-' lv_date+4(2) '-' lv_date+6(2) INTO lv_date_final.


    CLEAR lt_lines.
*Email body
    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        client                  = sy-mandt
        id                      = 'ST'
        language                = sy-langu
        name                    = lc_body
        object                  = lc_object
      TABLES
        lines                   = lt_lines
      EXCEPTIONS
        id                      = 1
        language                = 2
        name                    = 3
        not_found               = 4
        object                  = 5
        reference_check         = 6
        wrong_access_to_archive = 7
        OTHERS                  = 8.
    IF sy-subrc <> 0.
      CONCATENATE text-013 text-014 INTO ls_body_line SEPARATED BY space.
      REPLACE FIRST OCCURRENCE OF '&' IN ls_body_line WITH lv_date_final.
    ENDIF.

    LOOP AT lt_lines INTO ls_lines.
      CONCATENATE ls_body_line ls_lines-tdline INTO ls_body_line SEPARATED BY space.
      condense ls_body_line.
      REPLACE FIRST OCCURRENCE OF '&' IN ls_body_line WITH lv_date_final.
    ENDLOOP.
    APPEND ls_body_line TO et_body.


    CONCATENATE   'Contract ID'(001)
                  'Allowance Type Code'(012)
                  'Legacy Vendor Number'(009)
                  'IDoc Number'(015)
                  'Supplier Status'(002)
                  'Contract Status'(003)
                  'Country'(004)
                  'Allowance Type Desc '(005)
                  'Allowance Effective date'(006)
                  'Allowance Payment method'(008)
                  'Settlement Partner'(010)
                   INTO ev_attachment_header
                   SEPARATED BY cl_abap_char_utilities=>horizontal_tab.

    CONCATENATE ev_attachment_header cl_abap_char_utilities=>cr_lf INTO ev_attachment_header.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->SET_EMAIL_DETAILS_AR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_DATE                        TYPE        SY-DATUM(optional)
* | [<---] EV_SUBJECT                     TYPE        SO_OBJ_DES
* | [<---] EV_TITLE                       TYPE        SO_OBJ_DES
* | [<---] ET_BODY                        TYPE        SOLI_TAB
* | [<-->] EV_ATTACHMENT_HEADER           TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_email_details_ar.

    DATA: lv_title      TYPE so_obj_des,
          ls_body_line  TYPE LINE OF soli_tab,
          lv_date       TYPE string,
          lv_date_final TYPE string,
          lt_lines      TYPE TABLE OF tline.

    CONSTANTS: lc_body   TYPE tdobname VALUE 'ZFAP_I01081_MDM_AR_MAIL',
               lc_subj   TYPE tdobname VALUE 'ZFAP_I01081_MDM_AR_SUB',
               lc_fname  TYPE tdobname VALUE 'ZFAP_I01081_AR_FILE_NAME',
               lc_object TYPE tdobject VALUE 'TEXT'.

*Get the email subject.
    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        client                  = sy-mandt
        id                      = 'ST'
        language                = sy-langu
        name                    = lc_subj
        object                  = lc_object
      TABLES
        lines                   = lt_lines
      EXCEPTIONS
        id                      = 1
        language                = 2
        name                    = 3
        not_found               = 4
        object                  = 5
        reference_check         = 6
        wrong_access_to_archive = 7
        OTHERS                  = 8.
    IF sy-subrc <> 0.
      ev_subject = ev_title = lv_title = 'Auto renew error report for I01081'.
    ENDIF.

    LOOP AT lt_lines INTO DATA(ls_lines).
      CONCATENATE ls_lines-tdline lv_title INTO lv_title SEPARATED BY space.
      CONDENSE lv_title.
      ev_subject = lv_title.
    ENDLOOP.

    CLEAR lt_lines.
*Get the File Name
    CLEAR lt_lines.
    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        client                  = sy-mandt
        id                      = 'ST'
        language                = sy-langu
        name                    = lc_fname
        object                  = lc_object
      TABLES
        lines                   = lt_lines
      EXCEPTIONS
        id                      = 1
        language                = 2
        name                    = 3
        not_found               = 4
        object                  = 5
        reference_check         = 6
        wrong_access_to_archive = 7
        OTHERS                  = 8.
    IF sy-subrc <> 0.
      ev_subject = ev_title = lv_title = 'I01081 – Agreement auto renew error report.xls'.
    ENDIF.


    CLEAR lv_title.
    LOOP AT lt_lines INTO ls_lines.
      CONCATENATE ls_lines-tdline '.xls' INTO lv_title.
      CONDENSE lv_title.
      ev_title = lv_title.
    ENDLOOP.

    lv_date = iv_date.
    CONCATENATE lv_date+0(4) '-' lv_date+4(2) '-' lv_date+6(2) INTO lv_date_final.

    CLEAR lt_lines.
*Email body
    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        client                  = sy-mandt
        id                      = 'ST'
        language                = sy-langu
        name                    = lc_body
        object                  = lc_object
      TABLES
        lines                   = lt_lines
      EXCEPTIONS
        id                      = 1
        language                = 2
        name                    = 3
        not_found               = 4
        object                  = 5
        reference_check         = 6
        wrong_access_to_archive = 7
        OTHERS                  = 8.
    IF sy-subrc <> 0.
      CONCATENATE text-017 text-018 INTO ls_body_line SEPARATED BY space.
      REPLACE FIRST OCCURRENCE OF '&' IN ls_body_line WITH lv_date_final.
    ENDIF.

    LOOP AT lt_lines INTO ls_lines.
      CONCATENATE ls_body_line ls_lines-tdline INTO ls_body_line SEPARATED BY space.
      CONDENSE ls_body_line.
      IF sy-tabix EQ 2.
        REPLACE FIRST OCCURRENCE OF '&' IN ls_body_line WITH lv_date_final.
      ENDIF.

      IF sy-tabix EQ 3.
        CLEAR: lv_date, lv_date_final.
        lv_date = sy-datum.
        CONCATENATE lv_date+0(4) '-' lv_date+4(2) '-' lv_date+6(2) INTO lv_date_final.
        REPLACE FIRST OCCURRENCE OF '&' IN ls_body_line WITH lv_date_final.
      ENDIF.
    ENDLOOP.

    APPEND ls_body_line TO et_body.


    CONCATENATE   'Agreement Number'(019)
                  'Contract ID'(001)
                  'IDoc Number'(015)
                  'Country'(004)
                  'Allowance Type Code'(012)
                  'Agreement End date'(021)
                  'Report Run Date'(022)
                  INTO ev_attachment_header
                  SEPARATED BY cl_abap_char_utilities=>horizontal_tab.

    CONCATENATE ev_attachment_header cl_abap_char_utilities=>cr_lf INTO ev_attachment_header.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->SET_GUID
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_GUID                        TYPE        SYSUUID_C32
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method SET_GUID.
    gv_guid = iv_guid.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->SET_LAND1
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_LAND1                       TYPE        LAND1
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method SET_LAND1.
    gv_land1 = iv_land1.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->SET_MODE_PAYMENT_TERM
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TYPE                        TYPE        CHAR1(optional)
* | [--->] IS_KONA                        TYPE        GTY_KONA(optional)
* | [<-->] CV_FUTURE_MONTH                TYPE        CHAR1(optional)
* | [<-->] CV_FUTURE_YEAR                 TYPE        CHAR1(optional)
* | [<-->] CV_ZLSCH_UPDATE                TYPE        CHAR1(optional)
* | [<-->] CS_MODE                        TYPE        ZST_MDM_AGR_MODE(optional)
* | [<-->] CS_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_mode_payment_term.

*1. If only how paid indicator is changed (effective date Past, Future) then update the existing agr
*2. If how paid indicator & any other fields are changed, then the usual change scenrio.

    IF iv_type EQ 'M'.

*If only payment method is changed, and the effective date is lesser than to date
      IF gv_pay_meth_ch IS NOT INITIAL AND
         gv_header_ch IS INITIAL AND
         gv_idoc_eff_date LE is_kona-databi.

        cs_mode-agr_mode = 'C'.
        cs_mode-is_new = space.
        cv_zlsch_update = abap_true.
        cs_agreement_header-auto_renew_ind = abap_true.

      ELSE.

        IF gv_idoc_eff_date GE is_kona-databi.
*Effective date is in future month
          cv_future_month = abap_true.
          CLEAR cs_agreement_header-auto_renew_ind.
          cs_mode-agr_mode = 'C'.
          cs_mode-is_new = 'X'.

*Effective date from the past date or Effective date from the current month
        ELSEIF gv_idoc_eff_date LT is_kona-databi.
          CLEAR cs_agreement_header-auto_renew_ind.
          cs_mode-agr_mode = 'X'.
          cs_mode-is_new = 'X'.
        ENDIF.
      ENDIF.

    ELSEIF iv_type = 'Y'.

      IF gv_pay_meth_ch IS NOT INITIAL AND
         gv_header_ch IS INITIAL AND
         gv_idoc_eff_date LE is_kona-databi.

        cs_mode-agr_mode = 'C'.
        cs_mode-is_new = space.
        cv_zlsch_update = abap_true.
        cs_agreement_header-auto_renew_ind = abap_true.
      ELSE.

*Effective date from Past.
        IF ( gv_idoc_eff_date LT sy-datum ).
          CLEAR cs_agreement_header-auto_renew_ind.
          cs_mode-agr_mode = 'P'.
          cs_mode-is_new = 'X'.
*Effective date is from today or in future but new effective date is lesser than the to date of agreement
        ELSEIF ( gv_idoc_eff_date EQ sy-datum OR
                 gv_idoc_eff_date GT sy-datum ) AND
          cs_agreement_header-agr_frm_date LT is_kona-databi.

          CLEAR cs_agreement_header-auto_renew_ind.
          cs_mode-agr_mode = 'X'.
          cs_mode-is_new = 'X'.

*If the effective date is greater than the to date of the agreement
        ELSEIF cs_agreement_header-agr_frm_date GT is_kona-databi.
          CLEAR: cs_agreement_header-auto_renew_ind,
                 cv_future_year.
          cs_mode-agr_mode = 'C'.
          cs_mode-is_new = 'X'.

        ENDIF.
      ENDIF.


    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->SET_START_DATE
* +-------------------------------------------------------------------------------------------------+
* | [<-->] CS_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_start_date.
    DATA: lv_begin_date TYPE begda,
          lv_end_date   TYPE sy-datum,
          lv_today_date TYPE sy-datum.

    lv_today_date = sy-datum.
    lv_today_date+6(2) = '01'.

    CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
      EXPORTING
        date      = lv_today_date
        days      = '00'
        months    = '11'
        signum    = '-'
        years     = '00'
      IMPORTING
        calc_date = lv_begin_date.

    CALL FUNCTION 'LAST_DAY_OF_MONTHS'
      EXPORTING
        day_in            = lv_begin_date
      IMPORTING
        last_day_of_month = lv_end_date
      EXCEPTIONS
        day_in_no_date    = 1
        OTHERS            = 2.

    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

    cs_agreement_header-agr_frm_date = cs_agreement_header-allow_frm_date = lv_begin_date.
    cs_agreement_header-agr_to_date = cs_agreement_header-allow_to_date = lv_end_date.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->UPDATE_ERROR_TABLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_AGR_ITM                     TYPE        ZTT_I01081_AGR_ITEM
* | [<-->] CS_AGR_HEADER                  TYPE        ZST_I01081_AGR_HEAD
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_error_table.

    DATA: lt_agr_err TYPE TABLE OF zi01081_agr_err,
          lv_guid    TYPE sysuuid_c32.

    IF gv_reprocess_guid IS NOT INITIAL.
      DELETE FROM: zi01081_agr_hdr WHERE key_val = gv_reprocess_guid,
                   zi01081_agr_itm WHERE key_val = gv_reprocess_guid,
                   zi01081_agr_err WHERE key_val = gv_reprocess_guid.
    ENDIF.
    "Start of changes for MDM Enhancement - ALLOW-2603
*    SORT gt_idoc_error BY msg_class msg_num.
*    DELETE ADJACENT DUPLICATES FROM gt_idoc_error COMPARING msg_class msg_num.
    "End of changes for MDM Enhancement - ALLOW-2603

    "Start of changes for MDM Enhancement - ALLOW-2603
    SORT gt_idoc_error BY key_val msg_class msg_num.
    DELETE ADJACENT DUPLICATES FROM gt_idoc_error COMPARING key_val msg_class msg_num.
    "End of changes for MDM Enhancement - ALLOW-2603

    LOOP AT gt_idoc_error ASSIGNING FIELD-SYMBOL(<ls_error>).
      <ls_error>-line_nbr = sy-tabix.
    ENDLOOP.


    IF gt_idoc_error IS NOT INITIAL.
      MOVE-CORRESPONDING gt_idoc_error TO lt_agr_err.
*Add the contract ID & interface ID
      LOOP AT lt_agr_err ASSIGNING FIELD-SYMBOL(<ls_agr_err>).
        <ls_agr_err>-int_id = cs_agr_header-int_id.
        <ls_agr_err>-contract_id = cs_agr_header-contract_id.
        lv_guid = <ls_agr_err>-key_val.
      ENDLOOP.
      CALL FUNCTION 'ENQUEUE_EZ_I01081_AG_HD'
        EXPORTING
          mode_zi01081_agr_err = 'E'
        EXCEPTIONS
          foreign_lock         = 1
          system_failure       = 2
          OTHERS               = 3.

      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.

      MODIFY zi01081_agr_err FROM TABLE lt_agr_err.

      CALL FUNCTION 'DEQUEUE_EZ_I01081_AG_HD'
        EXPORTING
          mode_zi01081_agr_err = 'E'.

*Update the Agreement Header & Item table
      gv_err = abap_true.
      cs_agr_header-key_val = lv_guid.
      CALL METHOD me->update_mdm_table
        EXPORTING
          is_agr_header = cs_agr_header
          it_agr_item   = it_agr_itm.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->UPDATE_ERROR_TABLE_AR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_error_table_ar.
    DATA: lt_err_autorenew TYPE TABLE OF zi01081_aren_err,
          ls_err_autorenew TYPE zi01081_aren_err,
          lv_tabix         TYPE i VALUE 0.

    SORT gt_idoc_error BY key_val.
    IF gt_idoc_error IS NOT INITIAL.
      LOOP AT gt_agr_head_ar INTO DATA(ls_agr_head_ar).
        LOOP AT gt_idoc_error INTO DATA(ls_idoc_error) WHERE key_val = ls_agr_head_ar-key_val.
          lv_tabix = lv_tabix + 1.
          ls_err_autorenew-knuma_ag = ls_agr_head_ar-knuma_ag.
          ls_err_autorenew-contract_id = ls_agr_head_ar-contract_id.
          ls_err_autorenew-line_nbr = lv_tabix.
          ls_err_autorenew-idoc_num = ls_agr_head_ar-idoc_num.
          ls_err_autorenew-allow_type_code = ls_agr_head_ar-allow_type_code.
          ls_err_autorenew-run_date = gv_ar_rundate.
          ls_err_autorenew-created_on = sy-datum.
          ls_err_autorenew-created_time = sy-uzeit.
          ls_err_autorenew-msg_class = ls_idoc_error-msg_class.
          ls_err_autorenew-msg_num = ls_idoc_error-msg_num.
          ls_err_autorenew-variant_1 = ls_idoc_error-variant_1.
          ls_err_autorenew-variant_2 = ls_idoc_error-variant_2.
          ls_err_autorenew-variant_3 = ls_idoc_error-variant_3.
          ls_err_autorenew-variant_4 = ls_idoc_error-variant_4.
          APPEND ls_err_autorenew TO lt_err_autorenew.
          CLEAR: ls_err_autorenew, ls_idoc_error.
        ENDLOOP.
        CLEAR: ls_agr_head_ar,lv_tabix.
      ENDLOOP.

      DELETE zi01081_aren_err FROM TABLE gt_aren_err.
      MODIFY zi01081_aren_err FROM TABLE lt_err_autorenew.

    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->UPDATE_MDM_TABLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_AGR_HEADER                  TYPE        ZST_I01081_AGR_HEAD
* | [--->] IT_AGR_ITEM                    TYPE        ZTT_I01081_AGR_ITEM
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_mdm_table.


    DATA: ls_agr_hdr TYPE zi01081_agr_hdr,
          ls_agr_itm TYPE zi01081_agr_itm,
          lt_agr_itm TYPE TABLE OF zi01081_agr_itm.


    MOVE-CORRESPONDING is_agr_header TO ls_agr_hdr.
    IF ls_agr_hdr-key_val IS INITIAL.
      ls_agr_hdr-key_val = gv_guid.
    ENDIF.

    IF gv_err IS NOT INITIAL.
      ls_agr_hdr-is_error = abap_true.
      CLEAR gv_err.
    ENDIF.

    CALL FUNCTION 'ENQUEUE_EZ_I01081_AG_HD'
      EXPORTING
        mode_zi01081_agr_hdr = 'E'
        mode_zi01081_agr_itm = 'E'
      EXCEPTIONS
        foreign_lock         = 1
        system_failure       = 2
        OTHERS               = 3.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

*      MODIFY zi01081_agr_hdr FROM ls_agr_hdr. "Commented for change for MDM enhancement - ALLOW-2603
    "Begin of change for MDM enhancement - ALLOW-2603
    APPEND ls_agr_hdr TO gt_agr_hdr_tmp.
    MODIFY zi01081_agr_hdr FROM TABLE gt_agr_hdr_tmp.
    "End of change for MDM enhancement - ALLOW-2603

    LOOP AT it_agr_item INTO DATA(ls_agreement_itm).
      ls_agr_itm-key_val = ls_agr_hdr-key_val.
      ls_agr_itm-int_id  = ls_agr_hdr-int_id.
      ls_agr_itm-item_no = sy-tabix.
      ls_agr_itm-idoc_num = is_agr_header-idoc_num.
      ls_agr_itm-cntry = is_agr_header-cntry.
      ls_agr_itm-min_purch_amt = ls_agreement_itm-min_purch_amt.
      ls_agr_itm-max_purch_amt = ls_agreement_itm-max_purch_amt.
      ls_agr_itm-rebate_rate = ls_agreement_itm-rebate_rate.
      APPEND ls_agr_itm TO lt_agr_itm.
      CLEAR ls_agr_itm.
    ENDLOOP.

*      MODIFY zi01081_agr_itm FROM TABLE lt_agr_itm. "Commented for change for MDM enhancement - ALLOW-2603
    "Begin of change for MDM enhancement - ALLOW-2603
    APPEND LINES OF lt_agr_itm TO gt_agr_itm_tmp.
    MODIFY zi01081_agr_itm FROM TABLE gt_agr_itm_tmp.
    CLEAR lt_agr_itm.
    "End of change for MDM enhancement - ALLOW-2603

    CALL FUNCTION 'DEQUEUE_EZ_I01081_AG_HD'
      EXPORTING
        mode_zi01081_agr_hdr = 'E'
        mode_zi01081_agr_itm = 'E'.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->UPDATE_SUCCESS_AGR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_success_agr.

    DATA: ls_mdm_agr TYPE zi01081_mdm_agr.

    ls_mdm_agr-mandt = sy-mandt.
    ls_mdm_agr-idoc_num = is_agreement_header-idoc_num.
    ls_mdm_agr-contract_id = is_agreement_header-contract_id.
    ls_mdm_agr-int_id = is_agreement_header-int_id.
    ls_mdm_agr-cntry = is_agreement_header-cntry.
    ls_mdm_agr-knuma_ag = is_agreement_header-knuma_ag.
    ls_mdm_agr-allow_type_code = is_agreement_header-allow_type_code.
    ls_mdm_agr-location_type = is_agreement_header-location_type.
    ls_mdm_agr-vend_number = is_agreement_header-vend_number.
    ls_mdm_agr-agr_type = is_agreement_header-agr_type.
    ls_mdm_agr-created_date = is_agreement_header-created_date.
    ls_mdm_agr-created_time = is_agreement_header-created_time.
    ls_mdm_agr-prev_agr_num = gv_prev_agr.
    ls_mdm_agr-agr_status = gv_ustat.

    MODIFY zi01081_mdm_agr FROM ls_mdm_agr.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->VALIDATE_ALLOWANCE_TYPE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_AGR_TYPE                    TYPE        BOART
* | [--->] IV_ALLOW_TYPE                  TYPE        ZD_ALLOWCD
* | [--->] IV_LOCATION_TYPE               TYPE        ZD_LOC_TYPE
* | [--->] IV_LAND1                       TYPE        LAND1
* | [<---] RV_VALID                       TYPE        CHAR1
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD validate_allowance_type.


    SELECT   a~prctr
   FROM cepc AS a LEFT OUTER JOIN cepct AS b
            ON a~prctr = b~prctr
              INTO TABLE @DATA(lt_cepc)
              WHERE a~abtei = @iv_location_type
              AND   a~land1 = @iv_land1
              AND   ( b~spras EQ @gc_english OR
                      b~spras EQ @sy-langu ) ORDER BY b~prctr.

    IF sy-subrc IS INITIAL.
      SELECT prctr,
             bukrs
      FROM cepc_bukrs
      INTO TABLE @DATA(lt_cepc_bukrs)
        FOR ALL ENTRIES IN @lt_cepc
        WHERE prctr = @lt_cepc-prctr.
      IF sy-subrc IS INITIAL.
        SELECT allow_type
           FROM zart_acc_determ
           INTO TABLE @DATA(lt_allow_types)
           FOR ALL ENTRIES IN @lt_cepc_bukrs
           WHERE  land1 = @iv_land1
           AND loc_type = @iv_location_type
           AND boart_ag = @iv_agr_type
           AND bukrs = @lt_cepc_bukrs-bukrs.

*Get the default company code for China.
        DATA(lo_gce_config) = NEW zcl_ar_ams_read_gce( ).
        TRY.
            DATA(lv_company_code) = lo_gce_config->zif_ar_ams_read_gce~get_default_company_code( iv_country = iv_land1 ).
          CATCH cx_static_check.
        ENDTRY.

        SELECT spras,
               bukrs,
               rstgr,
               txt40
            FROM t053s
            INTO TABLE @DATA(lt_t053s)
         FOR ALL ENTRIES IN @lt_allow_types
         WHERE bukrs = @lv_company_code
           AND rstgr = @lt_allow_types-allow_type
           AND ( spras = @sy-langu OR
                 spras = @gv_language ).
        IF sy-subrc IS INITIAL.
          IF line_exists( lt_t053s[ rstgr = iv_allow_type ] ).
            rv_valid = abap_true.
            READ TABLE lt_t053s INTO DATA(ls_t053s) WITH KEY spras = gv_language
                                                             bukrs = lv_company_code
                                                             rstgr = iv_allow_type TRANSPORTING txt40.

            IF sy-subrc IS NOT INITIAL.
              READ TABLE lt_t053s INTO ls_t053s WITH KEY spras = 'E'
                                                 bukrs = lv_company_code
                                                 rstgr = iv_allow_type TRANSPORTING txt40.
            ENDIF.
            CONDENSE ls_t053s-txt40.
            gv_allow_desc = ls_t053s-txt40.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->VALIDATE_ALLOWED_DATE
* +-------------------------------------------------------------------------------------------------+
* | [--->] ES_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD
* | [<---] RV_VALID                       TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD validate_allowed_date.

    DATA(ld_i_datum_bis) = sy-datum.
    DATA(ld_i_datum_von) = es_agreement_header-agr_frm_date.
    DATA ld_e_monate TYPE string.
*
    CALL FUNCTION 'MONTHS_BETWEEN_TWO_DATES'
      EXPORTING
        i_datum_bis = ld_i_datum_bis
        i_datum_von = ld_i_datum_von
      IMPORTING
        e_monate    = ld_e_monate.

    IF ld_e_monate LE 12.
      rv_valid = abap_true.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->VALIDATE_HEADER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_HEADER                      TYPE        ZST_I01081_IDOC_HEAD
* | [<-->] CT_IDOC_STATUS                 TYPE        T_IDOC_STATUS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD validate_header.
    DATA: lt_agr_head_tmp     TYPE TABLE OF gty_agr,
          ls_agreement_header TYPE zst_i01081_agr_head.

    IF is_header-currency IS INITIAL.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = gs_idoc_control-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '412' "Currency is empty
        CHANGING
          et_idoc_status = ct_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = space
          iv_idoc_num  = gs_idoc_control-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '412'. "Currency is empty
    ENDIF.

    MOVE-CORRESPONDING is_header TO ls_agreement_header.
    ls_agreement_header-contract_stat = is_header-contract_status.
    ls_agreement_header-suppl_stat = is_header-supplier_status.
    CALL METHOD me->validate_suppl_stat
      EXPORTING
        is_agreement_header = ls_agreement_header
      IMPORTING
        rv_valid            = DATA(lv_valid).
    IF lv_valid = abap_false.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = gs_idoc_control-docnum
          iv_status      = me->gc_68
          iv_msgty       = 'E'
          iv_msgid       = me->gc_zfap
          iv_msgno       = '461' "Invalid Supplier / Contractor status
        CHANGING
          et_idoc_status = ct_idoc_status.
    ENDIF.

    SELECT a~key_val,
           a~allow_type_code,
           b~idoc_num,
           b~contract_id,
           b~int_id,
           b~cntry,
           b~knuma_ag,
           b~created_date,
           b~created_time,
           b~agr_status,
           b~vend_number,
           a~settl_partn,
           a~merch_hier
       FROM zi01081_agr_hdr AS a
      INNER JOIN zi01081_mdm_agr AS b
      ON a~int_id EQ b~int_id AND
         a~idoc_num = b~idoc_num  AND
         a~cntry = b~cntry AND
         a~contract_id = b~contract_id AND
         a~vend_number = b~vend_number
      INTO TABLE @lt_agr_head_tmp
      WHERE a~contract_id = @is_header-contract_id
        AND a~settl_partn = @is_header-settlement_parnter
        AND b~vend_number = @is_header-vendor_number.
    IF sy-subrc IS NOT INITIAL.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = gs_idoc_control-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '941' "No allowance found for deletion for combination
        CHANGING
          et_idoc_status = ct_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = gv_land1
          iv_idoc_num  = gs_idoc_control-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '941'.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->VALIDATE_IDOC_DATA_MAND_FIELDS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_IDOC_HEADER                 TYPE        ZST_I01081_IDOC_HEAD
* | [--->] IT_IDOC_ITEM                   TYPE        ZTT_I01081_IDOC_ITEM
* | [--->] IS_CONTROL_DATA                TYPE        EDIDC
* | [<-->] ET_IDOC_STATUS                 TYPE        T_IDOC_STATUS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD validate_idoc_data_mand_fields.

    DATA: lt_idoc_status TYPE t_idoc_status.


    IF is_idoc_header-contract_id IS INITIAL.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = is_control_data-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '200' "Contract Number is empty
        CHANGING
          et_idoc_status = lt_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = space
          iv_idoc_num  = is_control_data-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '200'. "Contract Number is empty
    ENDIF.

    IF is_idoc_header-supplier_status IS INITIAL.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = is_control_data-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '446' "Supplier Status is empty
        CHANGING
          et_idoc_status = lt_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = space
          iv_idoc_num  = is_control_data-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '446'. "Supplier Status is empty
    ENDIF.

    IF is_idoc_header-contract_status IS INITIAL.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = is_control_data-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '447' "Contractor Status is empty
        CHANGING
          et_idoc_status = lt_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = space
          iv_idoc_num  = is_control_data-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '447'. "Contractor Status is empty
    ENDIF.

    IF is_idoc_header-allow_type_desc IS INITIAL.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = is_control_data-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '448' "Agreement Type description is empty
        CHANGING
          et_idoc_status = lt_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = space
          iv_idoc_num  = is_control_data-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '448'. "Agreement Type description is empty
    ENDIF.

    IF is_idoc_header-allow_pymt_mthd_cd IS INITIAL.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = is_control_data-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '411' "Payment method is empty
        CHANGING
          et_idoc_status = lt_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = space
          iv_idoc_num  = is_control_data-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '411'. "Payment method is empty

    ENDIF.

    IF is_idoc_header-currency IS INITIAL.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = is_control_data-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '412' "Currency is empty
        CHANGING
          et_idoc_status = lt_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = space
          iv_idoc_num  = is_control_data-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '412'. "Currency is empty
    ENDIF.

*Vendor Number
    IF is_idoc_header-vendor_number IS INITIAL.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = is_control_data-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '415' "Vendor number is empty
        CHANGING
          et_idoc_status = lt_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = space
          iv_idoc_num  = is_control_data-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '415'. "Vendor number is empty
    ENDIF.

*Settlement Partner
    IF is_idoc_header-settlement_parnter IS INITIAL.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = is_control_data-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '416' "Settlement Partner is empty
        CHANGING
          et_idoc_status = lt_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = space
          iv_idoc_num  = is_control_data-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '416'. "Settlement Partner is empty
    ENDIF.

    IF is_idoc_header-allow_type_code IS INITIAL.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = is_control_data-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '418' "Allowance Type code is empty
        CHANGING
          et_idoc_status = lt_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = space
          iv_idoc_num  = is_control_data-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '418'. "Allowance Type code is empty
    ENDIF.


*Allowance Effective date
    IF is_idoc_header-allowance_effective_date IS INITIAL.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = is_control_data-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '422' "Allowance valid from date is empty
        CHANGING
          et_idoc_status = lt_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = space
          iv_idoc_num  = is_control_data-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '422'. "Allowance valid from date is empty
    ENDIF.

*Legacy Agreement department Number
    IF is_idoc_header-lgcy_agmt_dept_nbr IS INITIAL.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = is_control_data-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '435' "Merchandise hierarchy is empty
        CHANGING
          et_idoc_status = lt_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = space
          iv_idoc_num  = is_control_data-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '435'. "Merchandise hierarchy is empty
    ENDIF.


*validate the item
    IF it_idoc_item[] IS INITIAL.
      CALL METHOD me->add_idoc_status
        EXPORTING
          iv_docnum      = is_control_data-docnum
          iv_status      = gc_68
          iv_msgty       = 'E'
          iv_msgid       = gc_zfap
          iv_msgno       = '436' "Tiers are empty
        CHANGING
          et_idoc_status = lt_idoc_status.

      CALL METHOD me->add_err_message
        EXPORTING
          iv_cntry     = space
          iv_idoc_num  = is_control_data-docnum
          iv_mtype     = 'E'
          iv_msg_class = gc_zfap
          iv_msg_num   = '436'. "Tiers are empty
    ENDIF.

    IF lt_idoc_status IS NOT INITIAL.
      APPEND LINES OF lt_idoc_status TO et_idoc_status.
      LOOP AT lt_idoc_status INTO DATA(ls_idoc_status).
        CALL METHOD me->add_err_message
          EXPORTING
            iv_cntry     = gv_country
            iv_idoc_num  = is_control_data-docnum
            iv_mtype     = ls_idoc_status-msgty
            iv_msg_class = gc_zfap
            iv_msg_num   = ls_idoc_status-msgno
            iv_variant_1 = ls_idoc_status-msgv1
            iv_variant_2 = ls_idoc_status-msgv2
            iv_variant_3 = ls_idoc_status-msgv3
            iv_variant_4 = ls_idoc_status-msgv4.
      ENDLOOP.
    ENDIF.



  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->VALIDATE_LGCY_AGR_DEPT_NUMB
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_DEPT_NUMBER                 TYPE        ZD_MERCH_HIER
* | [<---] RV_VALID                       TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD validate_lgcy_agr_dept_numb.

    DATA: lv_dept TYPE zd_dep.

*    lv_dept = iv_dept_number.
*    SELECT SINGLE department INTO @DATA(lv_department)
*      FROM zmmt_items WHERE srcsys EQ 'SAMS' AND
*                            land EQ @gv_land1 AND
*                            department EQ @lv_dept.
*
    IF sy-subrc EQ 0.
      rv_valid = abap_true.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->VALIDATE_LOCATION_TYPE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_LOCATION_TYPE               TYPE        ZD_CHLDLOCTYP
* | [<---] RV_VALID                       TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD validate_location_type.

    SELECT a~chldloctyp,
          b~locdesc
          FROM zart_bdiv_loctyp AS a
          INNER JOIN zglt_loctyp_desc AS b
          ON b~betrpmdm EQ a~chldloctyp
          INTO TABLE @DATA(gt_loc_type)
          WHERE a~land1 EQ @gv_land1
            AND a~chldloctyp EQ @iv_location_type
            AND b~lang EQ @sy-langu.
    IF sy-subrc IS INITIAL.
      rv_valid = abap_true.
    ELSE.
      SELECT a~chldloctyp,
             b~locdesc
      FROM zart_bdiv_loctyp AS a
      INNER JOIN zglt_loctyp_desc AS b
      ON b~betrpmdm EQ a~chldloctyp
      INTO TABLE @gt_loc_type
      WHERE a~land1 EQ @gv_land1
        AND a~chldloctyp EQ @iv_location_type
        AND b~lang EQ @gc_english.
      IF sy-subrc IS INITIAL.
        rv_valid = abap_true.
      ENDIF.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->VALIDATE_PAYMENT_METHOD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_PAYMENT_METHOD              TYPE        DZLSCH
* | [<---] RV_VALID                       TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD validate_payment_method.

    IF iv_payment_method IS NOT INITIAL.
      SELECT SINGLE zlsch INTO @DATA(lv_zlsch)
        FROM t042z WHERE land1 EQ @gv_land1
                    AND zlsch EQ @iv_payment_method.
      IF sy-subrc IS INITIAL.
        rv_valid = abap_true.
      ENDIF.
    ELSE.
      rv_valid = abap_true.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->VALIDATE_SETTLEMENT_CALENDER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_SETTL_CALENDER              TYPE        /IRM/IP_SETLCAL
* | [<---] RV_VALID                       TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD validate_settlement_calender.

    SELECT SINGLE calid INTO @DATA(lv_calid)
      FROM /irm/tipfacdt WHERE
           spras EQ @sy-langu
      AND  calid EQ @iv_settl_calender.
    IF sy-subrc IS INITIAL.
      rv_valid = abap_true.
    ELSE.
      SELECT SINGLE calid INTO lv_calid
      FROM /irm/tipfacdt WHERE
           spras EQ gc_english
       AND calid EQ iv_settl_calender.
      IF sy-subrc IS INITIAL.
        rv_valid = abap_true.
      ENDIF.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->VALIDATE_SETTL_PARTN
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_SETTL_PARTN                 TYPE        LIFNR
* | [--->] IV_LAND1                       TYPE        LAND1
* | [<---] RV_VALID                       TYPE        CHAR1
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD validate_settl_partn.


*    SELECT SINGLE lifnr FROM lfa1 INTO @DATA(lv_lifnr)
*      WHERE lifnr EQ @iv_settl_partn.
*    IF sy-subrc IS INITIAL.
**Read company code.
*      SELECT a~bukrs
*        UP TO 1 ROWS
*        INTO @DATA(lv_bukrs)
*       FROM knb1 AS a
*       INNER JOIN t001 AS b
*         ON a~bukrs = b~bukrs
*         WHERE a~kunnr = @lv_lifnr
*         AND b~land1 = @iv_land1.
*      ENDSELECT.
*
*      IF sy-subrc IS INITIAL.
**Read Sales Org.
*        SELECT a~vkorg
*          INTO @DATA(lv_vkorg)
*          FROM knvv AS a
*         INNER JOIN tvko AS b
*            ON a~vkorg = b~vkorg
*         INNER JOIN t001 AS c
*            ON b~bukrs = c~bukrs
*         WHERE a~kunnr = @lv_lifnr
*           AND c~land1 = @iv_land1.
*        ENDSELECT.
*        IF sy-subrc IS INITIAL.
*          rv_valid = abap_true.
*        ENDIF.
*      ENDIF.
*    ENDIF.

    DATA: lv_altkn         TYPE altkn,
          lv_altkn_temp(6) TYPE c.

    lv_altkn_temp = iv_settl_partn.
    SHIFT lv_altkn_temp RIGHT DELETING TRAILING space.

    TRANSLATE lv_altkn_temp USING ' 00000'.

    lv_altkn = lv_altkn_temp.

    "Begin of changes-SKONATH-INC11396209-DR3K920874-8/28/2019
    DATA: lo_read_gce     TYPE REF TO zif_ar_ams_read_gce,
          lv_company_code TYPE bukrs.
    CREATE OBJECT lo_read_gce TYPE zcl_ar_ams_read_gce.
    CLEAR lv_company_code.
    TRY.
        lv_company_code = lo_read_gce->get_default_company_code( iv_country = gv_land1 ).
      CATCH cx_static_check.
    ENDTRY.

    SELECT  lnrze UP TO 1  ROWS FROM lfb1
    INTO @DATA(lv_lifnr)
    WHERE bukrs = @lv_company_code AND
          altkn EQ @lv_altkn AND
          loevm EQ @abap_false.
    ENDSELECT.
*    SELECT  lnrze UP TO 1  ROWS FROM lfb1
*      INTO @DATA(lv_lifnr)
*      WHERE altkn EQ @lv_altkn AND
*            loevm EQ @abap_false.
*    ENDSELECT.
    "End of changes-SKONATH-INC11396209-DR3K920874-8/28/2019.

    IF sy-subrc IS INITIAL.
      rv_valid = abap_true.
    ELSE.


    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->VALIDATE_SUPPL_STAT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD(optional)
* | [<---] RV_VALID                       TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD validate_suppl_stat.
    "Begin of change for MDM enhancement - ALLOW-2603
    IF gv_gsm_design EQ abap_true.
      SELECT * INTO TABLE @DATA(lt_tvarvc_s)
        FROM tvarvc
        WHERE name EQ @gc_cont_stat_contract OR
              name EQ @gc_suppl_stat_contract.

      DATA(lt_tvarvc_c) = lt_tvarvc_s.

      DELETE: lt_tvarvc_c WHERE name NE gc_cont_stat_contract,
              lt_tvarvc_s WHERE name NE gc_suppl_stat_contract.
      "End of change for MDM enhancement - ALLOW-2603
    ELSE.
      SELECT * INTO TABLE lt_tvarvc_s
        FROM tvarvc
        WHERE name EQ gc_cont_stat OR
              name EQ gc_suppl_stat.

      lt_tvarvc_c = lt_tvarvc_s.

      DELETE: lt_tvarvc_c WHERE name NE gc_cont_stat,
              lt_tvarvc_s WHERE name NE gc_suppl_stat.
    ENDIF.
    IF sy-subrc IS INITIAL.
      "Begin of change for MDM enhancement - ALLOW-2603
      IF gv_gsm_design EQ abap_true.
        READ TABLE lt_tvarvc_c WITH KEY name = gc_cont_stat_contract
                                        low = is_agreement_header-contract_stat TRANSPORTING NO FIELDS.
        "End of change for MDM enhancement - ALLOW-2603
      ELSE.
        READ TABLE lt_tvarvc_c INTO DATA(ls_tvarvc) WITH KEY name = gc_cont_stat
                                                             low = is_agreement_header-contract_stat.
      ENDIF.
*If contractor status not valid, then return.
      IF sy-subrc IS NOT INITIAL.
        RETURN.
      ELSE.
*If contractor status valid, then check for suppl status.
        CLEAR ls_tvarvc.
        "Begin of change for MDM enhancement - ALLOW-2603
        IF gv_gsm_design EQ abap_true.
          READ TABLE lt_tvarvc_s WITH KEY name = gc_suppl_stat_contract
                                          low = is_agreement_header-suppl_stat TRANSPORTING NO FIELDS.
        "End of change for MDM enhancement - ALLOW-2603
        ELSE.
          READ TABLE lt_tvarvc_s INTO ls_tvarvc WITH KEY name = gc_suppl_stat
                                                         low = is_agreement_header-suppl_stat.
        ENDIF.
        IF sy-subrc IS NOT INITIAL.
          CLEAR rv_valid.
          RETURN.
        ELSE.
          rv_valid = abap_true.
        ENDIF.

      ENDIF.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->VALIDATE_TIER_RATE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_COUNT                       TYPE        SY-TABIX(optional)
* | [--->] IS_AGREEMENT_HEADER            TYPE        ZST_I01081_AGR_HEAD(optional)
* | [--->] IS_TIER_DTL                    TYPE        ZDS_TIER_DTL(optional)
* | [--->] IS_PREV_TIER                   TYPE        ZDS_TIER_DTL(optional)
* | [<---] RV_VALID                       TYPE        FLAG
* | [<-->] CT_IDOC_STATUS                 TYPE        T_IDOC_STATUS(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD validate_tier_rate.
    DATA: lv_kstbw        TYPE kstbw,
          lv_amount_to    TYPE char30,
          lv_integer_part TYPE char20,
          lv_msgv1        TYPE edi_stapa1,
          lv_msgv2        TYPE edi_stapa2,
          lv_prev         TYPE kstbw,
          lv_current      TYPE kstbw.

    CONSTANTS: lc_9(1) TYPE c VALUE '9'.
    DATA(lo_read_gce) = NEW zcl_ar_ams_read_gce( ).
    CLEAR: lv_prev, lv_current.



    rv_valid = abap_true.

    IF is_agreement_header-scale_type = 'B'.
      lv_msgv1 = iv_count.
      CONDENSE  lv_msgv1.
      IF is_prev_tier IS NOT INITIAL.
        lv_current = is_tier_dtl-ctx_va_tovalue_amnt.
        lv_prev = is_prev_tier-ctx_va_tovalue_amnt.
*Check if the to value of the current tier is greater than the to value of the previous tier
        IF lv_current < lv_prev.

          CALL METHOD me->add_idoc_status
            EXPORTING
              iv_docnum      = gs_idoc_control-docnum
              iv_status      = gc_68
              iv_msgty       = 'E'
              iv_msgid       = gc_zfap
              iv_msgno       = '454' "Tier & 'to value' cannot be lesser than the previous tier
              iv_msgv1       = lv_msgv1
            CHANGING
              et_idoc_status = ct_idoc_status.

          CALL METHOD me->add_err_message
            EXPORTING
              iv_cntry     = is_agreement_header-cntry
              iv_idoc_num  = gs_idoc_control-docnum
              iv_mtype     = 'E'
              iv_msg_class = gc_zfap
              iv_msg_num   = '454' "Tier & 'to value' cannot be lesser than the previous tier
              iv_variant_1 = lv_msgv1.
          CLEAR rv_valid.
        ENDIF.

        CLEAR: lv_prev, lv_current.
        lv_prev = is_prev_tier-ctx_va_tovalue_amnt.
        lv_current = is_tier_dtl-ctx_va_from_value_amnt.

*Check if the current tier from value is +1 from the to value of the previous tier
        IF lv_current NE ( lv_prev + 1 ).
          CALL METHOD me->add_idoc_status
            EXPORTING
              iv_docnum      = gs_idoc_control-docnum
              iv_status      = gc_68
              iv_msgty       = 'E'
              iv_msgid       = gc_zfap
              iv_msgno       = '460' "Tier & 'from value' cannot be lesser than the previous tier
              iv_msgv1       = lv_msgv1
            CHANGING
              et_idoc_status = ct_idoc_status.

          CALL METHOD me->add_err_message
            EXPORTING
              iv_cntry     = is_agreement_header-cntry
              iv_idoc_num  = gs_idoc_control-docnum
              iv_mtype     = 'E'
              iv_msg_class = gc_zfap
              iv_msg_num   = '460' "Tier & 'from value' cannot be lesser than the previous tier
              iv_variant_1 = lv_msgv1.
        ENDIF.


        IF is_tier_dtl-ctx_va_from_value_amnt IS NOT INITIAL AND is_tier_dtl-ctx_va_tovalue_amnt IS INITIAL.
          CALL METHOD me->add_idoc_status
            EXPORTING
              iv_docnum      = gs_idoc_control-docnum
              iv_status      = gc_68
              iv_msgty       = 'E'
              iv_msgid       = gc_zfap
              iv_msgno       = '456' "Tier & to value is empty
              iv_msgv1       = lv_msgv1
            CHANGING
              et_idoc_status = ct_idoc_status.

          CALL METHOD me->add_err_message
            EXPORTING
              iv_cntry     = is_agreement_header-cntry
              iv_idoc_num  = gs_idoc_control-docnum
              iv_mtype     = 'E'
              iv_msg_class = gc_zfap
              iv_msg_num   = '456' "Tier & to value is empty
              iv_variant_1 = lv_msgv1.
          CLEAR rv_valid.
        ENDIF.

        CLEAR:lv_prev, lv_current.

        lv_prev = is_prev_tier-ctx_va_rate.
        lv_current = is_prev_tier-ctx_va_rate.
        IF lv_prev > lv_current.
          CALL METHOD me->add_err_message
            EXPORTING
              iv_cntry     = is_agreement_header-cntry
              iv_idoc_num  = gs_idoc_control-docnum
              iv_mtype     = 'E'
              iv_msg_class = gc_zfap
              iv_msg_num   = '456' "Tier & to value is empty
              iv_variant_1 = lv_msgv1.
          CLEAR rv_valid.
        ENDIF.


        CLEAR:lv_prev, lv_current.
        lv_prev = is_prev_tier-ctx_va_rate.
        lv_current = is_tier_dtl-ctx_va_rate.

        IF lv_prev > lv_current.
          CALL METHOD me->add_idoc_status
            EXPORTING
              iv_docnum      = gs_idoc_control-docnum
              iv_status      = gc_68
              iv_msgty       = 'E'
              iv_msgid       = gc_zfap
              iv_msgno       = '463' "Tier & rebate rate is greater than next tier
              iv_msgv1       = lv_msgv1
            CHANGING
              et_idoc_status = ct_idoc_status.

          CALL METHOD me->add_err_message
            EXPORTING
              iv_cntry     = is_agreement_header-cntry
              iv_idoc_num  = gs_idoc_control-docnum
              iv_mtype     = 'E'
              iv_msg_class = gc_zfap
              iv_msg_num   = '463' "Tier & rebate rate is greater than next tier
              iv_variant_1 = lv_msgv1.
          CLEAR rv_valid.
        ENDIF.


        TRY.
            CALL METHOD lo_read_gce->zif_ar_ams_read_gce~get_tier_rate_digits_amount
              RECEIVING
                rv_tier_limit = DATA(lv_tier_limit).
            lv_msgv2 = lv_tier_limit.
          CATCH cx_static_check .
            CLEAR lv_tier_limit.
        ENDTRY.

        lv_kstbw = is_tier_dtl-ctx_va_tovalue_amnt.
        WRITE lv_kstbw TO lv_amount_to CURRENCY is_tier_dtl-ctx_va_cur_uom NO-GROUPING.

        SELECT SINGLE dcpfm FROM usr01
        INTO @DATA(lv_dcpfm) WHERE bname = @sy-uname.
        IF sy-subrc EQ 0 AND lv_dcpfm NE abap_true.
          REPLACE ALL OCCURRENCES OF '.' IN lv_amount_to WITH space.
          REPLACE ALL OCCURRENCES OF ',' IN lv_amount_to WITH '.'.
          CONDENSE lv_amount_to.
        ENDIF.

        lv_integer_part = trunc( lv_amount_to ).
        CONDENSE lv_integer_part.


        IF strlen( lv_integer_part ) GT lv_tier_limit.
          CALL METHOD me->add_idoc_status
            EXPORTING
              iv_docnum      = gs_idoc_control-docnum
              iv_status      = gc_68
              iv_msgty       = 'E'
              iv_msgid       = gc_zfap
              iv_msgno       = '458' "Tier & 'to value' can be max & digits only
              iv_msgv1       = lv_msgv1
              iv_msgv2       = lv_msgv2
            CHANGING
              et_idoc_status = ct_idoc_status.

          CALL METHOD me->add_err_message
            EXPORTING
              iv_cntry     = is_agreement_header-cntry
              iv_idoc_num  = gs_idoc_control-docnum
              iv_mtype     = 'E'
              iv_msg_class = gc_zfap
              iv_msg_num   = '458' "Tier & 'to value' can be max & digits only
              iv_variant_1 = lv_msgv1
              iv_variant_2 = lv_msgv2.
          CLEAR rv_valid.

          CLEAR rv_valid.
        ENDIF.

** Below code is to ensure that the last tier to (max. digits) scenario should not have
** fraction part populated (i.e. Decimals should be zeros)
*      IF  strlen( lv_integer_part ) EQ lv_tier_limit
*            AND lv_integer_part CO lc_9
*            AND frac( is_tier_dtl-ctx_va_tovalue_amnt ) IS NOT INITIAL.
*        CLEAR rv_valid.
*      ENDIF.
      ENDIF.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_AMS_I01081_UTILTY->VALIDATE_VENDOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_VENDOR                      TYPE        LIFNR
* | [<---] RV_VALID                       TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD validate_vendor.

*    SELECT a~lifnr
*      FROM lfa1 AS a
*      INNER JOIN kna1 AS b
*      ON a~lifnr EQ b~kunnr INTO
*      @DATA(lv_lifnr) UP TO 1 ROWS
*      WHERE a~lifnr EQ @iv_vendor AND
*            b~loevm EQ @abap_false.
*    ENDSELECT.

    DATA: lv_altkn TYPE altkn.
    "Begin of changes-SKONATH-INC11396209-DR3K920874-8/28/2019

    DATA: lo_read_gce     TYPE REF TO zif_ar_ams_read_gce,
          lv_company_code TYPE bukrs.
    CREATE OBJECT lo_read_gce TYPE zcl_ar_ams_read_gce.
    CLEAR lv_company_code.
    TRY.
        lv_company_code = lo_read_gce->get_default_company_code( iv_country = gv_land1 ).
      CATCH cx_static_check.
    ENDTRY.

    SELECT lifnr UP TO 1 ROWS
          FROM lfb1 INTO @DATA(lv_lifnr) WHERE bukrs = @lv_company_code AND
                                               altkn = @iv_vendor AND
                                               loevm = @space.
    ENDSELECT.
*    SELECT lifnr UP TO 1 ROWS
*          FROM lfb1 INTO @DATA(lv_lifnr) WHERE altkn = @iv_vendor AND
*                                               loevm = @space.
*    ENDSELECT.
    "End of changes-SKONATH-INC11396209-DR3K920874-8/28/2019.
    IF sy-subrc IS INITIAL.
      rv_valid = abap_true.
    ENDIF.

  ENDMETHOD.
ENDCLASS.
